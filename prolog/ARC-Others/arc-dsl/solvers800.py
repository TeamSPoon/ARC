from dsl import *
from arc_constants import *


def solve_ed36ccf7(I):
    O = rot270(I)
    return O


def solve_74dd1130(I):
    O = dmirror(I)
    return O


def solve_6150a2bd(I):
    O = rot180(I)
    return O


def solve_68b16354(I):
    O = hmirror(I)
    return O


def solve_3c9b0459(I):
    O = rot180(I)
    return O


def solve_d10ecb37(I):
    O = crop(I, ORIGIN, TWO_BY_TWO)
    return O


def solve_c8f0f002(I):
    O = replace(I, SEVEN, FIVE)
    return O


def solve_67a3c6ac(I):
    O = vmirror(I)
    return O


def solve_a416b8f3(I):
    O = hconcat(I, I)
    return O


def solve_b1948b0a(I):
    O = replace(I, SIX, TWO)
    return O


def solve_c59eb873(I):
    O = upscale(I, TWO)
    return O


def solve_9dfd6313(I):
    O = dmirror(I)
    return O


def solve_d511f180(I):
    O = switch(I, FIVE, EIGHT)
    return O


def solve_9172f3a0(I):
    O = upscale(I, THREE)
    return O


def solve_60c09cac(I):
    O = upscale(I, TWO)
    return O


def solve_68b67ca3(I):
    O = compress(I)
    return O


def solve_5614dbcf(I):
    x1 = replace(I, FIVE, ZERO)
    O = downscale(x1, THREE)
    return O


def solve_6d0aefbc(I):
    x1 = vmirror(I)
    O = hconcat(I, x1)
    return O


def solve_6fa7a44f(I):
    x1 = hmirror(I)
    O = vconcat(I, x1)
    return O


def solve_2dee498d(I):
    x1 = hsplit(I, THREE)
    O = first(x1)
    return O


def solve_c9e6f938(I):
    x1 = vmirror(I)
    O = hconcat(I, x1)
    return O


def solve_4c4377d9(I):
    x1 = hmirror(I)
    O = vconcat(x1, I)
    return O


def solve_5582e5ca(I):
    x1 = mostcolor(I)
    O = canvas(x1, THREE_BY_THREE)
    return O


def solve_5bd6f4ac(I):
    x1 = tojvec(SIX)
    O = crop(I, x1, THREE_BY_THREE)
    return O


def solve_8be77c9e(I):
    x1 = hmirror(I)
    O = vconcat(I, x1)
    return O


def solve_d4b1c2b1(I):
    x1 = numcolors(I)
    O = upscale(I, x1)
    return O


def solve_4258a5f9(I):
    x1 = ofcolor(I, FIVE)
    x2 = mapply(neighbors, x1)
    O = fill(I, ONE, x2)
    return O


def solve_25ff71a9(I):
    x1 = objects(I, T, T, T)
    x2 = first(x1)
    O = move(I, x2, DOWN)
    return O


def solve_b91ae062(I):
    x1 = numcolors(I)
    x2 = decrement(x1)
    O = upscale(I, x2)
    return O


def solve_32597951(I):
    x1 = ofcolor(I, EIGHT)
    x2 = delta(x1)
    O = fill(I, THREE, x2)
    return O


def solve_be94b721(I):
    x1 = objects(I, T, F, T)
    x2 = argmax(x1, size)
    O = subgrid(x2, I)
    return O


def solve_c909285e(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    O = subgrid(x2, I)
    return O


def solve_f25ffba3(I):
    x1 = bottomhalf(I)
    x2 = hmirror(x1)
    O = vconcat(x2, x1)
    return O


def solve_c1d99e64(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    O = fill(I, TWO, x2)
    return O


def solve_1f85a75f(I):
    x1 = objects(I, T, T, T)
    x2 = argmax(x1, size)
    O = subgrid(x2, I)
    return O


def solve_0b148d64(I):
    x1 = partition(I)
    x2 = argmin(x1, size)
    O = subgrid(x2, I)
    return O


def solve_ac0a08a4(I):
    x1 = colorcount(I, ZERO)
    x2 = subtract(NINE, x1)
    O = upscale(I, x2)
    return O


def solve_9ecd008a(I):
    x1 = vmirror(I)
    x2 = ofcolor(I, ZERO)
    O = subgrid(x2, x1)
    return O


def solve_1cf80156(I):
    x1 = objects(I, T, T, T)
    x2 = first(x1)
    O = subgrid(x2, I)
    return O


def solve_3aa6fb7a(I):
    x1 = objects(I, T, F, T)
    x2 = mapply(corners, x1)
    O = underfill(I, ONE, x2)
    return O


def solve_23b5c85d(I):
    x1 = objects(I, T, T, T)
    x2 = argmin(x1, size)
    O = subgrid(x2, I)
    return O


def solve_7b7f7511(I):
    x1 = portrait(I)
    x2 = branch(x1, tophalf, lefthalf)
    O = x2(I)
    return O


def solve_19bb5feb(I):
    x1 = replace(I, EIGHT, ZERO)
    x2 = compress(x1)
    O = downscale(x2, TWO)
    return O


def solve_59341089(I):
    x1 = vmirror(I)
    x2 = hconcat(x1, I)
    O = hconcat(x2, x2)
    return O


def solve_9a4bb226(I):
    x1 = objects(I, F, F, T)
    x2 = argmax(x1, numcolors)
    O = subgrid(x2, I)
    return O


def solve_e7639916(I):
    x1 = ofcolor(I, EIGHT)
    x2 = box(x1)
    O = underfill(I, ONE, x2)
    return O


def solve_44f52bb0(I):
    x1 = vmirror(I)
    x2 = equality(x1, I)
    x3 = branch(x2, ONE, SEVEN)
    O = canvas(x3, UNITY)
    return O


def solve_67e8384a(I):
    x1 = vmirror(I)
    x2 = hconcat(I, x1)
    x3 = hmirror(x2)
    O = vconcat(x2, x3)
    return O


def solve_50cb2852(I):
    x1 = objects(I, T, F, T)
    x2 = compose(backdrop, inbox)
    x3 = mapply(x2, x1)
    O = fill(I, EIGHT, x3)
    return O


def solve_28bf18c6(I):
    x1 = objects(I, T, T, T)
    x2 = first(x1)
    x3 = subgrid(x2, I)
    O = hconcat(x3, x3)
    return O


def solve_1c786137(I):
    x1 = objects(I, T, F, F)
    x2 = argmax(x1, height)
    x3 = subgrid(x2, I)
    O = trim(x3)
    return O


def solve_2dc579da(I):
    x1 = vsplit(I, TWO)
    x2 = rbind(hsplit, TWO)
    x3 = mapply(x2, x1)
    O = argmax(x3, numcolors)
    return O


def solve_7468f01a(I):
    x1 = objects(I, F, T, T)
    x2 = first(x1)
    x3 = subgrid(x2, I)
    O = vmirror(x3)
    return O


def solve_3af2c5a8(I):
    x1 = vmirror(I)
    x2 = hconcat(I, x1)
    x3 = hmirror(x2)
    O = vconcat(x2, x3)
    return O


def solve_1e0a9b12(I):
    x1 = rot270(I)
    x2 = rbind(order, identity)
    x3 = apply(x2, x1)
    O = rot90(x3)
    return O


def solve_62c24649(I):
    x1 = vmirror(I)
    x2 = hconcat(I, x1)
    x3 = hmirror(x2)
    O = vconcat(x2, x3)
    return O


def solve_662c240a(I):
    x1 = vsplit(I, THREE)
    x2 = fork(equality, dmirror, identity)
    x3 = compose(flip, x2)
    O = extract(x1, x3)
    return O


def solve_b27ca6d3(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, TWO)
    x3 = mapply(outbox, x2)
    O = fill(I, THREE, x3)
    return O


def solve_56ff96f3(I):
    x1 = fgpartition(I)
    x2 = fork(recolor, color, backdrop)
    x3 = mapply(x2, x1)
    O = paint(I, x3)
    return O


def solve_ae4f1146(I):
    x1 = objects(I, F, F, T)
    x2 = rbind(colorcount, ONE)
    x3 = argmax(x1, x2)
    O = subgrid(x3, I)
    return O


def solve_4347f46a(I):
    x1 = objects(I, T, F, T)
    x2 = fork(difference, toindices, box)
    x3 = mapply(x2, x1)
    O = fill(I, ZERO, x3)
    return O


def solve_ce22a75a(I):
    x1 = objects(I, T, F, T)
    x2 = apply(outbox, x1)
    x3 = mapply(backdrop, x2)
    O = fill(I, ONE, x3)
    return O


def solve_42a50994(I):
    x1 = objects(I, T, T, T)
    x2 = sizefilter(x1, ONE)
    x3 = merge(x2)
    O = cover(I, x3)
    return O


def solve_a740d043(I):
    x1 = objects(I, T, T, T)
    x2 = merge(x1)
    x3 = subgrid(x2, I)
    O = replace(x3, ONE, ZERO)
    return O


def solve_3618c87e(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = merge(x2)
    O = move(I, x3, TWO_BY_ZERO)
    return O


def solve_dc1df850(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, TWO)
    x3 = mapply(outbox, x2)
    O = fill(I, ONE, x3)
    return O


def solve_0d3d703e(I):
    x1 = switch(I, THREE, FOUR)
    x2 = switch(x1, EIGHT, NINE)
    x3 = switch(x2, TWO, SIX)
    O = switch(x3, ONE, FIVE)
    return O


def solve_a79310a0(I):
    x1 = objects(I, T, F, T)
    x2 = first(x1)
    x3 = move(I, x2, DOWN)
    O = replace(x3, EIGHT, TWO)
    return O


def solve_aabf363d(I):
    x1 = leastcolor(I)
    x2 = replace(I, x1, ZERO)
    x3 = leastcolor(x2)
    O = replace(x2, x3, x1)
    return O


def solve_44d8ac46(I):
    x1 = objects(I, T, F, T)
    x2 = apply(delta, x1)
    x3 = mfilter(x2, square)
    O = fill(I, TWO, x3)
    return O


def solve_f25fbde4(I):
    x1 = objects(I, T, T, T)
    x2 = first(x1)
    x3 = subgrid(x2, I)
    O = upscale(x3, TWO)
    return O


def solve_46f33fce(I):
    x1 = rot180(I)
    x2 = downscale(x1, TWO)
    x3 = rot180(x2)
    O = upscale(x3, FOUR)
    return O


def solve_0c786b71(I):
    x1 = vmirror(I)
    x2 = hconcat(x1, I)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O


def solve_1e81d6f9(I):
    x1 = index(I, UNITY)
    x2 = replace(I, x1, ZERO)
    x3 = initset(UNITY)
    O = fill(x2, x1, x3)
    return O


def solve_3194b014(I):
    x1 = objects(I, T, F, T)
    x2 = argmax(x1, size)
    x3 = color(x2)
    O = canvas(x3, THREE_BY_THREE)
    return O


def solve_833dafe3(I):
    x1 = vmirror(I)
    x2 = hconcat(x1, I)
    x3 = hmirror(x2)
    O = vconcat(x3, x2)
    return O


def solve_d56f2372(I):
    x1 = fgpartition(I)
    x2 = fork(equality, identity, vmirror)
    x3 = extract(x1, x2)
    O = subgrid(x3, I)
    return O


def solve_1a2e2828(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = color(x2)
    O = canvas(x3, UNITY)
    return O


def solve_f0df5ff0(I):
    x1 = ofcolor(I, ONE)
    x2 = compose(outbox, initset)
    x3 = mapply(x2, x1)
    O = underfill(I, ONE, x3)
    return O


def solve_bf699163(I):
    x1 = ofcolor(I, SEVEN)
    x2 = subgrid(x1, I)
    x3 = replace(x2, SEVEN, FIVE)
    O = compress(x3)
    return O


def solve_a699fb00(I):
    x1 = ofcolor(I, ONE)
    x2 = shift(x1, RIGHT)
    x3 = shift(x1, LEFT)
    x4 = intersection(x2, x3)
    O = fill(I, TWO, x4)
    return O


def solve_9f236235(I):
    x1 = compress(I)
    x2 = objects(I, T, F, F)
    x3 = vmirror(x1)
    x4 = valmin(x2, width)
    O = downscale(x3, x4)
    return O


def solve_aedd82e4(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, TWO)
    x3 = sizefilter(x2, ONE)
    x4 = merge(x3)
    O = fill(I, ONE, x4)
    return O


def solve_2013d3e2(I):
    x1 = objects(I, F, T, T)
    x2 = first(x1)
    x3 = subgrid(x2, I)
    x4 = lefthalf(x3)
    O = tophalf(x4)
    return O


def solve_f76d97a5(I):
    x1 = palette(I)
    x2 = first(x1)
    x3 = last(x1)
    x4 = switch(I, x2, x3)
    O = replace(x4, FIVE, ZERO)
    return O


def solve_22eb0ac0(I):
    x1 = fgpartition(I)
    x2 = fork(recolor, color, backdrop)
    x3 = apply(x2, x1)
    x4 = mfilter(x3, hline)
    O = paint(I, x4)
    return O


def solve_9565186b(I):
    x1 = shape(I)
    x2 = objects(I, T, F, F)
    x3 = argmax(x2, size)
    x4 = canvas(FIVE, x1)
    O = paint(x4, x3)
    return O


def solve_e98196ab(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = objects(x1, T, F, T)
    x4 = merge(x3)
    O = paint(x2, x4)
    return O


def solve_445eab21(I):
    x1 = objects(I, T, F, T)
    x2 = fork(multiply, height, width)
    x3 = argmax(x1, x2)
    x4 = color(x3)
    O = canvas(x4, TWO_BY_TWO)
    return O


def solve_ce9e57f2(I):
    x1 = objects(I, T, F, T)
    x2 = fork(connect, ulcorner, centerofmass)
    x3 = mapply(x2, x1)
    x4 = fill(I, EIGHT, x3)
    O = switch(x4, EIGHT, TWO)
    return O


def solve_8efcae92(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ONE)
    x3 = compose(size, delta)
    x4 = argmax(x2, x3)
    O = subgrid(x4, I)
    return O


def solve_6f8cd79b(I):
    x1 = asindices(I)
    x2 = apply(initset, x1)
    x3 = rbind(bordering, I)
    x4 = mfilter(x2, x3)
    O = fill(I, EIGHT, x4)
    return O


def solve_bb43febb(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, FIVE)
    x3 = compose(backdrop, inbox)
    x4 = mapply(x3, x2)
    O = fill(I, TWO, x4)
    return O


def solve_41e4d17e(I):
    x1 = objects(I, T, F, T)
    x2 = fork(combine, vfrontier, hfrontier)
    x3 = compose(x2, center)
    x4 = mapply(x3, x1)
    O = underfill(I, SIX, x4)
    return O


def solve_cd3c21df(I):
    x1 = objects(I, F, T, T)
    x2 = rbind(subgrid, I)
    x3 = totuple(x1)
    x4 = apply(x2, x3)
    O = leastcommon(x4)
    return O


def solve_fc754716(I):
    x1 = leastcolor(I)
    x2 = replace(I, x1, ZERO)
    x3 = asobject(I)
    x4 = box(x3)
    O = fill(x2, x1, x4)
    return O


def solve_ae58858e(I):
    x1 = objects(I, T, T, T)
    x2 = rbind(greater, THREE)
    x3 = compose(x2, size)
    x4 = mfilter(x1, x3)
    O = fill(I, SIX, x4)
    return O


def solve_642d658d(I):
    x1 = ofcolor(I, FOUR)
    x2 = mapply(dneighbors, x1)
    x3 = toobject(x2, I)
    x4 = mostcolor(x3)
    O = canvas(x4, UNITY)
    return O


def solve_bc4146bd(I):
    x1 = vmirror(I)
    x2 = hconcat(I, x1)
    x3 = vmirror(x2)
    x4 = hconcat(x2, x3)
    O = hconcat(x4, I)
    return O


def solve_5783df64(I):
    x1 = vsplit(I, THREE)
    x2 = rbind(hsplit, THREE)
    x3 = lbind(mapply, compress)
    x4 = chain(merge, x3, x2)
    O = apply(x4, x1)
    return O


def solve_73182012(I):
    x1 = objects(I, F, T, T)
    x2 = first(x1)
    x3 = subgrid(x2, I)
    x4 = tophalf(x3)
    O = lefthalf(x4)
    return O


def solve_e74e1818(I):
    x1 = fgpartition(I)
    x2 = mapply(hmirror, x1)
    x3 = merge(x1)
    x4 = cover(I, x3)
    O = paint(x4, x2)
    return O


def solve_e0fb7511(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = merge(x3)
    O = fill(I, EIGHT, x4)
    return O


def solve_e872b94a(I):
    x1 = objects(I, T, T, T)
    x2 = size(x1)
    x3 = increment(x2)
    x4 = astuple(x3, ONE)
    O = canvas(ZERO, x4)
    return O


def solve_73ccf9c2(I):
    x1 = objects(I, T, T, T)
    x2 = fork(equality, identity, vmirror)
    x3 = compose(flip, x2)
    x4 = extract(x1, x3)
    O = subgrid(x4, I)
    return O


def solve_d037b0a7(I):
    x1 = objects(I, T, F, T)
    x2 = rbind(shoot, DOWN)
    x3 = compose(x2, center)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x1)
    O = paint(I, x5)
    return O


def solve_b60334d2(I):
    x1 = ofcolor(I, FIVE)
    x2 = replace(I, FIVE, ZERO)
    x3 = mapply(dneighbors, x1)
    x4 = mapply(ineighbors, x1)
    x5 = fill(x2, ONE, x3)
    O = fill(x5, FIVE, x4)
    return O


def solve_d406998b(I):
    x1 = vmirror(I)
    x2 = ofcolor(x1, FIVE)
    x3 = compose(even, last)
    x4 = sfilter(x2, x3)
    x5 = fill(x1, THREE, x4)
    O = vmirror(x5)
    return O


def solve_a5313dff(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = rbind(bordering, I)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    O = fill(I, ONE, x5)
    return O


def solve_e9afcf9a(I):
    x1 = astuple(TWO, ONE)
    x2 = crop(I, ORIGIN, x1)
    x3 = hmirror(x2)
    x4 = hconcat(x2, x3)
    x5 = hconcat(x4, x4)
    O = hconcat(x5, x4)
    return O


def solve_b94a9452(I):
    x1 = objects(I, F, F, T)
    x2 = first(x1)
    x3 = subgrid(x2, I)
    x4 = leastcolor(x3)
    x5 = mostcolor(x3)
    O = switch(x3, x4, x5)
    return O


def solve_d631b094(I):
    x1 = palette(I)
    x2 = other(x1, ZERO)
    x3 = ofcolor(I, x2)
    x4 = size(x3)
    x5 = astuple(ONE, x4)
    O = canvas(x2, x5)
    return O


def solve_3906de3d(I):
    x1 = rot270(I)
    x2 = rbind(order, identity)
    x3 = switch(x1, ONE, TWO)
    x4 = apply(x2, x3)
    x5 = switch(x4, ONE, TWO)
    O = cmirror(x5)
    return O


def solve_e3497940(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = vmirror(x2)
    x4 = objects(x3, T, F, T)
    x5 = merge(x4)
    O = paint(x1, x5)
    return O


def solve_46442a0e(I):
    x1 = rot90(I)
    x2 = rot180(I)
    x3 = rot270(I)
    x4 = hconcat(I, x1)
    x5 = hconcat(x3, x2)
    O = vconcat(x4, x5)
    return O


def solve_d0f5fe59(I):
    x1 = objects(I, T, F, T)
    x2 = size(x1)
    x3 = astuple(x2, x2)
    x4 = canvas(ZERO, x3)
    x5 = shoot(ORIGIN, UNITY)
    O = fill(x4, EIGHT, x5)
    return O


def solve_10fcaaa3(I):
    x1 = leastcolor(I)
    x2 = hconcat(I, I)
    x3 = vconcat(x2, x2)
    x4 = ofcolor(x3, x1)
    x5 = mapply(ineighbors, x4)
    O = underfill(x3, EIGHT, x5)
    return O


def solve_928ad970(I):
    x1 = ofcolor(I, FIVE)
    x2 = subgrid(x1, I)
    x3 = trim(x2)
    x4 = leastcolor(x3)
    x5 = inbox(x1)
    O = fill(I, x4, x5)
    return O


def solve_7b6016b9(I):
    x1 = objects(I, T, F, F)
    x2 = rbind(bordering, I)
    x3 = compose(flip, x2)
    x4 = mfilter(x1, x3)
    x5 = fill(I, TWO, x4)
    O = replace(x5, ZERO, THREE)
    return O


def solve_67385a82(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, THREE)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = merge(x4)
    O = fill(I, EIGHT, x5)
    return O


def solve_0520fde7(I):
    x1 = vmirror(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = vmirror(x3)
    x5 = cellwise(x2, x4, ZERO)
    O = replace(x5, ONE, TWO)
    return O


def solve_ea32f347(I):
    x1 = objects(I, T, F, T)
    x2 = replace(I, FIVE, FOUR)
    x3 = argmin(x1, size)
    x4 = argmax(x1, size)
    x5 = fill(x2, ONE, x4)
    O = fill(x5, TWO, x3)
    return O


def solve_7fe24cdd(I):
    x1 = rot90(I)
    x2 = rot180(I)
    x3 = rot270(I)
    x4 = hconcat(I, x1)
    x5 = hconcat(x3, x2)
    O = vconcat(x4, x5)
    return O


def solve_543a7ed5(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, SIX)
    x3 = mapply(outbox, x2)
    x4 = fill(I, THREE, x3)
    x5 = mapply(delta, x2)
    O = fill(x4, FOUR, x5)
    return O


def solve_48d8fb45(I):
    x1 = objects(I, T, T, T)
    x2 = matcher(size, ONE)
    x3 = extract(x1, x2)
    x4 = lbind(adjacent, x3)
    x5 = extract(x1, x4)
    O = subgrid(x5, I)
    return O


def solve_0ca9ddb6(I):
    x1 = ofcolor(I, ONE)
    x2 = ofcolor(I, TWO)
    x3 = mapply(dneighbors, x1)
    x4 = mapply(ineighbors, x2)
    x5 = fill(I, SEVEN, x3)
    O = fill(x5, FOUR, x4)
    return O


def solve_5117e062(I):
    x1 = objects(I, F, T, T)
    x2 = matcher(numcolors, TWO)
    x3 = extract(x1, x2)
    x4 = subgrid(x3, I)
    x5 = mostcolor(x3)
    O = replace(x4, EIGHT, x5)
    return O


def solve_8d5021e8(I):
    x1 = vmirror(I)
    x2 = hconcat(x1, I)
    x3 = hmirror(x2)
    x4 = vconcat(x2, x3)
    x5 = vconcat(x4, x2)
    O = hmirror(x5)
    return O


def solve_00d62c1b(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = rbind(bordering, I)
    x4 = compose(flip, x3)
    x5 = mfilter(x2, x4)
    O = fill(I, FOUR, x5)
    return O


def solve_dae9d2b5(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = ofcolor(x1, FOUR)
    x4 = ofcolor(x2, THREE)
    x5 = combine(x3, x4)
    O = fill(x1, SIX, x5)
    return O


def solve_7bb29440(I):
    x1 = objects(I, F, F, T)
    x2 = fork(multiply, height, width)
    x3 = rbind(colorcount, ONE)
    x4 = fork(subtract, x2, x3)
    x5 = argmin(x1, x4)
    O = subgrid(x5, I)
    return O


def solve_ed98d772(I):
    x1 = rot270(I)
    x2 = rot180(I)
    x3 = rot90(I)
    x4 = hconcat(I, x1)
    x5 = hconcat(x2, x3)
    O = vconcat(x4, x5)
    return O


def solve_2546ccf6(I):
    x1 = fgpartition(I)
    x2 = argmax(x1, size)
    x3 = remove(x2, x1)
    x4 = fork(combine, vmirror, hmirror)
    x5 = mapply(x4, x3)
    O = paint(I, x5)
    return O


def solve_7953d61e(I):
    x1 = rot270(I)
    x2 = rot180(I)
    x3 = rot90(I)
    x4 = hconcat(I, x1)
    x5 = hconcat(x2, x3)
    O = vconcat(x4, x5)
    return O


def solve_a934301b(I):
    x1 = objects(I, F, T, T)
    x2 = rbind(colorcount, EIGHT)
    x3 = rbind(greater, ONE)
    x4 = compose(x3, x2)
    x5 = mfilter(x1, x4)
    O = cover(I, x5)
    return O


def solve_ccd554ac(I):
    x1 = width(I)
    x2 = repeat(I, x1)
    x3 = merge(x2)
    x4 = rbind(repeat, x1)
    x5 = compose(merge, x4)
    O = apply(x5, x3)
    return O


def solve_8ee62060(I):
    x1 = objects(I, F, F, T)
    x2 = merge(x1)
    x3 = cover(I, x2)
    x4 = mapply(hmirror, x1)
    x5 = paint(x3, x4)
    O = hmirror(x5)
    return O


def solve_e21a174a(I):
    x1 = fgpartition(I)
    x2 = mapply(hmirror, x1)
    x3 = hmirror(x2)
    x4 = merge(x1)
    x5 = cover(I, x4)
    O = paint(x5, x3)
    return O


def solve_332efdb3(I):
    x1 = asindices(I)
    x2 = compose(even, first)
    x3 = compose(even, last)
    x4 = fork(either, x2, x3)
    x5 = sfilter(x1, x4)
    O = fill(I, ONE, x5)
    return O


def solve_62ab2642(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = fill(I, SEVEN, x3)
    O = fill(x5, EIGHT, x4)
    return O


def solve_319f2597(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, ZERO)
    x3 = fork(combine, vfrontier, hfrontier)
    x4 = mapply(x3, x2)
    x5 = fill(I, ZERO, x4)
    O = fill(x5, TWO, x1)
    return O


def solve_48131b3c(I):
    x1 = hconcat(I, I)
    x2 = vconcat(x1, x1)
    x3 = palette(x1)
    x4 = first(x3)
    x5 = last(x3)
    O = switch(x2, x4, x5)
    return O


def solve_32e9702f(I):
    x1 = objects(I, T, T, T)
    x2 = merge(x1)
    x3 = shift(x2, LEFT)
    x4 = cover(I, x2)
    x5 = paint(x4, x3)
    O = replace(x5, ZERO, FIVE)
    return O


def solve_1c0d0a4b(I):
    x1 = frontiers(I)
    x2 = merge(x1)
    x3 = fill(I, ONE, x2)
    x4 = ofcolor(x3, ZERO)
    x5 = replace(I, EIGHT, ZERO)
    O = fill(x5, TWO, x4)
    return O


def solve_84db8fc4(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = rbind(bordering, I)
    x4 = mfilter(x2, x3)
    x5 = fill(I, TWO, x4)
    O = replace(x5, ZERO, FIVE)
    return O


def solve_ba97ae07(I):
    x1 = objects(I, T, F, T)
    x2 = totuple(x1)
    x3 = apply(color, x2)
    x4 = mostcommon(x3)
    x5 = ofcolor(I, x4)
    x6 = backdrop(x5)
    O = fill(I, x4, x6)
    return O


def solve_d5d6de2d(I):
    x1 = objects(I, T, F, T)
    x2 = sfilter(x1, square)
    x3 = difference(x1, x2)
    x4 = compose(backdrop, inbox)
    x5 = mapply(x4, x3)
    x6 = replace(I, TWO, ZERO)
    O = fill(x6, THREE, x5)
    return O


def solve_d2abd087(I):
    x1 = objects(I, T, F, T)
    x2 = matcher(size, SIX)
    x3 = compose(flip, x2)
    x4 = mfilter(x1, x2)
    x5 = mfilter(x1, x3)
    x6 = fill(I, TWO, x4)
    O = fill(x6, ONE, x5)
    return O


def solve_017c7c7b(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = equality(x1, x2)
    x4 = crop(I, TWO_BY_ZERO, THREE_BY_THREE)
    x5 = branch(x3, x2, x4)
    x6 = vconcat(I, x5)
    O = replace(x6, ONE, TWO)
    return O


def solve_1f876c06(I):
    x1 = fgpartition(I)
    x2 = compose(last, first)
    x3 = power(last, TWO)
    x4 = fork(connect, x2, x3)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x1)
    O = paint(I, x6)
    return O


def solve_ded97339(I):
    x1 = ofcolor(I, EIGHT)
    x2 = product(x1, x1)
    x3 = fork(connect, first, last)
    x4 = apply(x3, x2)
    x5 = fork(either, vline, hline)
    x6 = mfilter(x4, x5)
    O = underfill(I, EIGHT, x6)
    return O


def solve_dbc1a6ce(I):
    x1 = ofcolor(I, ONE)
    x2 = product(x1, x1)
    x3 = fork(connect, first, last)
    x4 = apply(x3, x2)
    x5 = fork(either, vline, hline)
    x6 = mfilter(x4, x5)
    O = underfill(I, EIGHT, x6)
    return O


def solve_363442ee(I):
    x1 = ofcolor(I, ONE)
    x2 = crop(I, ORIGIN, THREE_BY_THREE)
    x3 = asobject(x2)
    x4 = lbind(shift, x3)
    x5 = compose(x4, decrement)
    x6 = mapply(x5, x1)
    O = paint(I, x6)
    return O


def solve_c9f8e694(I):
    x1 = height(I)
    x2 = width(I)
    x3 = ofcolor(I, ZERO)
    x4 = astuple(x1, ONE)
    x5 = crop(I, ORIGIN, x4)
    x6 = hupscale(x5, x2)
    O = fill(x6, ZERO, x3)
    return O


def solve_1b2d62fb(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x2, ZERO)
    x5 = intersection(x3, x4)
    x6 = replace(x1, NINE, ZERO)
    O = fill(x6, EIGHT, x5)
    return O


def solve_39a8645d(I):
    x1 = objects(I, T, T, T)
    x2 = totuple(x1)
    x3 = apply(color, x2)
    x4 = mostcommon(x3)
    x5 = matcher(color, x4)
    x6 = extract(x1, x5)
    O = subgrid(x6, I)
    return O


def solve_05f2a901(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, TWO)
    x3 = first(x2)
    x4 = colorfilter(x1, EIGHT)
    x5 = first(x4)
    x6 = gravitate(x3, x5)
    O = move(I, x3, x6)
    return O


def solve_90c28cc7(I):
    x1 = objects(I, F, F, T)
    x2 = first(x1)
    x3 = subgrid(x2, I)
    x4 = dedupe(x3)
    x5 = rot90(x4)
    x6 = dedupe(x5)
    O = rot270(x6)
    return O


def solve_5168d44c(I):
    x1 = ofcolor(I, THREE)
    x2 = height(x1)
    x3 = equality(x2, ONE)
    x4 = branch(x3, ZERO_BY_TWO, TWO_BY_ZERO)
    x5 = ofcolor(I, TWO)
    x6 = recolor(TWO, x5)
    O = move(I, x6, x4)
    return O


def solve_e9614598(I):
    x1 = ofcolor(I, ONE)
    x2 = fork(add, first, last)
    x3 = x2(x1)
    x4 = halve(x3)
    x5 = dneighbors(x4)
    x6 = insert(x4, x5)
    O = fill(I, THREE, x6)
    return O


def solve_08ed6ac7(I):
    x1 = objects(I, T, F, T)
    x2 = totuple(x1)
    x3 = order(x1, height)
    x4 = size(x2)
    x5 = interval(x4, ZERO, NEG_ONE)
    x6 = mpapply(recolor, x5, x3)
    O = paint(I, x6)
    return O


def solve_5521c0d9(I):
    x1 = objects(I, T, F, T)
    x2 = merge(x1)
    x3 = cover(I, x2)
    x4 = chain(toivec, invert, height)
    x5 = fork(shift, identity, x4)
    x6 = mapply(x5, x1)
    O = paint(x3, x6)
    return O


def solve_d23f8c26(I):
    x1 = asindices(I)
    x2 = width(I)
    x3 = halve(x2)
    x4 = matcher(last, x3)
    x5 = compose(flip, x4)
    x6 = sfilter(x1, x5)
    O = fill(I, ZERO, x6)
    return O


def solve_85c4e7cd(I):
    x1 = objects(I, T, F, F)
    x2 = compose(invert, size)
    x3 = order(x1, size)
    x4 = order(x1, x2)
    x5 = apply(color, x4)
    x6 = mpapply(recolor, x5, x3)
    O = paint(I, x6)
    return O


def solve_f8ff0b80(I):
    x1 = objects(I, T, T, T)
    x2 = order(x1, size)
    x3 = apply(color, x2)
    x4 = rbind(canvas, UNITY)
    x5 = apply(x4, x3)
    x6 = merge(x5)
    O = hmirror(x6)
    return O


def solve_d9fac9be(I):
    x1 = palette(I)
    x2 = objects(I, T, F, T)
    x3 = argmax(x2, size)
    x4 = color(x3)
    x5 = remove(ZERO, x1)
    x6 = other(x5, x4)
    O = canvas(x6, UNITY)
    return O


def solve_007bbfb7(I):
    x1 = hupscale(I, THREE)
    x2 = vupscale(x1, THREE)
    x3 = hconcat(I, I)
    x4 = hconcat(x3, I)
    x5 = vconcat(x4, x4)
    x6 = vconcat(x5, x4)
    O = cellwise(x2, x6, ZERO)
    return O


def solve_40853293(I):
    x1 = partition(I)
    x2 = fork(recolor, color, backdrop)
    x3 = apply(x2, x1)
    x4 = mfilter(x3, hline)
    x5 = mfilter(x3, vline)
    x6 = paint(I, x4)
    O = paint(x6, x5)
    return O


def solve_ea786f4a(I):
    x1 = width(I)
    x2 = shoot(ORIGIN, UNITY)
    x3 = decrement(x1)
    x4 = tojvec(x3)
    x5 = shoot(x4, DOWN_LEFT)
    x6 = combine(x2, x5)
    O = fill(I, ZERO, x6)
    return O


def solve_b9b7f026(I):
    x1 = objects(I, T, F, F)
    x2 = argmin(x1, size)
    x3 = rbind(adjacent, x2)
    x4 = remove(x2, x1)
    x5 = extract(x4, x3)
    x6 = color(x5)
    O = canvas(x6, UNITY)
    return O


def solve_496994bd(I):
    x1 = width(I)
    x2 = height(I)
    x3 = halve(x2)
    x4 = astuple(x3, x1)
    x5 = crop(I, ORIGIN, x4)
    x6 = hmirror(x5)
    O = vconcat(x5, x6)
    return O


def solve_b6afb2da(I):
    x1 = objects(I, T, F, F)
    x2 = replace(I, FIVE, TWO)
    x3 = colorfilter(x1, FIVE)
    x4 = mapply(box, x3)
    x5 = fill(x2, FOUR, x4)
    x6 = mapply(corners, x3)
    O = fill(x5, ONE, x6)
    return O


def solve_c48954c1(I):
    x1 = rot180(I)
    x2 = vmirror(x1)
    x3 = hconcat(x1, x2)
    x4 = hconcat(x3, x1)
    x5 = hmirror(x4)
    x6 = vconcat(x4, x5)
    O = vconcat(x6, x4)
    return O


def solve_64a7c07e(I):
    x1 = objects(I, T, T, T)
    x2 = compose(tojvec, width)
    x3 = fork(shift, identity, x2)
    x4 = merge(x1)
    x5 = cover(I, x4)
    x6 = mapply(x3, x1)
    O = paint(x5, x6)
    return O


def solve_140c817e(I):
    x1 = ofcolor(I, ONE)
    x2 = mapply(neighbors, x1)
    x3 = fill(I, THREE, x2)
    x4 = fork(combine, vfrontier, hfrontier)
    x5 = mapply(x4, x1)
    x6 = fill(x3, ONE, x5)
    O = fill(x6, TWO, x1)
    return O


def solve_4f537728(I):
    x1 = ofcolor(I, ZERO)
    x2 = leastcolor(I)
    x3 = ofcolor(I, x2)
    x4 = fork(combine, hfrontier, vfrontier)
    x5 = mapply(x4, x3)
    x6 = fill(I, x2, x5)
    O = fill(x6, ZERO, x1)
    return O


def solve_55059096(I):
    x1 = objects(I, T, T, T)
    x2 = apply(center, x1)
    x3 = prapply(connect, x2, x2)
    x4 = fork(either, vline, hline)
    x5 = compose(flip, x4)
    x6 = mfilter(x3, x5)
    O = underfill(I, TWO, x6)
    return O


def solve_f823c43c(I):
    x1 = mostcolor(I)
    x2 = replace(I, SIX, x1)
    x3 = leastcolor(x2)
    x4 = vmirror(x2)
    x5 = cellwise(x2, x4, x3)
    x6 = hmirror(x5)
    O = cellwise(x5, x6, x3)
    return O


def solve_9ddd00f0(I):
    x1 = leastcolor(I)
    x2 = vmirror(I)
    x3 = cellwise(I, x2, x1)
    x4 = hmirror(x3)
    x5 = cellwise(x3, x4, x1)
    x6 = rot90(x5)
    O = cellwise(x5, x6, x1)
    return O


def solve_a59b95c0(I):
    x1 = numcolors(I)
    x2 = rot90(I)
    x3 = repeat(x2, x1)
    x4 = merge(x3)
    x5 = rot270(x4)
    x6 = repeat(x5, x1)
    O = merge(x6)
    return O


def solve_bbb1b8b6(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = ofcolor(x1, ONE)
    x4 = ofcolor(x2, ZERO)
    x5 = equality(x3, x4)
    x6 = replace(x2, ZERO, ONE)
    O = branch(x5, x6, x1)
    return O


def solve_bcb3040b(I):
    x1 = ofcolor(I, TWO)
    x2 = fork(connect, first, last)
    x3 = x2(x1)
    x4 = ofcolor(I, ONE)
    x5 = fill(I, TWO, x3)
    x6 = intersection(x3, x4)
    O = fill(x5, THREE, x6)
    return O


def solve_f5aa3634(I):
    x1 = objects(I, F, T, T)
    x2 = totuple(x1)
    x3 = apply(normalize, x2)
    x4 = mostcommon(x3)
    x5 = shape(x4)
    x6 = canvas(ZERO, x5)
    O = paint(x6, x4)
    return O


def solve_66e6c45b(I):
    x1 = trim(I)
    x2 = upscale(x1, TWO)
    x3 = asindices(x2)
    x4 = asobject(x2)
    x5 = corners(x4)
    x6 = difference(x3, x5)
    O = fill(x2, ZERO, x6)
    return O


def solve_2072aba6(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, FIVE)
    x3 = fork(add, first, last)
    x4 = compose(even, x3)
    x5 = sfilter(x2, x4)
    x6 = replace(x1, FIVE, TWO)
    O = fill(x6, ONE, x5)
    return O


def solve_1a6449f1(I):
    x1 = objects(I, T, F, T)
    x2 = argmax(x1, size)
    x3 = subgrid(x2, I)
    x4 = objects(x3, T, T, F)
    x5 = colorfilter(x4, ZERO)
    x6 = argmax(x5, size)
    O = subgrid(x6, x3)
    return O


def solve_84f2aca1(I):
    x1 = objects(I, T, F, F)
    x2 = sizefilter(x1, ONE)
    x3 = sizefilter(x1, TWO)
    x4 = merge(x2)
    x5 = merge(x3)
    x6 = fill(I, FIVE, x4)
    O = fill(x6, SEVEN, x5)
    return O


def solve_00576224(I):
    x1 = hconcat(I, I)
    x2 = vmirror(I)
    x3 = hconcat(x1, I)
    x4 = hconcat(x2, x2)
    x5 = hconcat(x4, x2)
    x6 = vconcat(x3, x5)
    O = vconcat(x6, x3)
    return O


def solve_94f9d214(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x2, ZERO)
    x5 = astuple(FOUR, FOUR)
    x6 = canvas(ZERO, x5)
    x7 = intersection(x3, x4)
    O = fill(x6, TWO, x7)
    return O


def solve_5c0a986e(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, ONE)
    x3 = lrcorner(x1)
    x4 = ulcorner(x2)
    x5 = shoot(x3, UNITY)
    x6 = shoot(x4, NEG_UNITY)
    x7 = fill(I, TWO, x5)
    O = fill(x7, ONE, x6)
    return O


def solve_810b9b61(I):
    x1 = objects(I, T, T, T)
    x2 = apply(toindices, x1)
    x3 = fork(either, vline, hline)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = fork(equality, identity, box)
    x7 = mfilter(x5, x6)
    O = fill(I, THREE, x7)
    return O


def solve_a1570a43(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, THREE)
    x3 = recolor(TWO, x1)
    x4 = ulcorner(x2)
    x5 = ulcorner(x1)
    x6 = subtract(x4, x5)
    x7 = increment(x6)
    O = move(I, x3, x7)
    return O


def solve_6430c8c4(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = astuple(FOUR, FOUR)
    x4 = ofcolor(x1, ZERO)
    x5 = ofcolor(x2, ZERO)
    x6 = intersection(x4, x5)
    x7 = canvas(ZERO, x3)
    O = fill(x7, THREE, x6)
    return O


def solve_d13f3404(I):
    x1 = objects(I, T, F, T)
    x2 = rbind(shoot, UNITY)
    x3 = compose(x2, center)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x1)
    x6 = astuple(SIX, SIX)
    x7 = canvas(ZERO, x6)
    O = paint(x7, x5)
    return O


def solve_67a423a3(I):
    x1 = leastcolor(I)
    x2 = objects(I, T, F, T)
    x3 = colorfilter(x2, x1)
    x4 = merge(x3)
    x5 = delta(x4)
    x6 = first(x5)
    x7 = neighbors(x6)
    O = fill(I, FOUR, x7)
    return O


def solve_1190e5a7(I):
    x1 = mostcolor(I)
    x2 = frontiers(I)
    x3 = sfilter(x2, vline)
    x4 = difference(x2, x3)
    x5 = astuple(x4, x3)
    x6 = apply(size, x5)
    x7 = increment(x6)
    O = canvas(x1, x7)
    return O


def solve_6e02f1e3(I):
    x1 = numcolors(I)
    x2 = canvas(ZERO, THREE_BY_THREE)
    x3 = equality(x1, THREE)
    x4 = equality(x1, TWO)
    x5 = branch(x3, TWO_BY_ZERO, ORIGIN)
    x6 = branch(x4, TWO_BY_TWO, ZERO_BY_TWO)
    x7 = connect(x5, x6)
    O = fill(x2, FIVE, x7)
    return O


def solve_239be575(I):
    x1 = objects(I, F, T, T)
    x2 = lbind(contained, TWO)
    x3 = compose(x2, palette)
    x4 = sfilter(x1, x3)
    x5 = size(x4)
    x6 = greater(x5, ONE)
    x7 = branch(x6, ZERO, EIGHT)
    O = canvas(x7, UNITY)
    return O


def solve_dc433765(I):
    x1 = ofcolor(I, THREE)
    x2 = ofcolor(I, FOUR)
    x3 = first(x1)
    x4 = first(x2)
    x5 = subtract(x4, x3)
    x6 = sign(x5)
    x7 = recolor(THREE, x1)
    O = move(I, x7, x6)
    return O


def solve_fafffa47(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = shape(x2)
    x4 = ofcolor(x1, ZERO)
    x5 = ofcolor(x2, ZERO)
    x6 = intersection(x4, x5)
    x7 = canvas(ZERO, x3)
    O = fill(x7, TWO, x6)
    return O


def solve_7f4411dc(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = rbind(difference, x2)
    x4 = rbind(greater, TWO)
    x5 = chain(x4, size, x3)
    x6 = compose(x5, dneighbors)
    x7 = sfilter(x2, x6)
    O = fill(I, ZERO, x7)
    return O


def solve_ce4f8723(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x2, ZERO)
    x5 = intersection(x3, x4)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(THREE, x6)
    O = fill(x7, ZERO, x5)
    return O


def solve_6d75e8bb(I):
    x1 = objects(I, T, F, T)
    x2 = first(x1)
    x3 = ulcorner(x2)
    x4 = subgrid(x2, I)
    x5 = replace(x4, ZERO, TWO)
    x6 = asobject(x5)
    x7 = shift(x6, x3)
    O = paint(I, x7)
    return O


def solve_25d8a9c8(I):
    x1 = asindices(I)
    x2 = objects(I, T, F, F)
    x3 = sizefilter(x2, THREE)
    x4 = mfilter(x3, hline)
    x5 = toindices(x4)
    x6 = difference(x1, x5)
    x7 = fill(I, FIVE, x5)
    O = fill(x7, ZERO, x6)
    return O


def solve_a61f2674(I):
    x1 = objects(I, T, F, T)
    x2 = argmax(x1, size)
    x3 = argmin(x1, size)
    x4 = replace(I, FIVE, ZERO)
    x5 = recolor(ONE, x2)
    x6 = recolor(TWO, x3)
    x7 = combine(x5, x6)
    O = paint(x4, x7)
    return O


def solve_e76a88a6(I):
    x1 = objects(I, F, F, T)
    x2 = argmax(x1, numcolors)
    x3 = normalize(x2)
    x4 = remove(x2, x1)
    x5 = apply(ulcorner, x4)
    x6 = lbind(shift, x3)
    x7 = mapply(x6, x5)
    O = paint(I, x7)
    return O


def solve_e8593010(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = sizefilter(x1, TWO)
    x4 = merge(x2)
    x5 = fill(I, THREE, x4)
    x6 = merge(x3)
    x7 = fill(x5, TWO, x6)
    O = replace(x7, ZERO, ONE)
    return O


def solve_54d82841(I):
    x1 = height(I)
    x2 = objects(I, T, F, T)
    x3 = compose(last, center)
    x4 = apply(x3, x2)
    x5 = decrement(x1)
    x6 = lbind(astuple, x5)
    x7 = apply(x6, x4)
    O = fill(I, FOUR, x7)
    return O


def solve_b230c067(I):
    x1 = objects(I, T, T, T)
    x2 = totuple(x1)
    x3 = apply(normalize, x2)
    x4 = leastcommon(x3)
    x5 = matcher(normalize, x4)
    x6 = extract(x1, x5)
    x7 = replace(I, EIGHT, ONE)
    O = fill(x7, TWO, x6)
    return O


def solve_e50d258f(I):
    x1 = width(I)
    x2 = astuple(NINE, x1)
    x3 = canvas(ZERO, x2)
    x4 = vconcat(I, x3)
    x5 = objects(x4, F, F, T)
    x6 = rbind(colorcount, TWO)
    x7 = argmax(x5, x6)
    O = subgrid(x7, I)
    return O


def solve_ff805c23(I):
    x1 = hmirror(I)
    x2 = vmirror(I)
    x3 = ofcolor(I, ONE)
    x4 = subgrid(x3, x1)
    x5 = subgrid(x3, x2)
    x6 = palette(x4)
    x7 = contained(ONE, x6)
    O = branch(x7, x5, x4)
    return O


def solve_60b61512(I):
    x1 = objects(I, T, T, T)
    x2 = rbind(subgrid, I)
    x3 = compose(asindices, x2)
    x4 = fork(shift, x3, ulcorner)
    x5 = mapply(x4, x1)
    x6 = fill(I, SEVEN, x5)
    x7 = merge(x1)
    O = paint(x6, x7)
    return O


def solve_fcb5c309(I):
    x1 = leastcolor(I)
    x2 = objects(I, T, F, T)
    x3 = colorfilter(x2, x1)
    x4 = difference(x2, x3)
    x5 = argmax(x4, size)
    x6 = color(x5)
    x7 = subgrid(x5, I)
    O = replace(x7, x6, x1)
    return O


def solve_f2829549(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x2, ZERO)
    x5 = intersection(x3, x4)
    x6 = shape(x1)
    x7 = canvas(ZERO, x6)
    O = fill(x7, THREE, x5)
    return O


def solve_3f7978a0(I):
    x1 = fgpartition(I)
    x2 = matcher(color, FIVE)
    x3 = extract(x1, x2)
    x4 = ulcorner(x3)
    x5 = subtract(x4, DOWN)
    x6 = shape(x3)
    x7 = add(x6, TWO_BY_ZERO)
    O = crop(I, x5, x7)
    return O


def solve_7c008303(I):
    x1 = ofcolor(I, THREE)
    x2 = subgrid(x1, I)
    x3 = ofcolor(x2, ZERO)
    x4 = replace(I, THREE, ZERO)
    x5 = replace(x4, EIGHT, ZERO)
    x6 = compress(x5)
    x7 = upscale(x6, THREE)
    O = fill(x7, ZERO, x3)
    return O


def solve_60a26a3e(I):
    x1 = objects(I, T, T, T)
    x2 = colorfilter(x1, TWO)
    x3 = apply(center, x2)
    x4 = prapply(connect, x3, x3)
    x5 = fork(either, vline, hline)
    x6 = mfilter(x4, x5)
    x7 = underfill(I, ONE, x6)
    O = cover(x7, x3)
    return O


def solve_e7dd8335(I):
    x1 = ofcolor(I, ONE)
    x2 = replace(I, ONE, TWO)
    x3 = subgrid(x1, I)
    x4 = tophalf(x3)
    x5 = asobject(x4)
    x6 = ulcorner(x1)
    x7 = shift(x5, x6)
    O = paint(x2, x7)
    return O


def solve_e2092e0c(I):
    x1 = crop(I, ORIGIN, THREE_BY_THREE)
    x2 = asobject(x1)
    x3 = occurrences(I, x2)
    x4 = lbind(shift, x2)
    x5 = lbind(recolor, FIVE)
    x6 = chain(x5, outbox, x4)
    x7 = mapply(x6, x3)
    O = paint(I, x7)
    return O


def solve_195ba7dc(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x2, ZERO)
    x5 = intersection(x3, x4)
    x6 = shape(x1)
    x7 = canvas(ONE, x6)
    O = fill(x7, ZERO, x5)
    return O


def solve_7e02026e(I):
    x1 = dneighbors(ORIGIN)
    x2 = insert(ORIGIN, x1)
    x3 = recolor(ZERO, x2)
    x4 = occurrences(I, x3)
    x5 = normalize(x2)
    x6 = lbind(shift, x5)
    x7 = mapply(x6, x4)
    O = fill(I, THREE, x7)
    return O


def solve_506d28a5(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x2, ZERO)
    x5 = intersection(x3, x4)
    x6 = shape(x1)
    x7 = canvas(THREE, x6)
    O = fill(x7, ZERO, x5)
    return O


def solve_0c9aba6e(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = ofcolor(x1, TWO)
    x4 = ofcolor(x2, SIX)
    x5 = shape(x1)
    x6 = canvas(EIGHT, x5)
    x7 = combine(x3, x4)
    O = fill(x6, ZERO, x7)
    return O


def solve_929ab4e9(I):
    x1 = replace(I, TWO, ZERO)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = cmirror(x5)
    x7 = papply(pair, x5, x6)
    O = apply(x4, x7)
    return O


def solve_310f3251(I):
    x1 = repeat(I, THREE)
    x2 = merge(x1)
    x3 = hconcat(x2, x2)
    x4 = hconcat(x3, x2)
    x5 = objects(x4, T, T, T)
    x6 = merge(x5)
    x7 = shift(x6, NEG_UNITY)
    O = underfill(x4, TWO, x7)
    return O


def solve_d19f7514(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x2, ZERO)
    x5 = intersection(x3, x4)
    x6 = shape(x1)
    x7 = canvas(FOUR, x6)
    O = fill(x7, ZERO, x5)
    return O


def solve_7039b2d7(I):
    x1 = frontiers(I)
    x2 = mostcolor(I)
    x3 = sfilter(x1, vline)
    x4 = sfilter(x1, hline)
    x5 = astuple(x4, x3)
    x6 = apply(size, x5)
    x7 = increment(x6)
    O = canvas(x2, x7)
    return O


def solve_e133d23d(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x2, ZERO)
    x5 = shape(x1)
    x6 = canvas(TWO, x5)
    x7 = intersection(x3, x4)
    O = fill(x6, ZERO, x7)
    return O


def solve_e345f17b(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x2, ZERO)
    x5 = shape(x1)
    x6 = canvas(ZERO, x5)
    x7 = intersection(x3, x4)
    O = fill(x6, FOUR, x7)
    return O


def solve_6ea4a07e(I):
    x1 = palette(I)
    x2 = other(x1, ZERO)
    x3 = equality(x2, THREE)
    x4 = branch(x3, ONE, TWO)
    x5 = equality(x2, FIVE)
    x6 = branch(x5, FOUR, x4)
    x7 = replace(I, ZERO, x6)
    O = replace(x7, x2, ZERO)
    return O


def solve_5d2a5c43(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = ofcolor(x1, FOUR)
    x4 = ofcolor(x2, FOUR)
    x5 = shape(x1)
    x6 = canvas(ZERO, x5)
    x7 = combine(x3, x4)
    O = fill(x6, EIGHT, x7)
    return O


def solve_903d1b4a(I):
    x1 = replace(I, THREE, ZERO)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = cmirror(x5)
    x7 = papply(pair, x5, x6)
    O = apply(x4, x7)
    return O


def solve_9f27f097(I):
    x1 = objects(I, F, T, T)
    x2 = argmin(x1, numcolors)
    x3 = argmax(x1, numcolors)
    x4 = normalize(x3)
    x5 = ulcorner(x2)
    x6 = shift(x4, x5)
    x7 = vmirror(x6)
    O = paint(I, x7)
    return O


def solve_66f2d22f(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x2, ZERO)
    x5 = intersection(x3, x4)
    x6 = shape(x1)
    x7 = canvas(ZERO, x6)
    O = fill(x7, FIVE, x5)
    return O


def solve_025d127b(I):
    x1 = objects(I, T, F, T)
    x2 = apply(color, x1)
    x3 = merge(x1)
    x4 = lbind(colorfilter, x1)
    x5 = rbind(argmax, rightmost)
    x6 = compose(x5, x4)
    x7 = mapply(x6, x2)
    x8 = difference(x3, x7)
    O = move(I, x8, RIGHT)
    return O


def solve_3bd67248(I):
    x1 = height(I)
    x2 = decrement(x1)
    x3 = decrement(x2)
    x4 = astuple(x3, ONE)
    x5 = astuple(x2, ONE)
    x6 = shoot(x4, UP_RIGHT)
    x7 = shoot(x5, RIGHT)
    x8 = fill(I, TWO, x6)
    O = fill(x8, FOUR, x7)
    return O


def solve_d364b489(I):
    x1 = ofcolor(I, ONE)
    x2 = shift(x1, DOWN)
    x3 = fill(I, EIGHT, x2)
    x4 = shift(x1, UP)
    x5 = fill(x3, TWO, x4)
    x6 = shift(x1, RIGHT)
    x7 = fill(x5, SIX, x6)
    x8 = shift(x1, LEFT)
    O = fill(x7, SEVEN, x8)
    return O


def solve_2281f1f4(I):
    x1 = ofcolor(I, FIVE)
    x2 = product(x1, x1)
    x3 = power(first, TWO)
    x4 = power(last, TWO)
    x5 = fork(astuple, x3, x4)
    x6 = apply(x5, x2)
    x7 = urcorner(x1)
    x8 = remove(x7, x6)
    O = underfill(I, TWO, x8)
    return O


def solve_cf98881b(I):
    x1 = hsplit(I, THREE)
    x2 = first(x1)
    x3 = remove(x2, x1)
    x4 = first(x3)
    x5 = last(x3)
    x6 = ofcolor(x4, NINE)
    x7 = ofcolor(x2, FOUR)
    x8 = fill(x5, NINE, x6)
    O = fill(x8, FOUR, x7)
    return O


def solve_6455b5f5(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = argmax(x1, size)
    x4 = valmin(x1, size)
    x5 = sizefilter(x2, x4)
    x6 = recolor(ONE, x3)
    x7 = merge(x5)
    x8 = paint(I, x6)
    O = fill(x8, EIGHT, x7)
    return O


def solve_a5f85a15(I):
    x1 = objects(I, T, T, T)
    x2 = interval(ONE, NINE, ONE)
    x3 = apply(double, x2)
    x4 = apply(decrement, x3)
    x5 = papply(astuple, x4, x4)
    x6 = apply(ulcorner, x1)
    x7 = lbind(shift, x5)
    x8 = mapply(x7, x6)
    O = fill(I, FOUR, x8)
    return O


def solve_6e82a1ae(I):
    x1 = objects(I, T, F, T)
    x2 = lbind(sizefilter, x1)
    x3 = compose(merge, x2)
    x4 = x3(TWO)
    x5 = x3(THREE)
    x6 = x3(FOUR)
    x7 = fill(I, THREE, x4)
    x8 = fill(x7, TWO, x5)
    O = fill(x8, ONE, x6)
    return O


def solve_7ddcd7ec(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = first(x3)
    x5 = color(x4)
    x6 = lbind(position, x4)
    x7 = fork(shoot, center, x6)
    x8 = mapply(x7, x2)
    O = fill(I, x5, x8)
    return O


def solve_8f2ea7aa(I):
    x1 = objects(I, T, F, T)
    x2 = merge(x1)
    x3 = subgrid(x2, I)
    x4 = upscale(x3, THREE)
    x5 = hconcat(x3, x3)
    x6 = hconcat(x5, x3)
    x7 = vconcat(x6, x6)
    x8 = vconcat(x7, x6)
    O = cellwise(x4, x8, ZERO)
    return O


def solve_25d487eb(I):
    x1 = leastcolor(I)
    x2 = objects(I, T, F, T)
    x3 = ofcolor(I, x1)
    x4 = center(x3)
    x5 = merge(x2)
    x6 = center(x5)
    x7 = subtract(x6, x4)
    x8 = shoot(x4, x7)
    O = underfill(I, x1, x8)
    return O


def solve_b8cdaf2b(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = shift(x2, UP)
    x4 = ulcorner(x3)
    x5 = urcorner(x3)
    x6 = shoot(x4, NEG_UNITY)
    x7 = shoot(x5, UP_RIGHT)
    x8 = combine(x6, x7)
    O = underfill(I, x1, x8)
    return O


def solve_253bf280(I):
    x1 = ofcolor(I, EIGHT)
    x2 = prapply(connect, x1, x1)
    x3 = rbind(greater, ONE)
    x4 = compose(x3, size)
    x5 = sfilter(x2, x4)
    x6 = fork(either, vline, hline)
    x7 = mfilter(x5, x6)
    x8 = fill(I, THREE, x7)
    O = fill(x8, EIGHT, x1)
    return O


def solve_3ac3eb23(I):
    x1 = objects(I, T, F, T)
    x2 = chain(ineighbors, last, first)
    x3 = fork(recolor, color, x2)
    x4 = mapply(x3, x1)
    x5 = paint(I, x4)
    x6 = vsplit(x5, THREE)
    x7 = first(x6)
    x8 = vconcat(x7, x7)
    O = vconcat(x7, x8)
    return O


def solve_cce03e0d(I):
    x1 = upscale(I, THREE)
    x2 = hconcat(I, I)
    x3 = hconcat(x2, I)
    x4 = vconcat(x3, x3)
    x5 = vconcat(x4, x3)
    x6 = ofcolor(x1, ZERO)
    x7 = ofcolor(x1, ONE)
    x8 = combine(x6, x7)
    O = fill(x5, ZERO, x8)
    return O


def solve_bda2d7a6(I):
    x1 = partition(I)
    x2 = order(x1, size)
    x3 = apply(color, x2)
    x4 = last(x2)
    x5 = remove(x4, x2)
    x6 = repeat(x4, ONE)
    x7 = combine(x6, x5)
    x8 = mpapply(recolor, x3, x7)
    O = paint(I, x8)
    return O


def solve_fcc82909(I):
    x1 = objects(I, F, T, T)
    x2 = rbind(add, DOWN)
    x3 = compose(x2, llcorner)
    x4 = compose(toivec, numcolors)
    x5 = fork(add, lrcorner, x4)
    x6 = fork(astuple, x3, x5)
    x7 = compose(box, x6)
    x8 = mapply(x7, x1)
    O = fill(I, THREE, x8)
    return O


def solve_72ca375d(I):
    x1 = objects(I, T, T, T)
    x2 = totuple(x1)
    x3 = rbind(subgrid, I)
    x4 = apply(x3, x2)
    x5 = apply(vmirror, x4)
    x6 = papply(equality, x4, x5)
    x7 = pair(x4, x6)
    x8 = extract(x7, last)
    O = first(x8)
    return O


def solve_4be741c5(I):
    x1 = portrait(I)
    x2 = branch(x1, dmirror, identity)
    x3 = branch(x1, height, width)
    x4 = x3(I)
    x5 = astuple(ONE, x4)
    x6 = x2(I)
    x7 = crop(x6, ORIGIN, x5)
    x8 = apply(dedupe, x7)
    O = x2(x8)
    return O


def solve_27a28665(I):
    x1 = objects(I, T, F, F)
    x2 = valmax(x1, size)
    x3 = equality(x2, ONE)
    x4 = equality(x2, FOUR)
    x5 = equality(x2, FIVE)
    x6 = branch(x3, TWO, ONE)
    x7 = branch(x4, THREE, x6)
    x8 = branch(x5, SIX, x7)
    O = canvas(x8, UNITY)
    return O


def solve_b2862040(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, NINE)
    x3 = colorfilter(x1, ONE)
    x4 = rbind(bordering, I)
    x5 = compose(flip, x4)
    x6 = mfilter(x2, x5)
    x7 = rbind(adjacent, x6)
    x8 = mfilter(x3, x7)
    O = fill(I, EIGHT, x8)
    return O


def solve_73251a56(I):
    x1 = dmirror(I)
    x2 = papply(pair, I, x1)
    x3 = lbind(apply, maximum)
    x4 = apply(x3, x2)
    x5 = mostcolor(x4)
    x6 = replace(x4, ZERO, x5)
    x7 = index(x6, ORIGIN)
    x8 = shoot(ORIGIN, UNITY)
    O = fill(x6, x7, x8)
    return O


def solve_bd4472b8(I):
    x1 = width(I)
    x2 = astuple(TWO, x1)
    x3 = crop(I, ORIGIN, x2)
    x4 = tophalf(x3)
    x5 = dmirror(x4)
    x6 = hupscale(x5, x1)
    x7 = repeat(x6, TWO)
    x8 = merge(x7)
    O = vconcat(x3, x8)
    return O


def solve_681b3aeb(I):
    x1 = rot270(I)
    x2 = objects(x1, T, F, T)
    x3 = argmax(x2, size)
    x4 = argmin(x2, size)
    x5 = color(x4)
    x6 = canvas(x5, THREE_BY_THREE)
    x7 = normalize(x3)
    x8 = paint(x6, x7)
    O = rot90(x8)
    return O


def solve_1f642eb9(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = first(x3)
    x5 = rbind(gravitate, x4)
    x6 = compose(crement, x5)
    x7 = fork(shift, identity, x6)
    x8 = mapply(x7, x2)
    O = paint(I, x8)
    return O


def solve_b8825c91(I):
    x1 = replace(I, FOUR, ZERO)
    x2 = dmirror(x1)
    x3 = papply(pair, x1, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = cmirror(x5)
    x7 = papply(pair, x5, x6)
    x8 = apply(x4, x7)
    O = cmirror(x8)
    return O


def solve_d90796e8(I):
    x1 = objects(I, F, F, T)
    x2 = sizefilter(x1, TWO)
    x3 = lbind(contained, TWO)
    x4 = compose(x3, palette)
    x5 = mfilter(x2, x4)
    x6 = cover(I, x5)
    x7 = matcher(first, THREE)
    x8 = sfilter(x5, x7)
    O = fill(x6, EIGHT, x8)
    return O


def solve_2c608aff(I):
    x1 = leastcolor(I)
    x2 = objects(I, T, F, T)
    x3 = argmax(x2, size)
    x4 = toindices(x3)
    x5 = ofcolor(I, x1)
    x6 = prapply(connect, x4, x5)
    x7 = fork(either, vline, hline)
    x8 = mfilter(x6, x7)
    O = underfill(I, x1, x8)
    return O


def solve_868de0fa(I):
    x1 = objects(I, T, F, F)
    x2 = sfilter(x1, square)
    x3 = compose(even, height)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = merge(x4)
    x7 = merge(x5)
    x8 = fill(I, TWO, x6)
    O = fill(x8, SEVEN, x7)
    return O


def solve_694f12f3(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, FOUR)
    x3 = compose(backdrop, inbox)
    x4 = argmin(x2, size)
    x5 = argmax(x2, size)
    x6 = x3(x4)
    x7 = x3(x5)
    x8 = fill(I, ONE, x6)
    O = fill(x8, TWO, x7)
    return O


def solve_bbc9ae5d(I):
    x1 = width(I)
    x2 = palette(I)
    x3 = halve(x1)
    x4 = vupscale(I, x3)
    x5 = rbind(shoot, UNITY)
    x6 = other(x2, ZERO)
    x7 = ofcolor(x4, x6)
    x8 = mapply(x5, x7)
    O = fill(x4, x6, x8)
    return O


def solve_444801d8(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, ONE)
    x3 = rbind(toobject, I)
    x4 = chain(leastcolor, x3, delta)
    x5 = rbind(shift, UP)
    x6 = compose(x5, backdrop)
    x7 = fork(recolor, x4, x6)
    x8 = mapply(x7, x2)
    O = underpaint(I, x8)
    return O


def solve_31aa019c(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = first(x2)
    x4 = neighbors(x3)
    x5 = astuple(TEN, TEN)
    x6 = canvas(ZERO, x5)
    x7 = initset(x3)
    x8 = fill(x6, x1, x7)
    O = fill(x8, TWO, x4)
    return O


def solve_d4f3cd78(I):
    x1 = ofcolor(I, FIVE)
    x2 = delta(x1)
    x3 = fill(I, EIGHT, x2)
    x4 = box(x1)
    x5 = difference(x4, x1)
    x6 = position(x4, x5)
    x7 = first(x5)
    x8 = shoot(x7, x6)
    O = fill(x3, EIGHT, x8)
    return O


def solve_8e5a5113(I):
    x1 = crop(I, ORIGIN, THREE_BY_THREE)
    x2 = rot90(x1)
    x3 = rot180(x1)
    x4 = astuple(x2, x3)
    x5 = astuple(FOUR, EIGHT)
    x6 = apply(tojvec, x5)
    x7 = apply(asobject, x4)
    x8 = mpapply(shift, x7, x6)
    O = paint(I, x8)
    return O


def solve_137eaa0f(I):
    x1 = objects(I, F, T, T)
    x2 = matcher(first, FIVE)
    x3 = rbind(sfilter, x2)
    x4 = chain(invert, center, x3)
    x5 = fork(shift, identity, x4)
    x6 = canvas(ZERO, THREE_BY_THREE)
    x7 = mapply(x5, x1)
    x8 = shift(x7, UNITY)
    O = paint(x6, x8)
    return O


def solve_22168020(I):
    x1 = palette(I)
    x2 = remove(ZERO, x1)
    x3 = lbind(ofcolor, I)
    x4 = lbind(prapply, connect)
    x5 = fork(x4, x3, x3)
    x6 = compose(merge, x5)
    x7 = fork(recolor, identity, x6)
    x8 = mapply(x7, x2)
    O = paint(I, x8)
    return O


def solve_f0afb749(I):
    x1 = upscale(I, TWO)
    x2 = objects(x1, T, T, T)
    x3 = rbind(shoot, UNITY)
    x4 = compose(x3, lrcorner)
    x5 = rbind(shoot, NEG_UNITY)
    x6 = compose(x5, ulcorner)
    x7 = fork(combine, x4, x6)
    x8 = mapply(x7, x2)
    O = underfill(x1, ONE, x8)
    return O


def solve_6a11f6da(I):
    x1 = vsplit(I, THREE)
    x2 = first(x1)
    x3 = remove(x2, x1)
    x4 = first(x3)
    x5 = last(x3)
    x6 = ofcolor(x2, ONE)
    x7 = fill(x4, ONE, x6)
    x8 = ofcolor(x5, SIX)
    O = fill(x7, SIX, x8)
    return O


def solve_7d1f7ee8(I):
    x1 = objects(I, T, T, F)
    x2 = argmax(x1, size)
    x3 = rbind(adjacent, x2)
    x4 = sfilter(x1, x3)
    x5 = ofcolor(I, ZERO)
    x6 = fork(recolor, color, backdrop)
    x7 = mapply(x6, x4)
    x8 = paint(I, x7)
    O = fill(x8, ZERO, x5)
    return O


def solve_27a77e38(I):
    x1 = tophalf(I)
    x2 = mostcolor(x1)
    x3 = width(I)
    x4 = halve(x3)
    x5 = height(I)
    x6 = decrement(x5)
    x7 = astuple(x6, x4)
    x8 = initset(x7)
    O = fill(I, x2, x8)
    return O


def solve_5b6cbef5(I):
    x1 = height(I)
    x2 = upscale(I, x1)
    x3 = rot90(I)
    x4 = repeat(x3, x1)
    x5 = merge(x4)
    x6 = rot270(x5)
    x7 = repeat(x6, x1)
    x8 = merge(x7)
    O = cellwise(x8, x2, ZERO)
    return O


def solve_c3202e5a(I):
    x1 = frontiers(I)
    x2 = size(x1)
    x3 = halve(x2)
    x4 = increment(x3)
    x5 = compress(I)
    x6 = hsplit(x5, x4)
    x7 = rbind(vsplit, x4)
    x8 = mapply(x7, x6)
    O = argmin(x8, numcolors)
    return O


def solve_0b17323b(I):
    x1 = fgpartition(I)
    x2 = first(x1)
    x3 = shape(x2)
    x4 = decrement(x3)
    x5 = double(x4)
    x6 = shift(x2, x4)
    x7 = shift(x2, x5)
    x8 = underfill(I, TWO, x6)
    O = underfill(x8, TWO, x7)
    return O


def solve_505fff84(I):
    x1 = ofcolor(I, ONE)
    x2 = ofcolor(I, EIGHT)
    x3 = shift(x1, RIGHT)
    x4 = shift(x2, LEFT)
    x5 = order(x3, first)
    x6 = order(x4, first)
    x7 = papply(connect, x5, x6)
    x8 = rbind(subgrid, I)
    O = mapply(x8, x7)
    return O


def solve_358ba94e(I):
    x1 = objects(I, T, F, T)
    x2 = rbind(subgrid, I)
    x3 = apply(x2, x1)
    x4 = rbind(colorcount, ZERO)
    x5 = totuple(x3)
    x6 = apply(x4, x5)
    x7 = leastcommon(x6)
    x8 = matcher(x4, x7)
    O = extract(x3, x8)
    return O


def solve_0692e18c(I):
    x1 = leastcolor(I)
    x2 = mostcolor(I)
    x3 = switch(I, x1, x2)
    x4 = upscale(I, THREE)
    x5 = hconcat(x3, x3)
    x6 = hconcat(x5, x3)
    x7 = vconcat(x6, x6)
    x8 = vconcat(x7, x6)
    O = cellwise(x4, x8, ZERO)
    return O


def solve_da2b0fe3(I):
    x1 = frontiers(I)
    x2 = leastcolor(I)
    x3 = ofcolor(I, x2)
    x4 = backdrop(x3)
    x5 = fill(I, x2, x4)
    x6 = frontiers(x5)
    x7 = difference(x1, x6)
    x8 = merge(x7)
    O = fill(I, THREE, x8)
    return O


def solve_e66aafb8(I):
    x1 = ofcolor(I, ZERO)
    x2 = dmirror(I)
    x3 = papply(pair, I, x2)
    x4 = lbind(apply, maximum)
    x5 = apply(x4, x3)
    x6 = cmirror(x5)
    x7 = papply(pair, x5, x6)
    x8 = apply(x4, x7)
    O = subgrid(x1, x8)
    return O


def solve_e7a25a18(I):
    x1 = ofcolor(I, TWO)
    x2 = subgrid(x1, I)
    x3 = trim(x2)
    x4 = fgpartition(x3)
    x5 = merge(x4)
    x6 = normalize(x5)
    x7 = upscale(x6, TWO)
    x8 = shift(x7, UNITY)
    O = paint(x2, x8)
    return O


def solve_0becf7df(I):
    x1 = objects(I, F, T, T)
    x2 = index(I, ORIGIN)
    x3 = index(I, RIGHT)
    x4 = index(I, DOWN)
    x5 = index(I, UNITY)
    x6 = switch(I, x2, x3)
    x7 = switch(x6, x4, x5)
    x8 = argmin(x1, size)
    O = paint(x7, x8)
    return O


def solve_4852f2fa(I):
    x1 = ofcolor(I, EIGHT)
    x2 = colorcount(I, FOUR)
    x3 = lrcorner(x1)
    x4 = neighbors(x3)
    x5 = shift(x4, NEG_UNITY)
    x6 = subgrid(x5, I)
    x7 = repeat(x6, x2)
    x8 = mapply(rot90, x7)
    O = rot270(x8)
    return O


def solve_67636eac(I):
    x1 = portrait(I)
    x2 = branch(x1, identity, rot90)
    x3 = x2(I)
    x4 = objects(x3, T, T, T)
    x5 = order(x4, uppermost)
    x6 = rbind(subgrid, x3)
    x7 = mapply(x6, x5)
    x8 = branch(x1, identity, rot270)
    O = x8(x7)
    return O


def solve_917bccba(I):
    x1 = fgpartition(I)
    x2 = argmin(x1, width)
    x3 = cover(I, x2)
    x4 = leastcolor(x3)
    x5 = replace(I, x4, ZERO)
    x6 = fork(combine, vfrontier, hfrontier)
    x7 = urcorner(x2)
    x8 = x6(x7)
    O = underfill(x5, x4, x8)
    return O


def solve_aee291af(I):
    x1 = objects(I, T, T, T)
    x2 = colorfilter(x1, TWO)
    x3 = totuple(x2)
    x4 = apply(normalize, x3)
    x5 = leastcommon(x4)
    x6 = matcher(normalize, x5)
    x7 = extract(x2, x6)
    x8 = outbox(x7)
    O = subgrid(x8, I)
    return O


def solve_c8cbb738(I):
    x1 = mostcolor(I)
    x2 = fgpartition(I)
    x3 = valmax(x2, shape)
    x4 = canvas(x1, x3)
    x5 = apply(normalize, x2)
    x6 = lbind(subtract, x3)
    x7 = chain(halve, x6, shape)
    x8 = fork(shift, identity, x7)
    x9 = mapply(x8, x5)
    O = paint(x4, x9)
    return O


def solve_23581191(I):
    x1 = objects(I, T, T, T)
    x2 = fork(combine, vfrontier, hfrontier)
    x3 = compose(x2, center)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x1)
    x6 = paint(I, x5)
    x7 = fork(intersection, first, last)
    x8 = apply(x3, x1)
    x9 = x7(x8)
    O = fill(x6, TWO, x9)
    return O


def solve_bdad9b1f(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, EIGHT)
    x3 = center(x1)
    x4 = center(x2)
    x5 = hfrontier(x3)
    x6 = vfrontier(x4)
    x7 = intersection(x5, x6)
    x8 = fill(I, TWO, x5)
    x9 = fill(x8, EIGHT, x6)
    O = fill(x9, FOUR, x7)
    return O


def solve_99b1bc43(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x2, ZERO)
    x5 = combine(x3, x4)
    x6 = intersection(x3, x4)
    x7 = difference(x5, x6)
    x8 = shape(x1)
    x9 = canvas(ZERO, x8)
    O = fill(x9, THREE, x7)
    return O


def solve_77fdfe62(I):
    x1 = ofcolor(I, EIGHT)
    x2 = subgrid(x1, I)
    x3 = replace(I, EIGHT, ZERO)
    x4 = replace(x3, ONE, ZERO)
    x5 = compress(x4)
    x6 = width(x2)
    x7 = halve(x6)
    x8 = upscale(x5, x7)
    x9 = ofcolor(x2, ZERO)
    O = fill(x8, ZERO, x9)
    return O


def solve_c3e719e8(I):
    x1 = mostcolor(I)
    x2 = hconcat(I, I)
    x3 = upscale(I, THREE)
    x4 = ofcolor(x3, x1)
    x5 = asindices(x3)
    x6 = difference(x5, x4)
    x7 = hconcat(x2, I)
    x8 = vconcat(x7, x7)
    x9 = vconcat(x8, x7)
    O = fill(x9, ZERO, x6)
    return O


def solve_890034e9(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = inbox(x2)
    x4 = recolor(ZERO, x3)
    x5 = occurrences(I, x4)
    x6 = normalize(x2)
    x7 = shift(x6, NEG_UNITY)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x5)
    O = fill(I, x1, x9)
    return O


def solve_d8c310e9(I):
    x1 = objects(I, F, F, T)
    x2 = first(x1)
    x3 = hperiod(x2)
    x4 = multiply(x3, THREE)
    x5 = tojvec(x3)
    x6 = tojvec(x4)
    x7 = shift(x2, x5)
    x8 = shift(x2, x6)
    x9 = paint(I, x7)
    O = paint(x9, x8)
    return O


def solve_6c434453(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, EIGHT)
    x3 = dneighbors(UNITY)
    x4 = insert(UNITY, x3)
    x5 = merge(x2)
    x6 = cover(I, x5)
    x7 = apply(ulcorner, x2)
    x8 = lbind(shift, x4)
    x9 = mapply(x8, x7)
    O = fill(x6, TWO, x9)
    return O


def solve_54d9e175(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = compose(neighbors, center)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x2)
    x6 = paint(I, x5)
    x7 = replace(x6, ONE, SIX)
    x8 = replace(x7, TWO, SEVEN)
    x9 = replace(x8, THREE, EIGHT)
    O = replace(x9, FOUR, NINE)
    return O


def solve_a3325580(I):
    x1 = objects(I, T, F, T)
    x2 = valmax(x1, size)
    x3 = sizefilter(x1, x2)
    x4 = order(x3, leftmost)
    x5 = apply(color, x4)
    x6 = astuple(ONE, x2)
    x7 = rbind(canvas, x6)
    x8 = apply(x7, x5)
    x9 = merge(x8)
    O = dmirror(x9)
    return O


def solve_623ea044(I):
    x1 = objects(I, T, F, T)
    x2 = first(x1)
    x3 = center(x2)
    x4 = color(x2)
    x5 = astuple(UNITY, NEG_UNITY)
    x6 = astuple(UP_RIGHT, DOWN_LEFT)
    x7 = combine(x5, x6)
    x8 = lbind(shoot, x3)
    x9 = mapply(x8, x7)
    O = fill(I, x4, x9)
    return O


def solve_b548a754(I):
    x1 = objects(I, T, F, T)
    x2 = replace(I, EIGHT, ZERO)
    x3 = leastcolor(x2)
    x4 = replace(x2, x3, ZERO)
    x5 = leastcolor(x4)
    x6 = merge(x1)
    x7 = backdrop(x6)
    x8 = box(x6)
    x9 = fill(I, x3, x7)
    O = fill(x9, x5, x8)
    return O


def solve_ddf7fa4f(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = colorfilter(x1, FIVE)
    x4 = product(x2, x3)
    x5 = fork(vmatching, first, last)
    x6 = sfilter(x4, x5)
    x7 = compose(color, first)
    x8 = fork(recolor, x7, last)
    x9 = mapply(x8, x6)
    O = paint(I, x9)
    return O


def solve_dc0a314f(I):
    x1 = ofcolor(I, THREE)
    x2 = replace(I, THREE, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = subgrid(x1, x9)
    return O


def solve_de1cd16c(I):
    x1 = leastcolor(I)
    x2 = objects(I, T, F, F)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = rbind(subgrid, I)
    x6 = apply(x5, x4)
    x7 = rbind(colorcount, x1)
    x8 = argmax(x6, x7)
    x9 = mostcolor(x8)
    O = canvas(x9, UNITY)
    return O


def solve_6b9890af(I):
    x1 = objects(I, T, T, T)
    x2 = ofcolor(I, TWO)
    x3 = argmin(x1, size)
    x4 = subgrid(x2, I)
    x5 = width(x4)
    x6 = divide(x5, THREE)
    x7 = upscale(x3, x6)
    x8 = normalize(x7)
    x9 = shift(x8, UNITY)
    O = paint(x4, x9)
    return O


def solve_80af3007(I):
    x1 = objects(I, T, T, T)
    x2 = first(x1)
    x3 = subgrid(x2, I)
    x4 = upscale(x3, THREE)
    x5 = hconcat(x3, x3)
    x6 = hconcat(x5, x3)
    x7 = vconcat(x6, x6)
    x8 = vconcat(x7, x6)
    x9 = cellwise(x4, x8, ZERO)
    O = downscale(x9, THREE)
    return O


def solve_f8b3ba0a(I):
    x1 = compress(I)
    x2 = astuple(THREE, ONE)
    x3 = palette(x1)
    x4 = lbind(colorcount, x1)
    x5 = compose(invert, x4)
    x6 = order(x3, x5)
    x7 = rbind(canvas, UNITY)
    x8 = apply(x7, x6)
    x9 = merge(x8)
    O = crop(x9, DOWN, x2)
    return O


def solve_3de23699(I):
    x1 = fgpartition(I)
    x2 = sizefilter(x1, FOUR)
    x3 = first(x2)
    x4 = difference(x1, x2)
    x5 = first(x4)
    x6 = color(x3)
    x7 = color(x5)
    x8 = subgrid(x3, I)
    x9 = trim(x8)
    O = replace(x9, x7, x6)
    return O


def solve_a9f96cdd(I):
    x1 = ofcolor(I, TWO)
    x2 = replace(I, TWO, ZERO)
    x3 = shift(x1, NEG_UNITY)
    x4 = fill(x2, THREE, x3)
    x5 = shift(x1, UP_RIGHT)
    x6 = fill(x4, SIX, x5)
    x7 = shift(x1, DOWN_LEFT)
    x8 = fill(x6, EIGHT, x7)
    x9 = shift(x1, UNITY)
    O = fill(x8, SEVEN, x9)
    return O


def solve_1b60fb0c(I):
    x1 = rot90(I)
    x2 = ofcolor(I, ONE)
    x3 = ofcolor(x1, ONE)
    x4 = neighbors(ORIGIN)
    x5 = mapply(neighbors, x4)
    x6 = lbind(shift, x3)
    x7 = apply(x6, x5)
    x8 = lbind(intersection, x2)
    x9 = argmax(x7, x8)
    O = underfill(I, TWO, x9)
    return O


def solve_178fcbfb(I):
    x1 = objects(I, T, F, T)
    x2 = ofcolor(I, TWO)
    x3 = mapply(vfrontier, x2)
    x4 = fill(I, TWO, x3)
    x5 = colorfilter(x1, TWO)
    x6 = difference(x1, x5)
    x7 = compose(hfrontier, center)
    x8 = fork(recolor, color, x7)
    x9 = mapply(x8, x6)
    O = paint(x4, x9)
    return O


def solve_1caeab9d(I):
    x1 = objects(I, T, T, T)
    x2 = ofcolor(I, ONE)
    x3 = lowermost(x2)
    x4 = lbind(subtract, x3)
    x5 = chain(toivec, x4, lowermost)
    x6 = fork(shift, identity, x5)
    x7 = merge(x1)
    x8 = cover(I, x7)
    x9 = mapply(x6, x1)
    O = paint(x8, x9)
    return O


def solve_88a10436(I):
    x1 = objects(I, F, F, T)
    x2 = colorfilter(x1, FIVE)
    x3 = first(x2)
    x4 = center(x3)
    x5 = difference(x1, x2)
    x6 = first(x5)
    x7 = normalize(x6)
    x8 = shift(x7, x4)
    x9 = shift(x8, NEG_UNITY)
    O = paint(I, x9)
    return O


def solve_c0f76784(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = sfilter(x2, square)
    x4 = sizefilter(x3, ONE)
    x5 = merge(x4)
    x6 = argmax(x3, size)
    x7 = merge(x3)
    x8 = fill(I, SEVEN, x7)
    x9 = fill(x8, EIGHT, x6)
    O = fill(x9, SIX, x5)
    return O


def solve_d4469b4b(I):
    x1 = palette(I)
    x2 = other(x1, ZERO)
    x3 = equality(x2, ONE)
    x4 = equality(x2, TWO)
    x5 = branch(x3, UNITY, TWO_BY_TWO)
    x6 = branch(x4, RIGHT, x5)
    x7 = fork(combine, vfrontier, hfrontier)
    x8 = x7(x6)
    x9 = canvas(ZERO, THREE_BY_THREE)
    O = fill(x9, FIVE, x8)
    return O


def solve_321b1fc6(I):
    x1 = objects(I, F, F, T)
    x2 = colorfilter(x1, EIGHT)
    x3 = difference(x1, x2)
    x4 = first(x3)
    x5 = cover(I, x4)
    x6 = normalize(x4)
    x7 = lbind(shift, x6)
    x8 = apply(ulcorner, x2)
    x9 = mapply(x7, x8)
    O = paint(x5, x9)
    return O


def solve_5ad4f10b(I):
    x1 = objects(I, T, T, T)
    x2 = argmax(x1, size)
    x3 = color(x2)
    x4 = subgrid(x2, I)
    x5 = leastcolor(x4)
    x6 = replace(x4, x5, ZERO)
    x7 = replace(x6, x3, x5)
    x8 = height(x7)
    x9 = divide(x8, THREE)
    O = downscale(x7, x9)
    return O


def solve_794b24be(I):
    x1 = ofcolor(I, ONE)
    x2 = size(x1)
    x3 = decrement(x2)
    x4 = canvas(ZERO, THREE_BY_THREE)
    x5 = tojvec(x3)
    x6 = connect(ORIGIN, x5)
    x7 = equality(x2, FOUR)
    x8 = insert(UNITY, x6)
    x9 = branch(x7, x8, x6)
    O = fill(x4, TWO, x9)
    return O


def solve_1fad071e(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, ONE)
    x3 = sizefilter(x2, FOUR)
    x4 = size(x3)
    x5 = subtract(FIVE, x4)
    x6 = astuple(ONE, x4)
    x7 = canvas(ONE, x6)
    x8 = astuple(ONE, x5)
    x9 = canvas(ZERO, x8)
    O = hconcat(x7, x9)
    return O


def solve_3eda0437(I):
    x1 = interval(TWO, TEN, ONE)
    x2 = prapply(astuple, x1, x1)
    x3 = lbind(canvas, ZERO)
    x4 = lbind(occurrences, I)
    x5 = lbind(lbind, shift)
    x6 = fork(apply, x5, x4)
    x7 = chain(x6, asobject, x3)
    x8 = mapply(x7, x2)
    x9 = argmax(x8, size)
    O = fill(I, SIX, x9)
    return O


def solve_83302e8f(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = sfilter(x2, square)
    x4 = difference(x2, x3)
    x5 = merge(x3)
    x6 = recolor(THREE, x5)
    x7 = merge(x4)
    x8 = recolor(FOUR, x7)
    x9 = paint(I, x6)
    O = paint(x9, x8)
    return O


def solve_47c1f68c(I):
    x1 = leastcolor(I)
    x2 = vmirror(I)
    x3 = objects(I, T, T, T)
    x4 = merge(x3)
    x5 = mostcolor(x4)
    x6 = cellwise(I, x2, x1)
    x7 = hmirror(x6)
    x8 = cellwise(x6, x7, x1)
    x9 = compress(x8)
    O = replace(x9, x1, x5)
    return O


def solve_af902bf9(I):
    x1 = ofcolor(I, FOUR)
    x2 = prapply(connect, x1, x1)
    x3 = fork(either, vline, hline)
    x4 = mfilter(x2, x3)
    x5 = underfill(I, NEG_ONE, x4)
    x6 = objects(x5, F, F, T)
    x7 = compose(backdrop, inbox)
    x8 = mapply(x7, x6)
    x9 = fill(x5, TWO, x8)
    O = replace(x9, NEG_ONE, ZERO)
    return O


def solve_8eb1be9a(I):
    x1 = objects(I, T, T, T)
    x2 = first(x1)
    x3 = interval(NEG_TWO, FOUR, ONE)
    x4 = lbind(shift, x2)
    x5 = height(x2)
    x6 = rbind(multiply, x5)
    x7 = apply(x6, x3)
    x8 = apply(toivec, x7)
    x9 = mapply(x4, x8)
    O = paint(I, x9)
    return O


def solve_3428a4f5(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = astuple(SIX, FIVE)
    x4 = ofcolor(x1, TWO)
    x5 = ofcolor(x2, TWO)
    x6 = combine(x4, x5)
    x7 = intersection(x4, x5)
    x8 = difference(x6, x7)
    x9 = canvas(ZERO, x3)
    O = fill(x9, THREE, x8)
    return O


def solve_88a62173(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = tophalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x1)
    x6 = bottomhalf(x2)
    x7 = astuple(x3, x4)
    x8 = astuple(x5, x6)
    x9 = combine(x7, x8)
    O = leastcommon(x9)
    return O


def solve_11852cab(I):
    x1 = objects(I, T, T, T)
    x2 = merge(x1)
    x3 = hmirror(x2)
    x4 = vmirror(x2)
    x5 = dmirror(x2)
    x6 = cmirror(x2)
    x7 = paint(I, x3)
    x8 = paint(x7, x4)
    x9 = paint(x8, x5)
    O = paint(x9, x6)
    return O


def solve_f9d67f8b(I):
    x1 = matcher(first, NINE)
    x2 = compose(flip, x1)
    x3 = asobject(I)
    x4 = sfilter(x3, x2)
    x5 = hmirror(x4)
    x6 = vmirror(x4)
    x7 = shift(x5, TWO_BY_ZERO)
    x8 = shift(x6, ZERO_BY_TWO)
    x9 = combine(x7, x8)
    O = paint(I, x9)
    return O


def solve_2037f2c7(I):
    x1 = objects(I, F, F, T)
    x2 = argmax(x1, size)
    x3 = argmin(x1, size)
    x4 = normalize(x2)
    x5 = normalize(x3)
    x6 = difference(x4, x5)
    x7 = normalize(x6)
    x8 = shape(x7)
    x9 = canvas(ZERO, x8)
    O = fill(x9, EIGHT, x7)
    return O


def solve_67b4a34d(I):
    x1 = ofcolor(I, THREE)
    x2 = replace(I, THREE, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = subgrid(x1, x9)
    return O


def solve_7c8af763(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = rbind(toobject, I)
    x4 = rbind(colorcount, ONE)
    x5 = rbind(colorcount, TWO)
    x6 = fork(greater, x4, x5)
    x7 = chain(x6, x3, outbox)
    x8 = mfilter(x2, x7)
    x9 = fill(I, ONE, x8)
    O = replace(x9, ZERO, TWO)
    return O


def solve_09c534e7(I):
    x1 = objects(I, F, F, T)
    x2 = lbind(mapply, neighbors)
    x3 = compose(x2, toindices)
    x4 = fork(difference, x3, toindices)
    x5 = compose(x2, x4)
    x6 = fork(intersection, x5, toindices)
    x7 = fork(difference, toindices, x6)
    x8 = fork(recolor, leastcolor, x7)
    x9 = mapply(x8, x1)
    O = paint(I, x9)
    return O


def solve_782b5218(I):
    x1 = palette(I)
    x2 = ofcolor(I, TWO)
    x3 = rbind(shoot, DOWN)
    x4 = remove(ZERO, x1)
    x5 = other(x4, TWO)
    x6 = mapply(x3, x2)
    x7 = shape(I)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, x5, x6)
    O = fill(x9, TWO, x2)
    return O


def solve_31d5ba1a(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = ofcolor(x1, NINE)
    x4 = ofcolor(x2, FOUR)
    x5 = shape(x1)
    x6 = canvas(ZERO, x5)
    x7 = difference(x3, x4)
    x8 = difference(x4, x3)
    x9 = combine(x7, x8)
    O = fill(x6, SIX, x9)
    return O


def solve_12eac192(I):
    x1 = objects(I, T, F, F)
    x2 = matcher(color, ZERO)
    x3 = compose(flip, x2)
    x4 = fork(either, vline, hline)
    x5 = lbind(greater, THREE)
    x6 = compose(x5, size)
    x7 = fork(both, x4, x6)
    x8 = fork(both, x3, x7)
    x9 = mfilter(x1, x8)
    O = fill(I, THREE, x9)
    return O


def solve_ad7e01d0(I):
    x1 = shape(I)
    x2 = multiply(x1, x1)
    x3 = canvas(ZERO, x2)
    x4 = asobject(I)
    x5 = ofcolor(I, FIVE)
    x6 = lbind(multiply, x1)
    x7 = apply(x6, x5)
    x8 = lbind(shift, x4)
    x9 = mapply(x8, x7)
    O = paint(x3, x9)
    return O


def solve_aa18de87(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = prapply(connect, x2, x2)
    x4 = rbind(toobject, I)
    x5 = rbind(colorcount, x1)
    x6 = compose(x5, x4)
    x7 = matcher(x6, TWO)
    x8 = fork(both, x7, hline)
    x9 = mfilter(x3, x8)
    O = underfill(I, TWO, x9)
    return O


def solve_8e2edd66(I):
    x1 = palette(I)
    x2 = upscale(I, THREE)
    x3 = other(x1, ZERO)
    x4 = switch(x2, ZERO, x3)
    x5 = switch(I, ZERO, x3)
    x6 = vconcat(x5, x5)
    x7 = vconcat(x6, x5)
    x8 = hconcat(x7, x7)
    x9 = hconcat(x7, x8)
    O = cellwise(x4, x9, ZERO)
    return O


def solve_15696249(I):
    x1 = upscale(I, THREE)
    x2 = vconcat(I, I)
    x3 = vconcat(x2, I)
    x4 = hconcat(x3, x3)
    x5 = hconcat(x4, x3)
    x6 = asindices(x1)
    x7 = frontiers(x1)
    x8 = mapply(toindices, x7)
    x9 = difference(x6, x8)
    O = fill(x5, ZERO, x9)
    return O


def solve_48f8583b(I):
    x1 = leastcolor(I)
    x2 = hconcat(I, I)
    x3 = hconcat(x2, I)
    x4 = vconcat(x3, x3)
    x5 = vconcat(x4, x3)
    x6 = upscale(I, THREE)
    x7 = ofcolor(x6, x1)
    x8 = asindices(x5)
    x9 = difference(x8, x7)
    O = fill(x5, ZERO, x9)
    return O


def solve_7c9b52a0(I):
    x1 = objects(I, F, T, T)
    x2 = apply(normalize, x1)
    x3 = matcher(first, ZERO)
    x4 = compose(flip, x3)
    x5 = rbind(sfilter, x4)
    x6 = mapply(x5, x2)
    x7 = first(x1)
    x8 = shape(x7)
    x9 = canvas(ZERO, x8)
    O = paint(x9, x6)
    return O


def solve_27f8ce4f(I):
    x1 = mostcolor(I)
    x2 = upscale(I, THREE)
    x3 = vconcat(I, I)
    x4 = vconcat(x3, I)
    x5 = hconcat(x4, x4)
    x6 = hconcat(x5, x4)
    x7 = ofcolor(x2, x1)
    x8 = asindices(x2)
    x9 = difference(x8, x7)
    O = fill(x6, ZERO, x9)
    return O


def solve_3b4c2228(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, THREE)
    x3 = valmax(x2, size)
    x4 = sizefilter(x2, x3)
    x5 = size(x4)
    x6 = decrement(x5)
    x7 = canvas(ZERO, THREE_BY_THREE)
    x8 = multiply(UNITY, x6)
    x9 = connect(ORIGIN, x8)
    O = fill(x7, ONE, x9)
    return O


def solve_21f83797(I):
    x1 = ofcolor(I, TWO)
    x2 = fork(combine, hfrontier, vfrontier)
    x3 = mapply(x2, x1)
    x4 = fill(I, TWO, x3)
    x5 = objects(x4, T, T, F)
    x6 = colorfilter(x5, ZERO)
    x7 = rbind(bordering, I)
    x8 = compose(flip, x7)
    x9 = extract(x6, x8)
    O = fill(x4, ONE, x9)
    return O


def solve_ef26cbf6(I):
    x1 = objects(I, T, T, T)
    x2 = sizefilter(x1, ONE)
    x3 = ofcolor(I, ONE)
    x4 = lbind(lbind, manhattan)
    x5 = lbind(argmin, x2)
    x6 = chain(color, x5, x4)
    x7 = fork(recolor, x6, identity)
    x8 = apply(initset, x3)
    x9 = mapply(x7, x8)
    O = paint(I, x9)
    return O


def solve_5b526a93(I):
    x1 = objects(I, T, T, T)
    x2 = apply(ulcorner, x1)
    x3 = apply(first, x2)
    x4 = apply(last, x2)
    x5 = prapply(astuple, x3, x4)
    x6 = first(x1)
    x7 = normalize(x6)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x5)
    O = underfill(I, EIGHT, x9)
    return O


def solve_d37a1ef5(I):
    x1 = ofcolor(I, TWO)
    x2 = subgrid(x1, I)
    x3 = ofcolor(x2, FIVE)
    x4 = replace(x2, ZERO, TWO)
    x5 = delta(x3)
    x6 = fill(x4, ZERO, x5)
    x7 = asobject(x6)
    x8 = ulcorner(x1)
    x9 = shift(x7, x8)
    O = paint(I, x9)
    return O


def solve_bb52a14b(I):
    x1 = ofcolor(I, FOUR)
    x2 = recolor(ZERO, x1)
    x3 = delta(x1)
    x4 = toobject(x3, I)
    x5 = combine(x2, x4)
    x6 = occurrences(I, x5)
    x7 = normalize(x1)
    x8 = lbind(shift, x7)
    x9 = mapply(x8, x6)
    O = fill(I, FOUR, x9)
    return O


def solve_d47aa2ff(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = objects(x1, T, T, T)
    x4 = objects(x2, T, T, T)
    x5 = difference(x3, x4)
    x6 = difference(x4, x3)
    x7 = merge(x6)
    x8 = fill(x1, ONE, x7)
    x9 = merge(x5)
    O = fill(x8, TWO, x9)
    return O


def solve_37d3e8b2(I):
    x1 = objects(I, T, T, T)
    x2 = rbind(subgrid, I)
    x3 = rbind(objects, T)
    x4 = rbind(x3, T)
    x5 = rbind(x4, T)
    x6 = chain(size, x5, x2)
    x7 = fork(recolor, x6, identity)
    x8 = mapply(x7, x1)
    x9 = paint(I, x8)
    O = replace(x9, FOUR, SEVEN)
    return O


def solve_f4081712(I):
    x1 = ofcolor(I, THREE)
    x2 = replace(I, THREE, ZERO)
    x3 = dmirror(x2)
    x4 = papply(pair, x2, x3)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = cmirror(x6)
    x8 = papply(pair, x6, x7)
    x9 = apply(x5, x8)
    O = subgrid(x1, x9)
    return O


def solve_d492a647(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = first(x2)
    x4 = neighbors(ORIGIN)
    x5 = lbind(mapply, dneighbors)
    x6 = power(x5, TEN)
    x7 = x6(x4)
    x8 = apply(double, x7)
    x9 = shift(x8, x3)
    O = underfill(I, x1, x9)
    return O


def solve_34b99a2b(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = ofcolor(x1, ZERO)
    x4 = ofcolor(x2, ZERO)
    x5 = combine(x3, x4)
    x6 = intersection(x3, x4)
    x7 = difference(x5, x6)
    x8 = shape(x1)
    x9 = canvas(ZERO, x8)
    O = fill(x9, TWO, x7)
    return O


def solve_a85d4709(I):
    x1 = ofcolor(I, FIVE)
    x2 = lbind(matcher, last)
    x3 = lbind(sfilter, x1)
    x4 = lbind(mapply, hfrontier)
    x5 = chain(x4, x3, x2)
    x6 = x5(ZERO)
    x7 = x5(TWO)
    x8 = x5(ONE)
    x9 = fill(I, TWO, x6)
    x10 = fill(x9, THREE, x7)
    O = fill(x10, FOUR, x8)
    return O


def solve_7e0986d6(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = replace(I, x1, ZERO)
    x4 = leastcolor(x3)
    x5 = rbind(colorcount, x4)
    x6 = rbind(greater, ONE)
    x7 = compose(x6, x5)
    x8 = rbind(toobject, x3)
    x9 = chain(x7, x8, dneighbors)
    x10 = sfilter(x2, x9)
    O = fill(x3, x4, x10)
    return O


def solve_ff28f65a(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, TWO)
    x3 = size(x2)
    x4 = double(x3)
    x5 = interval(ZERO, x4, TWO)
    x6 = apply(tojvec, x5)
    x7 = astuple(ONE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = fill(x8, ONE, x6)
    x10 = hsplit(x9, THREE)
    O = merge(x10)
    return O


def solve_eb281b96(I):
    x1 = height(I)
    x2 = width(I)
    x3 = decrement(x1)
    x4 = astuple(x3, x2)
    x5 = crop(I, ORIGIN, x4)
    x6 = hmirror(x5)
    x7 = vconcat(I, x6)
    x8 = double(x3)
    x9 = astuple(x8, x2)
    x10 = crop(x7, DOWN, x9)
    O = vconcat(x7, x10)
    return O


def solve_760b3cac(I):
    x1 = ofcolor(I, FOUR)
    x2 = ofcolor(I, EIGHT)
    x3 = ulcorner(x1)
    x4 = index(I, x3)
    x5 = equality(x4, FOUR)
    x6 = branch(x5, NEG_ONE, ONE)
    x7 = multiply(x6, THREE)
    x8 = tojvec(x7)
    x9 = vmirror(x2)
    x10 = shift(x9, x8)
    O = fill(I, EIGHT, x10)
    return O


def solve_feca6190(I):
    x1 = objects(I, T, F, T)
    x2 = size(x1)
    x3 = multiply(x2, FIVE)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = rbind(shoot, UNITY)
    x7 = compose(x6, center)
    x8 = fork(recolor, color, x7)
    x9 = mapply(x8, x1)
    x10 = paint(x5, x9)
    O = hmirror(x10)
    return O


def solve_09629e4f(I):
    x1 = objects(I, F, T, T)
    x2 = rbind(subgrid, I)
    x3 = apply(x2, x1)
    x4 = argmin(x3, numcolors)
    x5 = upscale(x4, FOUR)
    x6 = ofcolor(I, FIVE)
    x7 = shift(x6, UNITY)
    x8 = fill(x5, FIVE, x7)
    x9 = shape(x8)
    x10 = decrement(x9)
    O = crop(x8, UNITY, x10)
    return O


def solve_d4a91cb9(I):
    x1 = ofcolor(I, EIGHT)
    x2 = ofcolor(I, TWO)
    x3 = first(x1)
    x4 = first(x2)
    x5 = last(x3)
    x6 = first(x4)
    x7 = astuple(x6, x5)
    x8 = connect(x7, x3)
    x9 = connect(x7, x4)
    x10 = combine(x8, x9)
    O = underfill(I, FOUR, x10)
    return O


def solve_6ecd11f4(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, size)
    x3 = argmin(x1, size)
    x4 = subgrid(x2, I)
    x5 = subgrid(x3, I)
    x6 = width(x4)
    x7 = width(x5)
    x8 = divide(x6, x7)
    x9 = downscale(x4, x8)
    x10 = ofcolor(x9, ZERO)
    O = fill(x5, ZERO, x10)
    return O


def solve_c444b776(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = argmin(x2, size)
    x4 = backdrop(x3)
    x5 = toobject(x4, I)
    x6 = normalize(x5)
    x7 = lbind(shift, x6)
    x8 = compose(x7, ulcorner)
    x9 = remove(x3, x2)
    x10 = mapply(x8, x9)
    O = paint(I, x10)
    return O


def solve_4ff4c9da(I):
    x1 = objects(I, T, T, F)
    x2 = colorfilter(x1, EIGHT)
    x3 = colorfilter(x1, ONE)
    x4 = colorfilter(x1, TWO)
    x5 = combine(x3, x4)
    x6 = compose(toindices, normalize)
    x7 = apply(x6, x2)
    x8 = rbind(contained, x7)
    x9 = compose(x8, x6)
    x10 = mfilter(x5, x9)
    O = fill(I, EIGHT, x10)
    return O


def solve_6f473927(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = colorcount(x1, TWO)
    x4 = colorcount(x2, TWO)
    x5 = greater(x4, x3)
    x6 = vmirror(I)
    x7 = replace(x6, TWO, EIGHT)
    x8 = switch(x7, ZERO, EIGHT)
    x9 = branch(x5, I, x8)
    x10 = branch(x5, x8, I)
    O = hconcat(x9, x10)
    return O


def solve_e69241bd(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = colorfilter(x1, FIVE)
    x4 = combine(x2, x3)
    x5 = difference(x1, x4)
    x6 = lbind(lbind, adjacent)
    x7 = lbind(mfilter, x2)
    x8 = compose(x7, x6)
    x9 = fork(recolor, color, x8)
    x10 = mapply(x9, x5)
    O = paint(I, x10)
    return O


def solve_45737921(I):
    x1 = objects(I, F, F, T)
    x2 = rbind(subgrid, I)
    x3 = fork(ofcolor, identity, mostcolor)
    x4 = fork(ofcolor, identity, leastcolor)
    x5 = fork(recolor, leastcolor, x3)
    x6 = fork(recolor, mostcolor, x4)
    x7 = fork(combine, x5, x6)
    x8 = compose(x7, x2)
    x9 = fork(shift, x8, ulcorner)
    x10 = mapply(x9, x1)
    O = paint(I, x10)
    return O


def solve_c7d4e6ad(I):
    x1 = ofcolor(I, FIVE)
    x2 = replace(I, FIVE, ZERO)
    x3 = fgpartition(x2)
    x4 = merge(x3)
    x5 = rbind(shoot, RIGHT)
    x6 = compose(x5, last)
    x7 = fork(recolor, first, x6)
    x8 = mapply(x7, x4)
    x9 = paint(I, x8)
    x10 = ofcolor(I, ZERO)
    O = fill(x9, ZERO, x10)
    return O


def solve_a04b2602(I):
    x1 = ofcolor(I, TWO)
    x2 = objects(I, T, T, F)
    x3 = colorfilter(x2, THREE)
    x4 = mapply(backdrop, x3)
    x5 = cover(I, x4)
    x6 = ofcolor(x5, TWO)
    x7 = difference(x1, x6)
    x8 = compose(outbox, initset)
    x9 = mapply(x8, x7)
    x10 = fill(I, ONE, x9)
    O = fill(x10, TWO, x7)
    return O


def solve_009d5c81(I):
    x1 = objects(I, T, T, T)
    x2 = argmin(x1, size)
    x3 = cover(I, x2)
    x4 = colorcount(I, ONE)
    x5 = equality(x4, FIVE)
    x6 = center(x2)
    x7 = index(I, x6)
    x8 = equality(x7, ZERO)
    x9 = branch(x5, TWO, THREE)
    x10 = branch(x8, SEVEN, x9)
    O = replace(x3, EIGHT, x10)
    return O


def solve_575b1a71(I):
    x1 = ofcolor(I, ZERO)
    x2 = apply(last, x1)
    x3 = order(x2, identity)
    x4 = interval(ONE, FIVE, ONE)
    x5 = pair(x3, x4)
    x6 = lbind(matcher, last)
    x7 = lbind(sfilter, x1)
    x8 = chain(x7, x6, first)
    x9 = fork(recolor, last, x8)
    x10 = mapply(x9, x5)
    O = paint(I, x10)
    return O


def solve_c074846d(I):
    x1 = rot90(I)
    x2 = fgpartition(x1)
    x3 = merge(x2)
    x4 = rbind(ofcolor, FIVE)
    x5 = compose(first, x4)
    x6 = x5(I)
    x7 = x5(x1)
    x8 = subtract(x6, x7)
    x9 = replace(I, TWO, THREE)
    x10 = shift(x3, x8)
    O = paint(x9, x10)
    return O


def solve_2a5f8217(I):
    x1 = objects(I, T, T, T)
    x2 = colorfilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = compose(toindices, normalize)
    x5 = lbind(matcher, x4)
    x6 = compose(x5, x4)
    x7 = lbind(extract, x3)
    x8 = chain(color, x7, x6)
    x9 = fork(recolor, x8, identity)
    x10 = mapply(x9, x2)
    O = paint(I, x10)
    return O


def solve_817e6c09(I):
    x1 = vmirror(I)
    x2 = objects(x1, T, F, T)
    x3 = order(x2, leftmost)
    x4 = size(x3)
    x5 = interval(ZERO, x4, ONE)
    x6 = pair(x5, x3)
    x7 = compose(even, first)
    x8 = sfilter(x6, x7)
    x9 = mapply(last, x8)
    x10 = fill(x1, EIGHT, x9)
    O = vmirror(x10)
    return O


def solve_981571dc(I):
    x1 = dmirror(I)
    x2 = papply(pair, I, x1)
    x3 = lbind(apply, maximum)
    x4 = apply(x3, x2)
    x5 = matcher(first, ZERO)
    x6 = compose(flip, x5)
    x7 = rot180(x4)
    x8 = asobject(x7)
    x9 = shift(x8, TWO_BY_TWO)
    x10 = sfilter(x9, x6)
    O = paint(x4, x10)
    return O


def solve_2c737e39(I):
    x1 = objects(I, F, F, T)
    x2 = argmin(x1, size)
    x3 = center(x2)
    x4 = other(x1, x2)
    x5 = matcher(first, FIVE)
    x6 = extract(x4, x5)
    x7 = last(x6)
    x8 = subtract(x3, x7)
    x9 = shift(x4, x8)
    x10 = paint(I, x9)
    O = cover(x10, x2)
    return O


def solve_ed74f2f2(I):
    x1 = righthalf(I)
    x2 = lefthalf(I)
    x3 = compress(x1)
    x4 = compress(x2)
    x5 = index(x4, ORIGIN)
    x6 = index(x4, ZERO_BY_TWO)
    x7 = equality(x5, ZERO)
    x8 = equality(x6, FIVE)
    x9 = branch(x7, THREE, ONE)
    x10 = branch(x8, x9, TWO)
    O = replace(x3, FIVE, x10)
    return O


def solve_8597cfd7(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = colorcount(x1, TWO)
    x4 = colorcount(x2, TWO)
    x5 = colorcount(x1, FOUR)
    x6 = colorcount(x2, FOUR)
    x7 = subtract(x4, x3)
    x8 = subtract(x6, x5)
    x9 = greater(x7, x8)
    x10 = branch(x9, TWO, FOUR)
    O = canvas(x10, TWO_BY_TWO)
    return O


def solve_8fbca751(I):
    x1 = astuple(FOUR, FOUR)
    x2 = canvas(ZERO, x1)
    x3 = asobject(x2)
    x4 = occurrences(I, x3)
    x5 = replace(I, ZERO, TWO)
    x6 = lbind(shift, x3)
    x7 = mapply(x6, x4)
    x8 = fill(x5, ZERO, x7)
    x9 = frontiers(x8)
    x10 = merge(x9)
    O = fill(x8, ZERO, x10)
    return O


def solve_a68b268e(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = lefthalf(x1)
    x4 = righthalf(x1)
    x5 = lefthalf(x2)
    x6 = righthalf(x2)
    x7 = ofcolor(x4, FOUR)
    x8 = ofcolor(x3, SEVEN)
    x9 = ofcolor(x5, EIGHT)
    x10 = fill(x6, EIGHT, x9)
    x11 = fill(x10, FOUR, x7)
    O = fill(x11, SEVEN, x8)
    return O


def solve_913fb3ed(I):
    x1 = lbind(ofcolor, I)
    x2 = lbind(mapply, neighbors)
    x3 = chain(x2, x1, last)
    x4 = fork(recolor, first, x3)
    x5 = astuple(SIX, THREE)
    x6 = astuple(FOUR, EIGHT)
    x7 = astuple(ONE, TWO)
    x8 = initset(x5)
    x9 = insert(x6, x8)
    x10 = insert(x7, x9)
    x11 = mapply(x4, x10)
    O = paint(I, x11)
    return O


def solve_beb8660c(I):
    x1 = shape(I)
    x2 = objects(I, T, F, T)
    x3 = compose(invert, size)
    x4 = order(x2, x3)
    x5 = apply(normalize, x4)
    x6 = size(x5)
    x7 = interval(ZERO, x6, ONE)
    x8 = apply(toivec, x7)
    x9 = mpapply(shift, x5, x8)
    x10 = canvas(ZERO, x1)
    x11 = paint(x10, x9)
    O = rot180(x11)
    return O


def solve_0962bcdd(I):
    x1 = leastcolor(I)
    x2 = replace(I, ZERO, x1)
    x3 = leastcolor(x2)
    x4 = ofcolor(I, x3)
    x5 = mapply(dneighbors, x4)
    x6 = fill(I, x3, x5)
    x7 = objects(x6, F, T, T)
    x8 = fork(connect, ulcorner, lrcorner)
    x9 = fork(connect, llcorner, urcorner)
    x10 = fork(combine, x8, x9)
    x11 = mapply(x10, x7)
    O = fill(x6, x1, x11)
    return O


def solve_52fd389e(I):
    x1 = objects(I, F, F, T)
    x2 = fork(multiply, height, width)
    x3 = rbind(colorcount, FOUR)
    x4 = fork(subtract, x2, x3)
    x5 = fork(subtract, ulcorner, x4)
    x6 = fork(add, lrcorner, x4)
    x7 = compose(initset, x6)
    x8 = fork(insert, x5, x7)
    x9 = compose(backdrop, x8)
    x10 = fork(recolor, leastcolor, x9)
    x11 = mapply(x10, x1)
    O = underpaint(I, x11)
    return O


def solve_ce039d91(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = vmirror(x2)
    x4 = ofcolor(x1, FIVE)
    x5 = ofcolor(x3, FIVE)
    x6 = intersection(x4, x5)
    x7 = fill(I, ONE, x6)
    x8 = vmirror(x6)
    x9 = width(x8)
    x10 = tojvec(x9)
    x11 = shift(x8, x10)
    O = fill(x7, ONE, x11)
    return O


def solve_281123b4(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = lefthalf(x1)
    x4 = righthalf(x1)
    x5 = lefthalf(x2)
    x6 = righthalf(x2)
    x7 = ofcolor(x3, EIGHT)
    x8 = ofcolor(x5, NINE)
    x9 = ofcolor(x6, FOUR)
    x10 = fill(x4, EIGHT, x7)
    x11 = fill(x10, FOUR, x9)
    O = fill(x11, NINE, x8)
    return O


def solve_47996f11(I):
    x1 = replace(I, SIX, ZERO)
    x2 = lbind(apply, maximum)
    x3 = dmirror(x1)
    x4 = papply(pair, x1, x3)
    x5 = apply(x2, x4)
    x6 = cmirror(x5)
    x7 = asobject(x6)
    x8 = shift(x7, TWO_BY_TWO)
    x9 = matcher(first, ZERO)
    x10 = compose(flip, x9)
    x11 = sfilter(x8, x10)
    O = paint(x5, x11)
    return O


def solve_c92b942c(I):
    x1 = repeat(I, THREE)
    x2 = merge(x1)
    x3 = hconcat(x2, x2)
    x4 = hconcat(x3, x2)
    x5 = leastcolor(x4)
    x6 = ofcolor(x4, x5)
    x7 = mapply(hfrontier, x6)
    x8 = underfill(x4, ONE, x7)
    x9 = shift(x6, NEG_UNITY)
    x10 = shift(x6, UNITY)
    x11 = combine(x9, x10)
    O = underfill(x8, THREE, x11)
    return O


def solve_90347967(I):
    x1 = compose(merge, fgpartition)
    x2 = x1(I)
    x3 = rot180(I)
    x4 = x1(x3)
    x5 = cover(I, x2)
    x6 = rbind(ofcolor, FIVE)
    x7 = compose(first, x6)
    x8 = x7(I)
    x9 = x7(x3)
    x10 = subtract(x8, x9)
    x11 = shift(x4, x10)
    O = paint(x5, x11)
    return O


def solve_c35c1b4c(I):
    x1 = mostcolor(I)
    x2 = ofcolor(I, x1)
    x3 = vmirror(x2)
    x4 = width(I)
    x5 = decrement(x4)
    x6 = rightmost(x3)
    x7 = leftmost(x3)
    x8 = subtract(x5, x6)
    x9 = subtract(x8, x7)
    x10 = tojvec(x9)
    x11 = shift(x3, x10)
    O = fill(I, x1, x11)
    return O


def solve_85b81ff1(I):
    x1 = objects(I, T, T, F)
    x2 = colorfilter(x1, ZERO)
    x3 = difference(x1, x2)
    x4 = order(x3, size)
    x5 = shape(I)
    x6 = canvas(ZERO, x5)
    x7 = double(TEN)
    x8 = interval(ZERO, x7, THREE)
    x9 = apply(tojvec, x8)
    x10 = apply(normalize, x4)
    x11 = mpapply(shift, x10, x9)
    O = paint(x6, x11)
    return O


def solve_3a301edc(I):
    x1 = objects(I, T, T, T)
    x2 = argmin(x1, width)
    x3 = argmax(x1, width)
    x4 = width(x2)
    x5 = portrait(x2)
    x6 = branch(x5, decrement, identity)
    x7 = x6(x4)
    x8 = power(outbox, x7)
    x9 = x8(x3)
    x10 = backdrop(x9)
    x11 = color(x2)
    O = underfill(I, x11, x10)
    return O


def solve_e99362f0(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = tophalf(x1)
    x4 = tophalf(x2)
    x5 = bottomhalf(x1)
    x6 = bottomhalf(x2)
    x7 = ofcolor(x4, NINE)
    x8 = fill(x5, NINE, x7)
    x9 = ofcolor(x3, SEVEN)
    x10 = fill(x8, SEVEN, x9)
    x11 = ofcolor(x6, EIGHT)
    O = fill(x10, EIGHT, x11)
    return O


def solve_7ee1c6ea(I):
    x1 = palette(I)
    x2 = remove(FIVE, x1)
    x3 = remove(ZERO, x2)
    x4 = first(x3)
    x5 = last(x3)
    x6 = ofcolor(I, FIVE)
    x7 = subgrid(x6, I)
    x8 = switch(x7, x4, x5)
    x9 = asobject(x8)
    x10 = ulcorner(x6)
    x11 = shift(x9, x10)
    O = paint(I, x11)
    return O


def solve_f5c89df1(I):
    x1 = ofcolor(I, THREE)
    x2 = ofcolor(I, EIGHT)
    x3 = ofcolor(I, TWO)
    x4 = combine(x1, x2)
    x5 = combine(x4, x3)
    x6 = cover(I, x5)
    x7 = center(x1)
    x8 = rbind(subtract, x7)
    x9 = lbind(shift, x2)
    x10 = compose(x9, x8)
    x11 = mapply(x10, x3)
    O = fill(x6, EIGHT, x11)
    return O


def solve_bf32578f(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = prapply(connect, x2, x2)
    x4 = merge(x3)
    x5 = difference(x4, x2)
    x6 = vmirror(x5)
    x7 = width(x5)
    x8 = tojvec(x7)
    x9 = shift(x6, x8)
    x10 = combine(x5, x9)
    x11 = cover(I, x2)
    O = fill(x11, x1, x10)
    return O


def solve_b4a43f3b(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = ofcolor(x2, TWO)
    x4 = downscale(x1, TWO)
    x5 = asobject(x4)
    x6 = cover(x2, x3)
    x7 = upscale(x6, THREE)
    x8 = lbind(multiply, THREE)
    x9 = apply(x8, x3)
    x10 = lbind(shift, x5)
    x11 = mapply(x10, x9)
    O = paint(x7, x11)
    return O


def solve_25094a63(I):
    x1 = objects(I, T, F, F)
    x2 = rbind(greater, TEN)
    x3 = compose(x2, size)
    x4 = mfilter(x1, x3)
    x5 = fill(I, ZERO, x4)
    x6 = multiply(UNITY, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = asobject(x7)
    x9 = occurrences(x5, x8)
    x10 = lbind(shift, x8)
    x11 = mapply(x10, x9)
    O = fill(I, FOUR, x11)
    return O


def solve_ea9794b1(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = lefthalf(x1)
    x4 = righthalf(x1)
    x5 = lefthalf(x2)
    x6 = righthalf(x2)
    x7 = ofcolor(x6, EIGHT)
    x8 = ofcolor(x5, NINE)
    x9 = ofcolor(x4, THREE)
    x10 = fill(x3, EIGHT, x7)
    x11 = fill(x10, NINE, x8)
    O = fill(x11, THREE, x9)
    return O


def solve_070dd51e(I):
    x1 = fgpartition(I)
    x2 = compose(last, first)
    x3 = compose(last, last)
    x4 = fork(connect, x2, x3)
    x5 = fork(recolor, color, x4)
    x6 = matcher(height, ONE)
    x7 = sfilter(x1, x6)
    x8 = mapply(x5, x7)
    x9 = paint(I, x8)
    x10 = difference(x1, x7)
    x11 = mapply(x5, x10)
    O = paint(x9, x11)
    return O


def solve_15113be4(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = subgrid(x2, I)
    x4 = downscale(x3, TWO)
    x5 = ofcolor(x4, x1)
    x6 = recolor(ONE, x5)
    x7 = lbind(shift, x6)
    x8 = occurrences(I, x6)
    x9 = apply(x7, x8)
    x10 = compose(even, uppermost)
    x11 = mfilter(x9, x10)
    O = fill(I, x1, x11)
    return O


def solve_aa300dc3(I):
    x1 = ofcolor(I, ZERO)
    x2 = prapply(connect, x1, x1)
    x3 = fork(multiply, height, width)
    x4 = valmax(x2, x3)
    x5 = matcher(x3, x4)
    x6 = sfilter(x2, x5)
    x7 = lbind(mapply, dneighbors)
    x8 = rbind(toobject, I)
    x9 = rbind(colorcount, FIVE)
    x10 = chain(x9, x8, x7)
    x11 = argmin(x6, x10)
    O = fill(I, EIGHT, x11)
    return O


def solve_c8b7cc0f(I):
    x1 = ofcolor(I, ONE)
    x2 = subgrid(x1, I)
    x3 = trim(x2)
    x4 = leastcolor(x3)
    x5 = colorcount(x3, x4)
    x6 = repeat(x4, x5)
    x7 = subtract(NINE, x5)
    x8 = repeat(ZERO, x7)
    x9 = combine(x6, x8)
    x10 = repeat(x9, ONE)
    x11 = hsplit(x10, THREE)
    O = merge(x11)
    return O


def solve_e41c6fd3(I):
    x1 = fgpartition(I)
    x2 = matcher(color, EIGHT)
    x3 = extract(x1, x2)
    x4 = remove(x3, x1)
    x5 = uppermost(x3)
    x6 = merge(x4)
    x7 = cover(I, x6)
    x8 = lbind(subtract, x5)
    x9 = chain(toivec, x8, uppermost)
    x10 = fork(shift, identity, x9)
    x11 = mapply(x10, x4)
    O = paint(x7, x11)
    return O


def solve_31adaf00(I):
    x1 = canvas(ZERO, THREE_BY_THREE)
    x2 = asobject(x1)
    x3 = occurrences(I, x2)
    x4 = lbind(shift, x2)
    x5 = mapply(x4, x3)
    x6 = fill(I, ONE, x5)
    x7 = canvas(ZERO, TWO_BY_TWO)
    x8 = asobject(x7)
    x9 = occurrences(x6, x8)
    x10 = lbind(shift, x8)
    x11 = mapply(x10, x9)
    O = fill(x6, ONE, x11)
    return O


def solve_33b52de3(I):
    x1 = ofcolor(I, ZERO)
    x2 = objects(I, F, F, T)
    x3 = colorfilter(x2, FIVE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = upscale(x5, FOUR)
    x7 = normalize(x6)
    x8 = merge(x3)
    x9 = ulcorner(x8)
    x10 = shift(x7, x9)
    x11 = paint(I, x10)
    O = fill(x11, ZERO, x1)
    return O


def solve_be03b35f(I):
    x1 = tophalf(I)
    x2 = lefthalf(x1)
    x3 = righthalf(x1)
    x4 = bottomhalf(I)
    x5 = lefthalf(x4)
    x6 = initset(x2)
    x7 = insert(x3, x6)
    x8 = insert(x5, x7)
    x9 = apply(rot90, x8)
    x10 = combine(x8, x9)
    x11 = difference(x10, x8)
    O = first(x11)
    return O


def solve_95990924(I):
    x1 = objects(I, T, F, T)
    x2 = apply(ulcorner, x1)
    x3 = apply(urcorner, x1)
    x4 = apply(llcorner, x1)
    x5 = apply(lrcorner, x1)
    x6 = shift(x2, NEG_UNITY)
    x7 = shift(x3, UP_RIGHT)
    x8 = shift(x4, DOWN_LEFT)
    x9 = shift(x5, UNITY)
    x10 = fill(I, ONE, x6)
    x11 = fill(x10, TWO, x7)
    x12 = fill(x11, THREE, x8)
    O = fill(x12, FOUR, x9)
    return O


def solve_db3e9e38(I):
    x1 = ofcolor(I, SEVEN)
    x2 = lrcorner(x1)
    x3 = shoot(x2, UP_RIGHT)
    x4 = shoot(x2, NEG_UNITY)
    x5 = combine(x3, x4)
    x6 = rbind(shoot, UP)
    x7 = mapply(x6, x5)
    x8 = last(x2)
    x9 = rbind(subtract, x8)
    x10 = chain(even, x9, last)
    x11 = fill(I, EIGHT, x7)
    x12 = sfilter(x7, x10)
    O = fill(x11, SEVEN, x12)
    return O


def solve_d43fd935(I):
    x1 = objects(I, T, F, T)
    x2 = ofcolor(I, THREE)
    x3 = sizefilter(x1, ONE)
    x4 = rbind(vmatching, x2)
    x5 = rbind(hmatching, x2)
    x6 = fork(either, x4, x5)
    x7 = sfilter(x3, x6)
    x8 = rbind(gravitate, x2)
    x9 = fork(add, center, x8)
    x10 = fork(connect, center, x9)
    x11 = fork(recolor, color, x10)
    x12 = mapply(x11, x7)
    O = paint(I, x12)
    return O


def solve_05269061(I):
    x1 = objects(I, T, T, T)
    x2 = neighbors(ORIGIN)
    x3 = mapply(neighbors, x2)
    x4 = rbind(multiply, THREE)
    x5 = apply(x4, x3)
    x6 = merge(x1)
    x7 = lbind(shift, x6)
    x8 = mapply(x7, x5)
    x9 = shift(x8, UP_RIGHT)
    x10 = shift(x8, DOWN_LEFT)
    x11 = paint(I, x8)
    x12 = paint(x11, x9)
    O = paint(x12, x10)
    return O


def solve_e509e548(I):
    x1 = objects(I, T, F, T)
    x2 = rbind(subgrid, I)
    x3 = chain(palette, trim, x2)
    x4 = lbind(contained, THREE)
    x5 = compose(x4, x3)
    x6 = fork(add, height, width)
    x7 = compose(decrement, x6)
    x8 = fork(equality, size, x7)
    x9 = mfilter(x1, x5)
    x10 = mfilter(x1, x8)
    x11 = replace(I, THREE, SIX)
    x12 = fill(x11, TWO, x9)
    O = fill(x12, ONE, x10)
    return O


def solve_e73095fd(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = fork(equality, toindices, backdrop)
    x4 = sfilter(x2, x3)
    x5 = lbind(mapply, dneighbors)
    x6 = chain(x5, corners, outbox)
    x7 = fork(difference, x6, outbox)
    x8 = ofcolor(I, FIVE)
    x9 = rbind(intersection, x8)
    x10 = matcher(size, ZERO)
    x11 = chain(x10, x9, x7)
    x12 = mfilter(x4, x11)
    O = fill(I, FOUR, x12)
    return O


def solve_3631a71a(I):
    x1 = shape(I)
    x2 = replace(I, NINE, ZERO)
    x3 = lbind(apply, maximum)
    x4 = dmirror(x2)
    x5 = papply(pair, x2, x4)
    x6 = apply(x3, x5)
    x7 = subtract(x1, TWO_BY_TWO)
    x8 = crop(x6, TWO_BY_TWO, x7)
    x9 = vmirror(x8)
    x10 = objects(x9, T, F, T)
    x11 = merge(x10)
    x12 = shift(x11, TWO_BY_TWO)
    O = paint(x6, x12)
    return O


def solve_11e1fe23(I):
    x1 = objects(I, T, T, T)
    x2 = merge(x1)
    x3 = center(x2)
    x4 = initset(x3)
    x5 = fill(I, FIVE, x4)
    x6 = compress(x5)
    x7 = asobject(x6)
    x8 = ulcorner(x2)
    x9 = chain(decrement, halve, shape)
    x10 = x9(x2)
    x11 = add(x10, x8)
    x12 = shift(x7, x11)
    O = paint(I, x12)
    return O


def solve_62b74c02(I):
    x1 = width(I)
    x2 = objects(I, F, T, T)
    x3 = first(x2)
    x4 = subgrid(x3, I)
    x5 = height(x4)
    x6 = astuple(x5, ONE)
    x7 = crop(x4, ORIGIN, x6)
    x8 = width(x4)
    x9 = double(x8)
    x10 = subtract(x1, x9)
    x11 = hupscale(x7, x10)
    x12 = hconcat(x4, x11)
    O = hconcat(x12, x4)
    return O


def solve_af24b4cc(I):
    x1 = objects(I, F, T, T)
    x2 = fork(recolor, mostcolor, identity)
    x3 = mapply(x2, x1)
    x4 = paint(I, x3)
    x5 = compress(x4)
    x6 = downscale(x5, TWO)
    x7 = astuple(TWO, THREE)
    x8 = crop(x6, DOWN, x7)
    x9 = add(x7, TWO_BY_TWO)
    x10 = asobject(x8)
    x11 = shift(x10, UNITY)
    x12 = canvas(ZERO, x9)
    O = paint(x12, x11)
    return O


def solve_e9b4f6fc(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, size)
    x3 = subgrid(x2, I)
    x4 = cover(I, x2)
    x5 = rbind(add, LEFT)
    x6 = lbind(ofcolor, x4)
    x7 = chain(x5, first, x6)
    x8 = lbind(index, x4)
    x9 = chain(x8, x7, color)
    x10 = fork(recolor, x9, identity)
    x11 = fgpartition(x3)
    x12 = mapply(x10, x11)
    O = paint(x3, x12)
    return O


def solve_9c56f360(I):
    x1 = canvas(ZERO, UNITY)
    x2 = canvas(THREE, UNITY)
    x3 = hconcat(x1, x2)
    x4 = hconcat(x2, x1)
    x5 = asobject(x3)
    x6 = asobject(x4)
    x7 = lbind(shift, x6)
    x8 = rbind(occurrences, x5)
    x9 = lbind(mapply, x7)
    x10 = compose(x9, x8)
    x11 = fork(paint, identity, x10)
    x12 = power(x11, TEN)
    O = x12(I)
    return O


def solve_92e50de0(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = shape(x2)
    x4 = chain(increment, increment, double)
    x5 = x4(x3)
    x6 = neighbors(ORIGIN)
    x7 = mapply(neighbors, x6)
    x8 = mapply(neighbors, x7)
    x9 = lbind(shift, x2)
    x10 = rbind(multiply, x5)
    x11 = apply(x10, x8)
    x12 = mapply(x9, x11)
    O = fill(I, x1, x12)
    return O


def solve_0d87d2a6(I):
    x1 = ofcolor(I, ONE)
    x2 = matcher(first, ZERO)
    x3 = matcher(last, ZERO)
    x4 = sfilter(x1, x2)
    x5 = sfilter(x1, x3)
    x6 = mapply(vfrontier, x4)
    x7 = mapply(hfrontier, x5)
    x8 = combine(x6, x7)
    x9 = fill(I, ONE, x8)
    x10 = objects(x9, T, F, T)
    x11 = lbind(adjacent, x8)
    x12 = mfilter(x10, x11)
    O = fill(x9, ONE, x12)
    return O


def solve_d94c3b52(I):
    x1 = objects(I, T, T, T)
    x2 = ofcolor(I, EIGHT)
    x3 = normalize(x2)
    x4 = matcher(normalize, x3)
    x5 = apply(toindices, x1)
    x6 = mfilter(x5, x4)
    x7 = fill(I, EIGHT, x6)
    x8 = prapply(connect, x6, x6)
    x9 = fork(either, vline, hline)
    x10 = mfilter(x8, x9)
    x11 = ofcolor(x7, ONE)
    x12 = intersection(x10, x11)
    O = fill(x7, SEVEN, x12)
    return O


def solve_8e1813be(I):
    x1 = replace(I, FIVE, ZERO)
    x2 = objects(x1, T, T, T)
    x3 = first(x2)
    x4 = vline(x3)
    x5 = branch(x4, dmirror, identity)
    x6 = x5(x1)
    x7 = objects(x6, T, T, T)
    x8 = order(x7, uppermost)
    x9 = apply(color, x8)
    x10 = dedupe(x9)
    x11 = size(x10)
    x12 = rbind(repeat, x11)
    x13 = apply(x12, x10)
    O = x5(x13)
    return O


def solve_93b581b8(I):
    x1 = objects(I, F, F, T)
    x2 = first(x1)
    x3 = dmirror(x2)
    x4 = cmirror(x3)
    x5 = upscale(x4, THREE)
    x6 = astuple(NEG_TWO, NEG_TWO)
    x7 = shift(x5, x6)
    x8 = underpaint(I, x7)
    x9 = toindices(x2)
    x10 = mapply(vfrontier, x9)
    x11 = mapply(hfrontier, x9)
    x12 = combine(x10, x11)
    x13 = fill(x8, ZERO, x12)
    O = paint(x13, x2)
    return O


def solve_91714a58(I):
    x1 = shape(I)
    x2 = asindices(I)
    x3 = objects(I, T, F, T)
    x4 = argmax(x3, size)
    x5 = mostcolor(x4)
    x6 = canvas(ZERO, x1)
    x7 = paint(x6, x4)
    x8 = rbind(toobject, x7)
    x9 = rbind(colorcount, x5)
    x10 = chain(x9, x8, neighbors)
    x11 = lbind(greater, THREE)
    x12 = compose(x11, x10)
    x13 = sfilter(x2, x12)
    O = fill(x7, ZERO, x13)
    return O


def solve_97999447(I):
    x1 = objects(I, T, F, T)
    x2 = apply(toindices, x1)
    x3 = rbind(shoot, RIGHT)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x1)
    x7 = paint(I, x6)
    x8 = interval(ZERO, FIVE, ONE)
    x9 = apply(double, x8)
    x10 = apply(increment, x9)
    x11 = apply(tojvec, x10)
    x12 = prapply(shift, x2, x11)
    x13 = merge(x12)
    O = fill(x7, FIVE, x13)
    return O


def solve_7447852a(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = compose(last, center)
    x4 = order(x2, x3)
    x5 = size(x4)
    x6 = interval(ZERO, x5, THREE)
    x7 = rbind(contained, x6)
    x8 = compose(x7, last)
    x9 = interval(ZERO, x5, ONE)
    x10 = pair(x4, x9)
    x11 = sfilter(x10, x8)
    x12 = mapply(first, x11)
    x13 = recolor(FOUR, x12)
    O = paint(I, x13)
    return O


def solve_bc1d5164(I):
    x1 = leastcolor(I)
    x2 = crop(I, ORIGIN, THREE_BY_THREE)
    x3 = crop(I, TWO_BY_ZERO, THREE_BY_THREE)
    x4 = tojvec(FOUR)
    x5 = crop(I, x4, THREE_BY_THREE)
    x6 = astuple(TWO, FOUR)
    x7 = crop(I, x6, THREE_BY_THREE)
    x8 = canvas(ZERO, THREE_BY_THREE)
    x9 = rbind(ofcolor, x1)
    x10 = astuple(x2, x3)
    x11 = astuple(x5, x7)
    x12 = combine(x10, x11)
    x13 = mapply(x9, x12)
    O = fill(x8, x1, x13)
    return O


def solve_a65b410d(I):
    x1 = ofcolor(I, TWO)
    x2 = urcorner(x1)
    x3 = add(x2, UP_RIGHT)
    x4 = add(x2, DOWN_LEFT)
    x5 = shoot(x3, UP_RIGHT)
    x6 = shoot(x4, DOWN_LEFT)
    x7 = fill(I, THREE, x5)
    x8 = fill(x7, ONE, x6)
    x9 = objects(x8, T, F, T)
    x10 = rbind(shoot, LEFT)
    x11 = compose(x10, urcorner)
    x12 = fork(recolor, color, x11)
    x13 = mapply(x12, x9)
    O = paint(x8, x13)
    return O


def solve_a61ba2ce(I):
    x1 = objects(I, T, F, T)
    x2 = lbind(index, I)
    x3 = matcher(x2, ZERO)
    x4 = lbind(extract, x1)
    x5 = rbind(subgrid, I)
    x6 = lbind(compose, x3)
    x7 = chain(x5, x4, x6)
    x8 = x7(ulcorner)
    x9 = x7(urcorner)
    x10 = x7(llcorner)
    x11 = x7(lrcorner)
    x12 = hconcat(x11, x10)
    x13 = hconcat(x9, x8)
    O = vconcat(x12, x13)
    return O


def solve_ce602527(I):
    x1 = vmirror(I)
    x2 = fgpartition(x1)
    x3 = order(x2, size)
    x4 = last(x3)
    x5 = remove(x4, x3)
    x6 = compose(toindices, normalize)
    x7 = rbind(upscale, TWO)
    x8 = chain(toindices, x7, normalize)
    x9 = x6(x4)
    x10 = rbind(intersection, x9)
    x11 = chain(size, x10, x8)
    x12 = argmax(x5, x11)
    x13 = subgrid(x12, x1)
    O = vmirror(x13)
    return O


def solve_9edfc990(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = ofcolor(I, ONE)
    x4 = rbind(adjacent, x3)
    x5 = mfilter(x2, x4)
    x6 = recolor(ONE, x5)
    x7 = paint(I, x6)
    x8 = add(NINE, FOUR)
    x9 = astuple(SIX, x8)
    x10 = initset(x9)
    x11 = fill(x7, ZERO, x10)
    x12 = index(x7, x9)
    x13 = equality(x12, ONE)
    O = branch(x13, x11, x7)
    return O


def solve_1bfc4729(I):
    x1 = asindices(I)
    x2 = tophalf(I)
    x3 = bottomhalf(I)
    x4 = leastcolor(x2)
    x5 = leastcolor(x3)
    x6 = ofcolor(x2, x4)
    x7 = first(x6)
    x8 = hfrontier(x7)
    x9 = box(x1)
    x10 = combine(x8, x9)
    x11 = fill(x2, x4, x10)
    x12 = hmirror(x11)
    x13 = replace(x12, x4, x5)
    O = vconcat(x11, x13)
    return O


def solve_93b4f4b3(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = objects(x1, T, T, T)
    x4 = objects(x2, T, T, T)
    x5 = compose(toindices, normalize)
    x6 = rbind(compose, x5)
    x7 = lbind(rbind, equality)
    x8 = chain(x6, x7, x5)
    x9 = lbind(extract, x4)
    x10 = compose(x9, x8)
    x11 = compose(normalize, x10)
    x12 = fork(shift, x11, ulcorner)
    x13 = mapply(x12, x3)
    O = paint(x1, x13)
    return O


def solve_00dbd492(I):
    x1 = objects(I, T, T, F)
    x2 = rbind(bordering, I)
    x3 = compose(flip, x2)
    x4 = sfilter(x1, x3)
    x5 = colorfilter(x4, ZERO)
    x6 = matcher(width, THREE)
    x7 = matcher(width, FIVE)
    x8 = matcher(width, SEVEN)
    x9 = mfilter(x5, x6)
    x10 = mfilter(x5, x7)
    x11 = mfilter(x5, x8)
    x12 = fill(I, EIGHT, x9)
    x13 = fill(x12, FOUR, x10)
    O = fill(x13, THREE, x11)
    return O


def solve_292dd178(I):
    x1 = objects(I, T, T, T)
    x2 = mapply(delta, x1)
    x3 = fill(I, TWO, x2)
    x4 = fork(intersection, delta, box)
    x5 = compose(first, x4)
    x6 = lbind(index, x3)
    x7 = matcher(x6, TWO)
    x8 = compose(dneighbors, x5)
    x9 = rbind(extract, x7)
    x10 = compose(x9, x8)
    x11 = fork(subtract, x5, x10)
    x12 = fork(shoot, x5, x11)
    x13 = mapply(x12, x1)
    O = fill(x3, TWO, x13)
    return O


def solve_18419cfa(I):
    x1 = objects(I, T, T, F)
    x2 = colorfilter(x1, ZERO)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = rbind(subgrid, I)
    x6 = rbind(cellwise, TWO)
    x7 = compose(vmirror, x5)
    x8 = fork(x6, x5, x7)
    x9 = compose(hmirror, x8)
    x10 = fork(x6, x8, x9)
    x11 = compose(asobject, x10)
    x12 = fork(shift, x11, ulcorner)
    x13 = mapply(x12, x4)
    O = paint(I, x13)
    return O


def solve_0934a4d8(I):
    x1 = matcher(first, EIGHT)
    x2 = compose(flip, x1)
    x3 = rbind(sfilter, x2)
    x4 = compose(x3, asobject)
    x5 = vmirror(I)
    x6 = hmirror(I)
    x7 = x4(x5)
    x8 = x4(x6)
    x9 = shift(x7, ZERO_BY_TWO)
    x10 = shift(x8, TWO_BY_ZERO)
    x11 = paint(I, x9)
    x12 = paint(x11, x10)
    x13 = ofcolor(I, EIGHT)
    O = subgrid(x13, x12)
    return O


def solve_692cd3b6(I):
    x1 = ofcolor(I, ZERO)
    x2 = objects(I, F, T, T)
    x3 = mapply(delta, x2)
    x4 = mapply(dneighbors, x3)
    x5 = intersection(x4, x1)
    x6 = fork(position, delta, identity)
    x7 = lbind(rbind, shoot)
    x8 = compose(x7, x6)
    x9 = fork(mapply, x8, toindices)
    x10 = mapply(x9, x2)
    x11 = backdrop(x5)
    x12 = combine(x3, x11)
    x13 = difference(x12, x10)
    O = underfill(I, FOUR, x13)
    return O


def solve_2c0b0aff(I):
    x1 = shape(I)
    x2 = canvas(ZERO, x1)
    x3 = vconcat(I, x2)
    x4 = objects(x3, F, F, T)
    x5 = matcher(size, FIVE)
    x6 = rbind(subgrid, I)
    x7 = rbind(objects, T)
    x8 = rbind(x7, F)
    x9 = rbind(x8, T)
    x10 = rbind(sfilter, x5)
    x11 = chain(size, x10, x9)
    x12 = compose(x11, x6)
    x13 = argmax(x4, x12)
    O = subgrid(x13, I)
    return O


def solve_6df30ad6(I):
    x1 = ofcolor(I, FIVE)
    x2 = objects(I, T, T, T)
    x3 = rbind(manhattan, x1)
    x4 = sizefilter(x2, ONE)
    x5 = argmin(x4, x3)
    x6 = objects(I, F, T, T)
    x7 = argmax(x6, size)
    x8 = contained(x7, x2)
    x9 = leastcolor(x7)
    x10 = color(x5)
    x11 = branch(x8, x10, x9)
    x12 = merge(x2)
    x13 = cover(I, x12)
    O = fill(x13, x11, x1)
    return O


def solve_759f3fd3(I):
    x1 = frontiers(I)
    x2 = apply(toindices, x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = intersection(x3, x4)
    x6 = first(x5)
    x7 = compose(outbox, outbox)
    x8 = lbind(power, x7)
    x9 = interval(ONE, TEN, ONE)
    x10 = apply(x8, x9)
    x11 = initset(x6)
    x12 = rapply(x10, x11)
    x13 = merge(x12)
    O = underfill(I, FOUR, x13)
    return O


def solve_5c2c9af4(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = center(x2)
    x4 = ulcorner(x2)
    x5 = subtract(x3, x4)
    x6 = multiply(NEG_ONE, NINE)
    x7 = interval(ZERO, NINE, ONE)
    x8 = interval(ZERO, x6, NEG_ONE)
    x9 = lbind(multiply, x5)
    x10 = apply(x9, x7)
    x11 = apply(x9, x8)
    x12 = pair(x10, x11)
    x13 = mapply(box, x12)
    x14 = shift(x13, x3)
    O = fill(I, x1, x14)
    return O


def solve_6e19193c(I):
    x1 = leastcolor(I)
    x2 = objects(I, T, F, T)
    x3 = rbind(toobject, I)
    x4 = compose(first, delta)
    x5 = rbind(colorcount, x1)
    x6 = matcher(x5, TWO)
    x7 = chain(x6, x3, dneighbors)
    x8 = rbind(sfilter, x7)
    x9 = chain(first, x8, toindices)
    x10 = fork(subtract, x4, x9)
    x11 = fork(shoot, x4, x10)
    x12 = mapply(x11, x2)
    x13 = fill(I, x1, x12)
    x14 = mapply(delta, x2)
    O = fill(x13, ZERO, x14)
    return O


def solve_1a07d186(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = apply(color, x3)
    x5 = rbind(contained, x4)
    x6 = compose(x5, color)
    x7 = sfilter(x2, x6)
    x8 = lbind(colorfilter, x3)
    x9 = chain(first, x8, color)
    x10 = fork(gravitate, identity, x9)
    x11 = fork(shift, identity, x10)
    x12 = mapply(x11, x7)
    x13 = merge(x2)
    x14 = cover(I, x13)
    O = paint(x14, x12)
    return O


def solve_a87f7484(I):
    x1 = palette(I)
    x2 = dmirror(I)
    x3 = portrait(I)
    x4 = branch(x3, x2, I)
    x5 = size(x1)
    x6 = decrement(x5)
    x7 = hsplit(x4, x6)
    x8 = rbind(ofcolor, ZERO)
    x9 = apply(x8, x7)
    x10 = mostcommon(x9)
    x11 = matcher(x8, x10)
    x12 = compose(flip, x11)
    x13 = extract(x7, x12)
    x14 = dmirror(x13)
    O = branch(x3, x14, x13)
    return O


def solve_cbded52d(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = product(x2, x2)
    x4 = fork(vmatching, first, last)
    x5 = fork(hmatching, first, last)
    x6 = fork(either, x4, x5)
    x7 = sfilter(x3, x6)
    x8 = compose(center, first)
    x9 = compose(center, last)
    x10 = fork(connect, x8, x9)
    x11 = chain(initset, center, x10)
    x12 = compose(color, first)
    x13 = fork(recolor, x12, x11)
    x14 = mapply(x13, x7)
    O = paint(I, x14)
    return O


def solve_c3f564a4(I):
    x1 = asindices(I)
    x2 = dmirror(I)
    x3 = invert(NINE)
    x4 = papply(pair, I, x2)
    x5 = lbind(apply, maximum)
    x6 = apply(x5, x4)
    x7 = ofcolor(x6, ZERO)
    x8 = difference(x1, x7)
    x9 = toobject(x8, x6)
    x10 = interval(x3, NINE, ONE)
    x11 = interval(NINE, x3, NEG_ONE)
    x12 = pair(x10, x11)
    x13 = lbind(shift, x9)
    x14 = mapply(x13, x12)
    O = paint(x6, x14)
    return O


def solve_4093f84a(I):
    x1 = leastcolor(I)
    x2 = replace(I, x1, FIVE)
    x3 = rot270(x2)
    x4 = ofcolor(I, FIVE)
    x5 = portrait(x4)
    x6 = branch(x5, x2, x3)
    x7 = lefthalf(x6)
    x8 = righthalf(x6)
    x9 = rbind(order, identity)
    x10 = rbind(order, invert)
    x11 = apply(x9, x7)
    x12 = apply(x10, x8)
    x13 = hconcat(x11, x12)
    x14 = rot90(x13)
    O = branch(x5, x13, x14)
    return O


def solve_941d9a10(I):
    x1 = shape(I)
    x2 = objects(I, T, F, F)
    x3 = colorfilter(x2, ZERO)
    x4 = apply(toindices, x3)
    x5 = lbind(lbind, contained)
    x6 = lbind(extract, x4)
    x7 = compose(x6, x5)
    x8 = decrement(x1)
    x9 = astuple(FIVE, FIVE)
    x10 = x7(ORIGIN)
    x11 = x7(x8)
    x12 = x7(x9)
    x13 = fill(I, ONE, x10)
    x14 = fill(x13, THREE, x11)
    O = fill(x14, TWO, x12)
    return O


def solve_6cf79266(I):
    x1 = ofcolor(I, ZERO)
    x2 = astuple(ZERO, ORIGIN)
    x3 = initset(x2)
    x4 = upscale(x3, THREE)
    x5 = toindices(x4)
    x6 = lbind(shift, x5)
    x7 = rbind(difference, x1)
    x8 = chain(size, x7, x6)
    x9 = matcher(x8, ZERO)
    x10 = lbind(add, NEG_UNITY)
    x11 = chain(flip, x9, x10)
    x12 = fork(both, x9, x11)
    x13 = sfilter(x1, x12)
    x14 = mapply(x6, x13)
    O = fill(I, ONE, x14)
    return O


def solve_ef135b50(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, ZERO)
    x3 = product(x1, x1)
    x4 = power(first, TWO)
    x5 = compose(first, last)
    x6 = fork(equality, x4, x5)
    x7 = sfilter(x3, x6)
    x8 = fork(connect, first, last)
    x9 = mapply(x8, x7)
    x10 = intersection(x9, x2)
    x11 = fill(I, NINE, x10)
    x12 = trim(x11)
    x13 = asobject(x12)
    x14 = shift(x13, UNITY)
    O = paint(I, x14)
    return O


def solve_75b8110e(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = tophalf(x2)
    x6 = bottomhalf(x2)
    x7 = rbind(ofcolor, ZERO)
    x8 = fork(difference, asindices, x7)
    x9 = fork(toobject, x8, identity)
    x10 = x9(x5)
    x11 = x9(x4)
    x12 = x9(x6)
    x13 = paint(x3, x12)
    x14 = paint(x13, x11)
    O = paint(x14, x10)
    return O


def solve_d687bc17(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = apply(color, x3)
    x5 = rbind(contained, x4)
    x6 = compose(x5, color)
    x7 = sfilter(x2, x6)
    x8 = lbind(colorfilter, x3)
    x9 = chain(first, x8, color)
    x10 = fork(gravitate, identity, x9)
    x11 = fork(shift, identity, x10)
    x12 = merge(x2)
    x13 = mapply(x11, x7)
    x14 = cover(I, x12)
    O = paint(x14, x13)
    return O


def solve_8a004b2b(I):
    x1 = objects(I, F, T, T)
    x2 = ofcolor(I, FOUR)
    x3 = subgrid(x2, I)
    x4 = argmax(x1, lowermost)
    x5 = normalize(x4)
    x6 = replace(x3, FOUR, ZERO)
    x7 = objects(x6, T, F, T)
    x8 = merge(x7)
    x9 = width(x8)
    x10 = ulcorner(x8)
    x11 = width(x4)
    x12 = divide(x9, x11)
    x13 = upscale(x5, x12)
    x14 = shift(x13, x10)
    O = paint(x3, x14)
    return O


def solve_9af7a82c(I):
    x1 = objects(I, T, F, F)
    x2 = order(x1, size)
    x3 = valmax(x1, size)
    x4 = rbind(astuple, ONE)
    x5 = lbind(subtract, x3)
    x6 = compose(x4, size)
    x7 = chain(x4, x5, size)
    x8 = fork(canvas, color, x6)
    x9 = lbind(canvas, ZERO)
    x10 = compose(x9, x7)
    x11 = fork(vconcat, x8, x10)
    x12 = compose(cmirror, x11)
    x13 = apply(x12, x2)
    x14 = merge(x13)
    O = cmirror(x14)
    return O


def solve_e26a3af2(I):
    x1 = rot90(I)
    x2 = apply(mostcommon, I)
    x3 = apply(mostcommon, x1)
    x4 = repeat(x2, ONE)
    x5 = repeat(x3, ONE)
    x6 = compose(size, dedupe)
    x7 = x6(x2)
    x8 = x6(x3)
    x9 = greater(x8, x7)
    x10 = branch(x9, height, width)
    x11 = x10(I)
    x12 = rot90(x4)
    x13 = branch(x9, x5, x12)
    x14 = branch(x9, vupscale, hupscale)
    O = x14(x13, x11)
    return O


def solve_72a961c9(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, EIGHT)
    x3 = toivec(FOUR)
    x4 = invert(x3)
    x5 = toivec(THREE)
    x6 = invert(x5)
    x7 = shift(x1, x4)
    x8 = shift(x2, x6)
    x9 = fill(I, TWO, x7)
    x10 = fill(x9, EIGHT, x8)
    x11 = rbind(add, x6)
    x12 = fork(connect, identity, x11)
    x13 = combine(x1, x2)
    x14 = mapply(x12, x13)
    O = underfill(x10, ONE, x14)
    return O


def solve_55783887(I):
    x1 = ofcolor(I, ONE)
    x2 = prapply(connect, x1, x1)
    x3 = merge(x2)
    x4 = ulcorner(x3)
    x5 = contained(x4, x3)
    x6 = fill(I, ONE, x3)
    x7 = ofcolor(I, SIX)
    x8 = intersection(x7, x3)
    x9 = branch(x5, UP_RIGHT, UNITY)
    x10 = branch(x5, DOWN_LEFT, NEG_UNITY)
    x11 = rbind(shoot, x9)
    x12 = rbind(shoot, x10)
    x13 = fork(combine, x11, x12)
    x14 = mapply(x13, x8)
    O = fill(x6, SIX, x14)
    return O


def solve_4364c1c4(I):
    x1 = objects(I, F, T, T)
    x2 = compose(first, last)
    x3 = rbind(argmin, x2)
    x4 = compose(first, x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, x4)
    x7 = fork(sfilter, identity, x6)
    x8 = mapply(x7, x1)
    x9 = merge(x1)
    x10 = difference(x9, x8)
    x11 = cover(I, x9)
    x12 = shift(x8, LEFT)
    x13 = shift(x10, RIGHT)
    x14 = paint(x11, x12)
    O = paint(x14, x13)
    return O


def solve_72207abc(I):
    x1 = objects(I, T, T, T)
    x2 = order(x1, leftmost)
    x3 = repeat(x2, TEN)
    x4 = merge(x3)
    x5 = size(x4)
    x6 = interval(ZERO, x5, ONE)
    x7 = apply(normalize, x4)
    x8 = fork(multiply, identity, increment)
    x9 = compose(halve, x8)
    x10 = apply(x9, x6)
    x11 = lbind(astuple, ONE)
    x12 = apply(x11, x10)
    x13 = papply(shift, x7, x12)
    x14 = merge(x13)
    O = paint(I, x14)
    return O


def solve_a8610ef7(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = hmirror(x2)
    x4 = ofcolor(x1, EIGHT)
    x5 = ofcolor(x3, EIGHT)
    x6 = intersection(x4, x5)
    x7 = fill(x1, TWO, x6)
    x8 = hmirror(x7)
    x9 = vconcat(x7, x8)
    x10 = ofcolor(x9, TWO)
    x11 = fill(I, TWO, x10)
    x12 = size(x10)
    x13 = equality(x12, TEN)
    x14 = replace(x11, EIGHT, FIVE)
    O = branch(x13, x11, x14)
    return O


def solve_22a4bbc2(I):
    x1 = objects(I, T, T, F)
    x2 = colorfilter(x1, ZERO)
    x3 = difference(x1, x2)
    x4 = order(x3, uppermost)
    x5 = size(x4)
    x6 = interval(ZERO, x5, ONE)
    x7 = rbind(multiply, THREE)
    x8 = rbind(divide, THREE)
    x9 = compose(x7, x8)
    x10 = fork(equality, identity, x9)
    x11 = compose(x10, first)
    x12 = pair(x6, x4)
    x13 = sfilter(x12, x11)
    x14 = mapply(last, x13)
    O = fill(I, TWO, x14)
    return O


def solve_f21745ec(I):
    x1 = objects(I, T, T, T)
    x2 = argmax(x1, size)
    x3 = shape(x2)
    x4 = matcher(shape, x3)
    x5 = sfilter(x1, x4)
    x6 = normalize(x2)
    x7 = toindices(x6)
    x8 = rbind(recolor, x7)
    x9 = compose(x8, color)
    x10 = fork(shift, x9, ulcorner)
    x11 = mapply(x10, x5)
    x12 = paint(I, x11)
    x13 = difference(x1, x5)
    x14 = merge(x13)
    O = cover(x12, x14)
    return O


def solve_af22c60d(I):
    x1 = dmirror(I)
    x2 = papply(pair, I, x1)
    x3 = lbind(apply, maximum)
    x4 = apply(x3, x2)
    x5 = cmirror(x4)
    x6 = asobject(x5)
    x7 = shift(x6, TWO_BY_TWO)
    x8 = matcher(first, ZERO)
    x9 = compose(flip, x8)
    x10 = sfilter(x7, x9)
    x11 = paint(x4, x10)
    x12 = vmirror(x10)
    x13 = astuple(ZERO, NEG_TWO)
    x14 = shift(x12, x13)
    O = paint(x11, x14)
    return O


def solve_9b4c17c4(I):
    x1 = ofcolor(I, ONE)
    x2 = ofcolor(I, EIGHT)
    x3 = subgrid(x1, I)
    x4 = subgrid(x2, I)
    x5 = rbind(order, identity)
    x6 = lbind(apply, x5)
    x7 = compose(asobject, x6)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = ulcorner(x1)
    x11 = ulcorner(x2)
    x12 = shift(x8, x10)
    x13 = shift(x9, x11)
    x14 = paint(I, x12)
    O = paint(x14, x13)
    return O


def solve_ba9d41b8(I):
    x1 = objects(I, T, F, T)
    x2 = interval(ONE, TEN, TWO)
    x3 = product(x2, x2)
    x4 = shift(x3, UNITY)
    x5 = combine(x3, x4)
    x6 = rbind(subgrid, I)
    x7 = rbind(fill, x5)
    x8 = rbind(x7, ZERO)
    x9 = chain(asobject, x8, x6)
    x10 = fork(shift, x9, ulcorner)
    x11 = mapply(x10, x1)
    x12 = paint(I, x11)
    x13 = fork(recolor, color, box)
    x14 = mapply(x13, x1)
    O = paint(x12, x14)
    return O


def solve_762cd429(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = initset(x2)
    x4 = compose(invert, halve)
    x5 = fork(astuple, x4, identity)
    x6 = rbind(argmax, size)
    x7 = rbind(upscale, TWO)
    x8 = compose(x7, x6)
    x9 = chain(x5, width, x6)
    x10 = fork(shift, x8, x9)
    x11 = fork(insert, x10, identity)
    x12 = power(x11, FIVE)
    x13 = x12(x3)
    x14 = merge(x13)
    O = paint(I, x14)
    return O


def solve_695367ec(I):
    x1 = shape(I)
    x2 = mostcolor(I)
    x3 = increment(x1)
    x4 = canvas(x2, x3)
    x5 = canvas(ZERO, x1)
    x6 = asobject(x5)
    x7 = paint(x4, x6)
    x8 = repeat(x7, TEN)
    x9 = merge(x8)
    x10 = rot90(x9)
    x11 = repeat(x10, TEN)
    x12 = merge(x11)
    x13 = rot270(x12)
    x14 = multiply(FIVE, THREE_BY_THREE)
    O = crop(x13, ORIGIN, x14)
    return O


def solve_50a16a69(I):
    x1 = tophalf(I)
    x2 = lefthalf(x1)
    x3 = asobject(x2)
    x4 = fork(astuple, vperiod, hperiod)
    x5 = x4(x3)
    x6 = neighbors(ORIGIN)
    x7 = lbind(mapply, neighbors)
    x8 = power(x7, FIVE)
    x9 = x8(x6)
    x10 = lbind(multiply, x5)
    x11 = apply(x10, x9)
    x12 = lbind(shift, x3)
    x13 = mapply(x12, x11)
    x14 = shift(x13, LEFT)
    O = paint(I, x14)
    return O


def solve_e619ca6e(I):
    x1 = objects(I, T, T, T)
    x2 = interval(ONE, TEN, ONE)
    x3 = lbind(lbind, shift)
    x4 = lbind(lbind, multiply)
    x5 = rbind(apply, x2)
    x6 = chain(x5, x4, shape)
    x7 = compose(x5, x4)
    x8 = lbind(multiply, DOWN_LEFT)
    x9 = chain(x7, x8, shape)
    x10 = fork(mapply, x3, x6)
    x11 = fork(mapply, x3, x9)
    x12 = mapply(x10, x1)
    x13 = mapply(x11, x1)
    x14 = combine(x12, x13)
    O = paint(I, x14)
    return O


def solve_fafd9572(I):
    x1 = fgpartition(I)
    x2 = argmax(x1, size)
    x3 = remove(x2, x1)
    x4 = merge(x3)
    x5 = height(x2)
    x6 = height(x4)
    x7 = divide(x5, x6)
    x8 = increment(x7)
    x9 = ofcolor(I, ZERO)
    x10 = ulcorner(x2)
    x11 = normalize(x4)
    x12 = upscale(x11, x8)
    x13 = shift(x12, x10)
    x14 = paint(I, x13)
    O = fill(x14, ZERO, x9)
    return O


def solve_29c11459(I):
    x1 = lefthalf(I)
    x2 = righthalf(I)
    x3 = objects(x2, T, F, T)
    x4 = objects(x1, T, F, T)
    x5 = compose(hfrontier, center)
    x6 = fork(recolor, color, x5)
    x7 = mapply(x6, x4)
    x8 = paint(x1, x7)
    x9 = mapply(x6, x3)
    x10 = paint(I, x9)
    x11 = objects(x8, T, F, T)
    x12 = apply(urcorner, x11)
    x13 = shift(x12, RIGHT)
    x14 = merge(x11)
    x15 = paint(x10, x14)
    O = fill(x15, FIVE, x13)
    return O


def solve_ba26e723(I):
    x1 = width(I)
    x2 = hsplit(I, x1)
    x3 = interval(ZERO, x1, ONE)
    x4 = rbind(divide, THREE)
    x5 = rbind(multiply, THREE)
    x6 = compose(x5, x4)
    x7 = fork(equality, identity, x6)
    x8 = apply(x7, x3)
    x9 = rbind(ofcolor, FOUR)
    x10 = apply(x9, x2)
    x11 = apply(tojvec, x3)
    x12 = papply(shift, x10, x11)
    x13 = pair(x8, x12)
    x14 = sfilter(x13, first)
    x15 = mapply(last, x14)
    O = fill(I, SIX, x15)
    return O


def solve_1f0c79e5(I):
    x1 = ofcolor(I, TWO)
    x2 = replace(I, TWO, ZERO)
    x3 = leastcolor(x2)
    x4 = ofcolor(x2, x3)
    x5 = combine(x1, x4)
    x6 = recolor(x3, x5)
    x7 = compose(decrement, double)
    x8 = ulcorner(x5)
    x9 = invert(x8)
    x10 = shift(x1, x9)
    x11 = apply(x7, x10)
    x12 = interval(ZERO, NINE, ONE)
    x13 = prapply(multiply, x11, x12)
    x14 = lbind(shift, x6)
    x15 = mapply(x14, x13)
    O = paint(I, x15)
    return O


def solve_963e52fc(I):
    x1 = width(I)
    x2 = asobject(I)
    x3 = hperiod(x2)
    x4 = height(x2)
    x5 = astuple(x4, x3)
    x6 = ulcorner(x2)
    x7 = crop(I, x6, x5)
    x8 = rot90(x7)
    x9 = double(x1)
    x10 = divide(x9, x3)
    x11 = increment(x10)
    x12 = repeat(x8, x11)
    x13 = merge(x12)
    x14 = rot270(x13)
    x15 = astuple(x4, x9)
    O = crop(x14, ORIGIN, x15)
    return O


def solve_ae3edfdc(I):
    x1 = objects(I, T, F, T)
    x2 = replace(I, THREE, ZERO)
    x3 = replace(x2, SEVEN, ZERO)
    x4 = lbind(colorfilter, x1)
    x5 = lbind(rbind, gravitate)
    x6 = chain(x5, first, x4)
    x7 = x6(TWO)
    x8 = x6(ONE)
    x9 = x4(THREE)
    x10 = x4(SEVEN)
    x11 = fork(shift, identity, x7)
    x12 = fork(shift, identity, x8)
    x13 = mapply(x11, x9)
    x14 = mapply(x12, x10)
    x15 = paint(x3, x13)
    O = paint(x15, x14)
    return O


def solve_4612dd53(I):
    x1 = ofcolor(I, ONE)
    x2 = box(x1)
    x3 = fill(I, TWO, x2)
    x4 = subgrid(x1, x3)
    x5 = ofcolor(x4, ONE)
    x6 = mapply(vfrontier, x5)
    x7 = mapply(hfrontier, x5)
    x8 = size(x6)
    x9 = size(x7)
    x10 = greater(x8, x9)
    x11 = branch(x10, x7, x6)
    x12 = fill(x4, TWO, x11)
    x13 = ofcolor(x12, TWO)
    x14 = ulcorner(x1)
    x15 = shift(x13, x14)
    O = underfill(I, TWO, x15)
    return O


def solve_516b51b7(I):
    x1 = objects(I, T, T, F)
    x2 = colorfilter(x1, ONE)
    x3 = compose(toindices, backdrop)
    x4 = fork(difference, x3, box)
    x5 = compose(box, x4)
    x6 = mapply(x5, x2)
    x7 = fill(I, TWO, x6)
    x8 = power(x5, TWO)
    x9 = mapply(x8, x2)
    x10 = fill(x7, THREE, x9)
    x11 = objects(x10, T, T, F)
    x12 = colorfilter(x11, ONE)
    x13 = fork(multiply, height, width)
    x14 = fork(equality, x13, size)
    x15 = mfilter(x12, x14)
    O = fill(x10, TWO, x15)
    return O


def solve_a680ac02(I):
    x1 = objects(I, T, T, T)
    x2 = sfilter(x1, square)
    x3 = difference(x1, x2)
    x4 = fork(hmatching, first, last)
    x5 = fork(equality, first, last)
    x6 = compose(flip, x5)
    x7 = product(x3, x3)
    x8 = sfilter(x7, x6)
    x9 = apply(x4, x8)
    x10 = contained(T, x9)
    x11 = branch(x10, dmirror, identity)
    x12 = branch(x10, leftmost, uppermost)
    x13 = rbind(subgrid, I)
    x14 = order(x3, x12)
    x15 = mapply(x13, x14)
    O = x11(x15)
    return O


def solve_c658a4bd(I):
    x1 = fgpartition(I)
    x2 = compose(invert, width)
    x3 = order(x1, x2)
    x4 = valmax(x1, width)
    x5 = astuple(x4, x4)
    x6 = canvas(ZERO, x5)
    x7 = size(x1)
    x8 = interval(ZERO, x7, ONE)
    x9 = pair(x8, x8)
    x10 = apply(normalize, x3)
    x11 = mpapply(shift, x10, x9)
    x12 = paint(x6, x11)
    x13 = hmirror(x12)
    x14 = papply(pair, x12, x13)
    x15 = lbind(apply, maximum)
    O = apply(x15, x14)
    return O


def solve_12422b43(I):
    x1 = width(I)
    x2 = objects(I, T, T, T)
    x3 = merge(x2)
    x4 = height(x3)
    x5 = ofcolor(I, FIVE)
    x6 = height(x5)
    x7 = replace(I, FIVE, ZERO)
    x8 = astuple(x6, x1)
    x9 = crop(x7, ORIGIN, x8)
    x10 = repeat(x9, FIVE)
    x11 = merge(x10)
    x12 = astuple(x4, x1)
    x13 = crop(I, ORIGIN, x12)
    x14 = vconcat(x13, x11)
    x15 = shape(x7)
    O = crop(x14, ORIGIN, x15)
    return O


def solve_88207623(I):
    x1 = objects(I, F, T, T)
    x2 = sizefilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = compose(decrement, width)
    x5 = lbind(index, I)
    x6 = compose(x5, urcorner)
    x7 = matcher(x6, TWO)
    x8 = chain(decrement, double, x7)
    x9 = fork(multiply, x8, x4)
    x10 = compose(tojvec, x9)
    x11 = fork(shift, vmirror, x10)
    x12 = rbind(toobject, I)
    x13 = chain(leastcolor, x12, x11)
    x14 = fork(recolor, x13, x11)
    x15 = mapply(x14, x3)
    O = underpaint(I, x15)
    return O


def solve_5af49b42(I):
    x1 = objects(I, F, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = rbind(compose, palette)
    x5 = lbind(lbind, contained)
    x6 = chain(x4, x5, color)
    x7 = lbind(extract, x3)
    x8 = compose(x7, x6)
    x9 = lbind(matcher, first)
    x10 = compose(x9, color)
    x11 = fork(sfilter, x8, x10)
    x12 = compose(center, x11)
    x13 = fork(subtract, center, x12)
    x14 = fork(shift, x8, x13)
    x15 = mapply(x14, x2)
    O = paint(I, x15)
    return O


def solve_705a3229(I):
    x1 = compose(crement, crement)
    x2 = asobject(I)
    x3 = corners(x2)
    x4 = apply(x1, x3)
    x5 = shift(x4, NEG_UNITY)
    x6 = objects(I, T, T, T)
    x7 = rbind(compose, initset)
    x8 = lbind(lbind, manhattan)
    x9 = compose(x7, x8)
    x10 = lbind(argmin, x5)
    x11 = compose(x10, x9)
    x12 = fork(insert, x11, toindices)
    x13 = compose(box, x12)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x6)
    O = paint(I, x15)
    return O


def solve_e1baa8a4(I):
    x1 = fork(equality, first, last)
    x2 = compose(flip, x1)
    x3 = lbind(insert, DOWN)
    x4 = chain(x3, initset, shape)
    x5 = fork(subgrid, x4, identity)
    x6 = lbind(astuple, ONE)
    x7 = lbind(canvas, ZERO)
    x8 = chain(x7, x6, width)
    x9 = fork(vconcat, x5, x8)
    x10 = fork(pair, identity, x9)
    x11 = rbind(sfilter, x2)
    x12 = lbind(apply, first)
    x13 = chain(x12, x11, x10)
    x14 = chain(rot270, x13, rot90)
    x15 = x13(I)
    O = x14(x15)
    return O


def solve_414297c0(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, size)
    x3 = cover(I, x2)
    x4 = subgrid(x2, I)
    x5 = fgpartition(x4)
    x6 = chain(backdrop, neighbors, first)
    x7 = lbind(occurrences, x3)
    x8 = rbind(toobject, x3)
    x9 = chain(x8, x6, x7)
    x10 = compose(normalize, x9)
    x11 = compose(decrement, ulcorner)
    x12 = fork(shift, x10, x11)
    x13 = mapply(x12, x5)
    x14 = paint(x4, x13)
    x15 = mostcolor(x4)
    O = replace(x14, ZERO, x15)
    return O


def solve_5289ad53(I):
    x1 = objects(I, T, T, T)
    x2 = colorfilter(x1, TWO)
    x3 = colorfilter(x1, THREE)
    x4 = size(x2)
    x5 = size(x3)
    x6 = repeat(TWO, x4)
    x7 = repeat(THREE, x5)
    x8 = combine(x7, x6)
    x9 = size(x8)
    x10 = subtract(SIX, x9)
    x11 = repeat(ZERO, x10)
    x12 = combine(x8, x11)
    x13 = repeat(x12, ONE)
    x14 = lefthalf(x13)
    x15 = righthalf(x13)
    O = vconcat(x14, x15)
    return O


def solve_aa4ec2a5(I):
    x1 = objects(I, T, T, F)
    x2 = argmax(x1, size)
    x3 = remove(x2, x1)
    x4 = colorfilter(x3, ONE)
    x5 = colorfilter(x3, FOUR)
    x6 = merge(x5)
    x7 = rbind(adjacent, x6)
    x8 = sfilter(x4, x7)
    x9 = lbind(mapply, neighbors)
    x10 = fork(difference, x9, identity)
    x11 = compose(x10, toindices)
    x12 = mapply(x11, x4)
    x13 = merge(x8)
    x14 = fill(I, EIGHT, x13)
    x15 = fill(x14, TWO, x12)
    O = fill(x15, SIX, x6)
    return O


def solve_b7fb29bc(I):
    x1 = ofcolor(I, THREE)
    x2 = subgrid(x1, I)
    x3 = trim(x2)
    x4 = ofcolor(x3, THREE)
    x5 = lbind(power, outbox)
    x6 = interval(ONE, SIX, TWO)
    x7 = apply(x5, x6)
    x8 = rapply(x7, x4)
    x9 = merge(x8)
    x10 = fill(x3, FOUR, x9)
    x11 = replace(x10, ZERO, TWO)
    x12 = asobject(x11)
    x13 = ulcorner(x1)
    x14 = add(x13, UNITY)
    x15 = shift(x12, x14)
    O = paint(I, x15)
    return O


def solve_8a371977(I):
    x1 = objects(I, T, T, F)
    x2 = ofcolor(I, ZERO)
    x3 = leftmost(x2)
    x4 = rightmost(x2)
    x5 = uppermost(x2)
    x6 = lowermost(x2)
    x7 = matcher(leftmost, x3)
    x8 = matcher(rightmost, x4)
    x9 = matcher(uppermost, x5)
    x10 = matcher(lowermost, x6)
    x11 = fork(either, x7, x8)
    x12 = fork(either, x9, x10)
    x13 = fork(either, x11, x12)
    x14 = mfilter(x1, x13)
    x15 = fill(I, TWO, x14)
    O = replace(x15, ZERO, THREE)
    return O


def solve_e57337a4(I):
    x1 = interval(ZERO, THREE, ONE)
    x2 = product(x1, x1)
    x3 = lbind(multiply, FIVE)
    x4 = apply(x3, x2)
    x5 = astuple(FIVE, FIVE)
    x6 = canvas(ZERO, x5)
    x7 = asindices(x6)
    x8 = lbind(shift, x7)
    x9 = rbind(toobject, I)
    x10 = chain(palette, x9, x8)
    x11 = lbind(contained, ZERO)
    x12 = compose(x11, x10)
    x13 = sfilter(x4, x12)
    x14 = mapply(x8, x13)
    x15 = fill(I, ZERO, x14)
    O = downscale(x15, FIVE)
    return O


def solve_6773b310(I):
    x1 = compress(I)
    x2 = neighbors(ORIGIN)
    x3 = insert(ORIGIN, x2)
    x4 = rbind(multiply, THREE)
    x5 = apply(x4, x3)
    x6 = astuple(FOUR, FOUR)
    x7 = shift(x5, x6)
    x8 = fork(insert, identity, neighbors)
    x9 = apply(x8, x7)
    x10 = rbind(toobject, x1)
    x11 = apply(x10, x9)
    x12 = rbind(colorcount, SIX)
    x13 = matcher(x12, TWO)
    x14 = mfilter(x11, x13)
    x15 = fill(x1, ONE, x14)
    x16 = replace(x15, SIX, ZERO)
    O = downscale(x16, THREE)
    return O


def solve_56dc2b01(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, THREE)
    x3 = first(x2)
    x4 = ofcolor(I, TWO)
    x5 = gravitate(x3, x4)
    x6 = first(x5)
    x7 = equality(x6, ZERO)
    x8 = branch(x7, width, height)
    x9 = x8(x3)
    x10 = gravitate(x4, x3)
    x11 = sign(x10)
    x12 = multiply(x11, x9)
    x13 = crement(x12)
    x14 = recolor(EIGHT, x4)
    x15 = shift(x14, x13)
    x16 = paint(I, x15)
    O = move(x16, x3, x5)
    return O


def solve_e48d4e1a(I):
    x1 = shape(I)
    x2 = ofcolor(I, FIVE)
    x3 = fill(I, ZERO, x2)
    x4 = leastcolor(x3)
    x5 = size(x2)
    x6 = ofcolor(I, x4)
    x7 = rbind(toobject, I)
    x8 = rbind(colorcount, x4)
    x9 = chain(x8, x7, dneighbors)
    x10 = matcher(x9, FOUR)
    x11 = extract(x6, x10)
    x12 = multiply(DOWN_LEFT, x5)
    x13 = add(x12, x11)
    x14 = canvas(ZERO, x1)
    x15 = fork(combine, vfrontier, hfrontier)
    x16 = x15(x13)
    O = fill(x14, x4, x16)
    return O


def solve_ce8d95cc(I):
    x1 = repeat(ZERO, ONE)
    x2 = initset(DOWN)
    x3 = compose(decrement, shape)
    x4 = rbind(insert, x2)
    x5 = compose(x4, x3)
    x6 = fork(subgrid, x5, identity)
    x7 = rbind(combine, x1)
    x8 = compose(x7, x6)
    x9 = fork(pair, identity, x8)
    x10 = fork(equality, first, last)
    x11 = compose(flip, x10)
    x12 = rbind(sfilter, x11)
    x13 = lbind(apply, first)
    x14 = chain(x13, x12, x9)
    x15 = compose(x14, dmirror)
    x16 = power(x15, TWO)
    O = x16(I)
    return O


def solve_73c3b0d8(I):
    x1 = ofcolor(I, FOUR)
    x2 = ofcolor(I, TWO)
    x3 = uppermost(x2)
    x4 = lbind(greater, x3)
    x5 = compose(x4, first)
    x6 = sfilter(x1, x5)
    x7 = argmax(x6, first)
    x8 = shoot(x7, UP_RIGHT)
    x9 = shoot(x7, NEG_UNITY)
    x10 = combine(x8, x9)
    x11 = manhattan(x6, x2)
    x12 = equality(x11, TWO)
    x13 = branch(x12, x10, x1)
    x14 = combine(x13, x1)
    x15 = shift(x14, DOWN)
    x16 = cover(I, x1)
    O = fill(x16, FOUR, x15)
    return O


def solve_a406ac07(I):
    x1 = fgpartition(I)
    x2 = height(I)
    x3 = width(I)
    x4 = decrement(x2)
    x5 = decrement(x3)
    x6 = matcher(first, x4)
    x7 = matcher(last, x5)
    x8 = rbind(sfilter, x6)
    x9 = rbind(sfilter, x7)
    x10 = lbind(mapply, vfrontier)
    x11 = lbind(mapply, hfrontier)
    x12 = chain(x10, x8, toindices)
    x13 = chain(x11, x9, toindices)
    x14 = fork(intersection, x12, x13)
    x15 = fork(recolor, color, x14)
    x16 = mapply(x15, x1)
    O = paint(I, x16)
    return O


def solve_770cc55f(I):
    x1 = objects(I, T, T, T)
    x2 = ofcolor(I, TWO)
    x3 = recolor(TWO, x2)
    x4 = remove(x3, x1)
    x5 = apply(toindices, x4)
    x6 = lbind(apply, last)
    x7 = apply(x6, x5)
    x8 = first(x7)
    x9 = last(x7)
    x10 = intersection(x8, x9)
    x11 = apply(tojvec, x10)
    x12 = mapply(vfrontier, x11)
    x13 = underfill(I, FOUR, x12)
    x14 = objects(I, T, T, F)
    x15 = colorfilter(x14, ZERO)
    x16 = argmax(x15, size)
    O = paint(x13, x16)
    return O


def solve_e9bb6954(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, NINE)
    x3 = compose(vfrontier, center)
    x4 = compose(hfrontier, center)
    x5 = fork(combine, x3, x4)
    x6 = fork(recolor, color, x5)
    x7 = apply(x6, x2)
    x8 = merge(x7)
    x9 = apply(toindices, x7)
    x10 = product(x9, x9)
    x11 = fork(equality, first, last)
    x12 = compose(flip, x11)
    x13 = sfilter(x10, x12)
    x14 = fork(intersection, first, last)
    x15 = mapply(x14, x13)
    x16 = paint(I, x8)
    O = fill(x16, ZERO, x15)
    return O


def solve_e7b06bea(I):
    x1 = fgpartition(I)
    x2 = argmin(x1, size)
    x3 = remove(x2, x1)
    x4 = merge(x3)
    x5 = size(x2)
    x6 = upscale(x4, x5)
    x7 = dmirror(x6)
    x8 = width(x4)
    x9 = multiply(x8, x5)
    x10 = shift(x7, LEFT)
    x11 = double(TEN)
    x12 = interval(ZERO, x11, x9)
    x13 = apply(toivec, x12)
    x14 = lbind(shift, x10)
    x15 = mapply(x14, x13)
    x16 = paint(I, x15)
    O = fill(x16, ZERO, x4)
    return O


def solve_3391f8c0(I):
    x1 = objects(I, T, T, T)
    x2 = leastcolor(I)
    x3 = colorfilter(x1, x2)
    x4 = difference(x1, x3)
    x5 = merge(x1)
    x6 = cover(I, x5)
    x7 = compose(normalize, first)
    x8 = x7(x3)
    x9 = x7(x4)
    x10 = apply(ulcorner, x3)
    x11 = apply(ulcorner, x4)
    x12 = lbind(shift, x8)
    x13 = lbind(shift, x9)
    x14 = mapply(x12, x11)
    x15 = mapply(x13, x10)
    x16 = combine(x14, x15)
    O = paint(x6, x16)
    return O


def solve_aab50785(I):
    x1 = objects(I, T, T, T)
    x2 = colorfilter(x1, EIGHT)
    x3 = product(x2, x2)
    x4 = fork(equality, first, last)
    x5 = compose(flip, x4)
    x6 = fork(hmatching, first, last)
    x7 = fork(both, x5, x6)
    x8 = sfilter(x3, x7)
    x9 = fork(combine, first, last)
    x10 = apply(x9, x8)
    x11 = order(x10, uppermost)
    x12 = rbind(subgrid, I)
    x13 = mapply(x12, x11)
    x14 = asindices(x13)
    x15 = ofcolor(x13, EIGHT)
    x16 = difference(x14, x15)
    O = subgrid(x16, x13)
    return O


def solve_42a15761(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, TWO)
    x3 = compose(invert, size)
    x4 = order(x2, x3)
    x5 = rbind(subgrid, I)
    x6 = apply(x5, x4)
    x7 = apply(rot90, x6)
    x8 = height(I)
    x9 = astuple(ONE, x8)
    x10 = canvas(ZERO, x9)
    x11 = rbind(vconcat, x10)
    x12 = mapply(x11, x7)
    x13 = height(x12)
    x14 = decrement(x13)
    x15 = astuple(x14, x8)
    x16 = crop(x12, ORIGIN, x15)
    O = rot270(x16)
    return O


def solve_e9c9d9a1(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = rbind(bordering, I)
    x4 = sfilter(x2, x3)
    x5 = difference(x2, x4)
    x6 = merge(x5)
    x7 = fork(add, uppermost, leftmost)
    x8 = fork(subtract, uppermost, leftmost)
    x9 = argmin(x4, x7)
    x10 = argmax(x4, x7)
    x11 = argmin(x4, x8)
    x12 = argmax(x4, x8)
    x13 = fill(I, SEVEN, x6)
    x14 = fill(x13, TWO, x9)
    x15 = fill(x14, EIGHT, x10)
    x16 = fill(x15, FOUR, x11)
    O = fill(x16, ONE, x12)
    return O


def solve_2685904e(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, numcolors)
    x3 = valmin(x1, size)
    x4 = palette(x2)
    x5 = add(THREE, x3)
    x6 = lbind(colorcount, x2)
    x7 = matcher(x6, x3)
    x8 = sfilter(x4, x7)
    x9 = rbind(contained, x8)
    x10 = compose(x9, first)
    x11 = sfilter(x2, x10)
    x12 = interval(THREE, x5, ONE)
    x13 = lbind(multiply, UP)
    x14 = apply(x13, x12)
    x15 = lbind(shift, x11)
    x16 = mapply(x15, x14)
    O = paint(I, x16)
    return O


def solve_2697da3f(I):
    x1 = compress(I)
    x2 = shape(x1)
    x3 = maximum(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = vconcat(x5, x1)
    x7 = vconcat(x6, x5)
    x8 = vmirror(x7)
    x9 = rot90(x1)
    x10 = rot270(x1)
    x11 = minimum(x2)
    x12 = astuple(x11, x11)
    x13 = canvas(ZERO, x12)
    x14 = vconcat(x9, x13)
    x15 = vconcat(x14, x10)
    x16 = hconcat(x7, x15)
    O = hconcat(x16, x8)
    return O


def solve_f45f5ca7(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = cover(I, x2)
    x4 = ofcolor(I, TWO)
    x5 = shift(x4, ZERO_BY_TWO)
    x6 = fill(x3, TWO, x5)
    x7 = ofcolor(I, FOUR)
    x8 = tojvec(THREE)
    x9 = shift(x7, x8)
    x10 = fill(x6, FOUR, x9)
    x11 = ofcolor(I, EIGHT)
    x12 = shift(x11, RIGHT)
    x13 = fill(x10, EIGHT, x12)
    x14 = ofcolor(I, THREE)
    x15 = tojvec(FOUR)
    x16 = shift(x14, x15)
    O = fill(x13, THREE, x16)
    return O


def solve_e1d2900e(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, TWO)
    x3 = difference(x1, x2)
    x4 = merge(x2)
    x5 = rbind(vmatching, x4)
    x6 = rbind(hmatching, x4)
    x7 = fork(either, x5, x6)
    x8 = sfilter(x3, x7)
    x9 = lbind(lbind, manhattan)
    x10 = lbind(argmin, x2)
    x11 = compose(x10, x9)
    x12 = fork(gravitate, identity, x11)
    x13 = fork(shift, identity, x12)
    x14 = mapply(x13, x8)
    x15 = mapply(toindices, x8)
    x16 = cover(I, x15)
    O = fill(x16, ONE, x14)
    return O


def solve_e633a9e5(I):
    x1 = astuple(FIVE, FIVE)
    x2 = canvas(ZERO, x1)
    x3 = asobject(I)
    x4 = shift(x3, UNITY)
    x5 = paint(x2, x4)
    x6 = dneighbors(ORIGIN)
    x7 = lbind(shift, x4)
    x8 = mapply(x7, x6)
    x9 = underpaint(x5, x8)
    x10 = initset(ORIGIN)
    x11 = rbind(index, RIGHT)
    x12 = rbind(recolor, x10)
    x13 = compose(x12, x11)
    x14 = fork(paint, identity, x13)
    x15 = compose(rot90, x14)
    x16 = power(x15, FOUR)
    O = x16(x9)
    return O


def solve_ecdecbb3(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, TWO)
    x3 = colorfilter(x1, EIGHT)
    x4 = product(x2, x3)
    x5 = fork(gravitate, first, last)
    x6 = compose(crement, x5)
    x7 = compose(center, first)
    x8 = fork(add, x7, x6)
    x9 = fork(connect, x7, x8)
    x10 = apply(x9, x4)
    x11 = lbind(greater, EIGHT)
    x12 = compose(x11, size)
    x13 = mfilter(x10, x12)
    x14 = fill(I, TWO, x13)
    x15 = apply(x8, x4)
    x16 = intersection(x13, x15)
    x17 = mapply(neighbors, x16)
    O = fill(x14, EIGHT, x17)
    return O


def solve_f8c80d96(I):
    x1 = leastcolor(I)
    x2 = objects(I, T, F, F)
    x3 = colorfilter(x2, x1)
    x4 = argmax(x3, size)
    x5 = argmin(x2, width)
    x6 = size(x5)
    x7 = equality(x6, ONE)
    x8 = branch(x7, identity, outbox)
    x9 = chain(outbox, outbox, x8)
    x10 = power(x9, TWO)
    x11 = power(x9, THREE)
    x12 = x9(x4)
    x13 = x10(x4)
    x14 = x11(x4)
    x15 = fill(I, x1, x12)
    x16 = fill(x15, x1, x13)
    x17 = fill(x16, x1, x14)
    O = replace(x17, ZERO, FIVE)
    return O


def solve_90f3ed37(I):
    x1 = objects(I, T, T, T)
    x2 = order(x1, uppermost)
    x3 = first(x2)
    x4 = remove(x3, x2)
    x5 = normalize(x3)
    x6 = lbind(shift, x5)
    x7 = compose(x6, ulcorner)
    x8 = interval(TWO, NEG_ONE, NEG_ONE)
    x9 = apply(tojvec, x8)
    x10 = rbind(apply, x9)
    x11 = lbind(compose, size)
    x12 = lbind(lbind, intersection)
    x13 = compose(x11, x12)
    x14 = lbind(lbind, shift)
    x15 = chain(x10, x14, x7)
    x16 = fork(argmax, x15, x13)
    x17 = mapply(x16, x4)
    O = underfill(I, ONE, x17)
    return O


def solve_846bdb03(I):
    x1 = objects(I, F, F, T)
    x2 = rbind(colorcount, FOUR)
    x3 = matcher(x2, ZERO)
    x4 = extract(x1, x3)
    x5 = remove(x4, x1)
    x6 = merge(x5)
    x7 = subgrid(x6, I)
    x8 = index(x7, DOWN)
    x9 = subgrid(x4, I)
    x10 = lefthalf(x9)
    x11 = palette(x10)
    x12 = other(x11, ZERO)
    x13 = equality(x8, x12)
    x14 = branch(x13, identity, vmirror)
    x15 = x14(x4)
    x16 = normalize(x15)
    x17 = shift(x16, UNITY)
    O = paint(x7, x17)
    return O


def solve_780d0b14(I):
    x1 = asindices(I)
    x2 = objects(I, T, T, T)
    x3 = rbind(greater, TWO)
    x4 = compose(x3, size)
    x5 = sfilter(x2, x4)
    x6 = totuple(x5)
    x7 = apply(color, x6)
    x8 = apply(center, x6)
    x9 = pair(x7, x8)
    x10 = fill(I, ZERO, x1)
    x11 = paint(x10, x9)
    x12 = rbind(greater, ONE)
    x13 = compose(dedupe, totuple)
    x14 = chain(x12, size, x13)
    x15 = sfilter(x11, x14)
    x16 = rot90(x15)
    x17 = sfilter(x16, x14)
    O = rot270(x17)
    return O


def solve_a8d7556c(I):
    x1 = initset(ORIGIN)
    x2 = recolor(ZERO, x1)
    x3 = upscale(x2, TWO)
    x4 = occurrences(I, x3)
    x5 = lbind(shift, x3)
    x6 = mapply(x5, x4)
    x7 = fill(I, TWO, x6)
    x8 = add(SIX, SIX)
    x9 = astuple(EIGHT, x8)
    x10 = index(x7, x9)
    x11 = equality(x10, TWO)
    x12 = initset(x9)
    x13 = add(x9, DOWN)
    x14 = insert(x13, x12)
    x15 = toobject(x14, x7)
    x16 = toobject(x14, I)
    x17 = branch(x11, x16, x15)
    O = paint(x7, x17)
    return O


def solve_f5b8619d(I):
    x1 = leastcolor(I)
    x2 = width(I)
    x3 = height(I)
    x4 = righthalf(I)
    x5 = halve(x2)
    x6 = even(x2)
    x7 = branch(x6, identity, increment)
    x8 = x7(x5)
    x9 = astuple(x3, x8)
    x10 = crop(I, ORIGIN, x9)
    x11 = vconcat(x10, x10)
    x12 = vconcat(x4, x4)
    x13 = hconcat(x12, x11)
    x14 = hconcat(x11, x13)
    x15 = hconcat(x14, x12)
    x16 = ofcolor(x15, x1)
    x17 = mapply(vfrontier, x16)
    O = underfill(x15, EIGHT, x17)
    return O


def solve_4938f0c2(I):
    x1 = objects(I, T, T, T)
    x2 = ofcolor(I, TWO)
    x3 = vmirror(x2)
    x4 = height(x2)
    x5 = width(x2)
    x6 = toivec(x4)
    x7 = tojvec(x5)
    x8 = add(x7, ZERO_BY_TWO)
    x9 = add(x6, TWO_BY_ZERO)
    x10 = shift(x3, x8)
    x11 = fill(I, TWO, x10)
    x12 = ofcolor(x11, TWO)
    x13 = hmirror(x12)
    x14 = shift(x13, x9)
    x15 = fill(x11, TWO, x14)
    x16 = size(x1)
    x17 = greater(x16, FOUR)
    O = branch(x17, I, x15)
    return O


def solve_834ec97d(I):
    x1 = asindices(I)
    x2 = objects(I, T, F, T)
    x3 = first(x2)
    x4 = shift(x3, DOWN)
    x5 = fill(I, ZERO, x3)
    x6 = paint(x5, x4)
    x7 = uppermost(x4)
    x8 = leftmost(x4)
    x9 = subtract(x8, TEN)
    x10 = add(x8, TEN)
    x11 = interval(x9, x10, TWO)
    x12 = lbind(greater, x7)
    x13 = compose(x12, first)
    x14 = rbind(contained, x11)
    x15 = compose(x14, last)
    x16 = sfilter(x1, x13)
    x17 = sfilter(x16, x15)
    O = fill(x6, FOUR, x17)
    return O


def solve_e5062a87(I):
    x1 = ofcolor(I, TWO)
    x2 = recolor(ZERO, x1)
    x3 = normalize(x2)
    x4 = occurrences(I, x2)
    x5 = lbind(shift, x3)
    x6 = apply(x5, x4)
    x7 = astuple(ONE, THREE)
    x8 = astuple(FIVE, ONE)
    x9 = astuple(TWO, SIX)
    x10 = initset(x7)
    x11 = insert(x8, x10)
    x12 = insert(x9, x11)
    x13 = rbind(contained, x12)
    x14 = chain(flip, x13, ulcorner)
    x15 = sfilter(x6, x14)
    x16 = merge(x15)
    x17 = recolor(TWO, x16)
    O = paint(I, x17)
    return O


def solve_673ef223(I):
    x1 = objects(I, T, F, T)
    x2 = ofcolor(I, EIGHT)
    x3 = replace(I, EIGHT, FOUR)
    x4 = colorfilter(x1, TWO)
    x5 = argmin(x1, uppermost)
    x6 = apply(uppermost, x4)
    x7 = fork(subtract, maximum, minimum)
    x8 = x7(x6)
    x9 = toivec(x8)
    x10 = leftmost(x5)
    x11 = equality(x10, ZERO)
    x12 = branch(x11, LEFT, RIGHT)
    x13 = rbind(shoot, x12)
    x14 = mapply(x13, x2)
    x15 = underfill(x3, EIGHT, x14)
    x16 = shift(x2, x9)
    x17 = mapply(hfrontier, x16)
    O = underfill(x15, EIGHT, x17)
    return O


def solve_2204b7a8(I):
    x1 = objects(I, T, F, T)
    x2 = lbind(sfilter, x1)
    x3 = compose(size, x2)
    x4 = x3(vline)
    x5 = x3(hline)
    x6 = greater(x4, x5)
    x7 = branch(x6, lefthalf, tophalf)
    x8 = branch(x6, righthalf, bottomhalf)
    x9 = branch(x6, hconcat, vconcat)
    x10 = x7(I)
    x11 = x8(I)
    x12 = index(x10, ORIGIN)
    x13 = shape(x11)
    x14 = decrement(x13)
    x15 = index(x11, x14)
    x16 = replace(x10, THREE, x12)
    x17 = replace(x11, THREE, x15)
    O = x9(x16, x17)
    return O


def solve_b782dc8a(I):
    x1 = leastcolor(I)
    x2 = objects(I, T, F, F)
    x3 = ofcolor(I, x1)
    x4 = first(x3)
    x5 = dneighbors(x4)
    x6 = toobject(x5, I)
    x7 = mostcolor(x6)
    x8 = ofcolor(I, x7)
    x9 = colorfilter(x2, ZERO)
    x10 = rbind(adjacent, x8)
    x11 = mfilter(x9, x10)
    x12 = toindices(x11)
    x13 = rbind(manhattan, x3)
    x14 = chain(even, x13, initset)
    x15 = sfilter(x12, x14)
    x16 = difference(x12, x15)
    x17 = fill(I, x1, x15)
    O = fill(x17, x7, x16)
    return O


def solve_d9f24cd1(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, FIVE)
    x3 = prapply(connect, x1, x2)
    x4 = mfilter(x3, vline)
    x5 = underfill(I, TWO, x4)
    x6 = matcher(numcolors, TWO)
    x7 = objects(x5, F, F, T)
    x8 = sfilter(x7, x6)
    x9 = difference(x7, x8)
    x10 = colorfilter(x9, TWO)
    x11 = mapply(toindices, x10)
    x12 = apply(urcorner, x8)
    x13 = shift(x12, UNITY)
    x14 = rbind(shoot, UP)
    x15 = mapply(x14, x13)
    x16 = fill(x5, TWO, x15)
    x17 = mapply(vfrontier, x11)
    O = fill(x16, TWO, x17)
    return O


def solve_f83cb3f6(I):
    x1 = ofcolor(I, EIGHT)
    x2 = portrait(x1)
    x3 = branch(x2, identity, dmirror)
    x4 = x3(I)
    x5 = palette(I)
    x6 = remove(ZERO, x5)
    x7 = other(x6, EIGHT)
    x8 = ofcolor(x4, x7)
    x9 = cover(x4, x8)
    x10 = ofcolor(x4, EIGHT)
    x11 = rbind(hmatching, x10)
    x12 = apply(initset, x8)
    x13 = sfilter(x12, x11)
    x14 = rbind(gravitate, x10)
    x15 = fork(shift, identity, x14)
    x16 = mapply(x15, x13)
    x17 = fill(x9, x7, x16)
    O = x3(x17)
    return O


def solve_45bbe264(I):
    x1 = objects(I, T, T, T)
    x2 = fork(combine, vfrontier, hfrontier)
    x3 = compose(x2, center)
    x4 = fork(recolor, color, x3)
    x5 = mapply(x4, x1)
    x6 = paint(I, x5)
    x7 = asindices(x6)
    x8 = rbind(toobject, x6)
    x9 = chain(numcolors, x8, dneighbors)
    x10 = matcher(x9, TWO)
    x11 = lbind(contained, ZERO)
    x12 = chain(flip, x11, palette)
    x13 = chain(x12, x8, dneighbors)
    x14 = fork(both, x13, x10)
    x15 = sfilter(x7, x14)
    x16 = fill(x6, TWO, x15)
    x17 = ofcolor(x6, ZERO)
    O = fill(x16, ZERO, x17)
    return O


def solve_20981f0e(I):
    x1 = ofcolor(I, TWO)
    x2 = fork(combine, hfrontier, vfrontier)
    x3 = mapply(x2, x1)
    x4 = fill(I, TWO, x3)
    x5 = objects(x4, T, F, F)
    x6 = fork(multiply, height, width)
    x7 = fork(equality, x6, size)
    x8 = compose(flip, x7)
    x9 = colorfilter(x5, ZERO)
    x10 = sfilter(x9, x8)
    x11 = rbind(subgrid, x4)
    x12 = rbind(ofcolor, ONE)
    x13 = chain(normalize, x12, x11)
    x14 = fork(shift, x13, ulcorner)
    x15 = mapply(x14, x10)
    x16 = shift(x15, UNITY)
    x17 = replace(I, ONE, ZERO)
    O = fill(x17, ONE, x16)
    return O


def solve_ca8de6ea(I):
    x1 = trim(I)
    x2 = asindices(x1)
    x3 = shift(x2, UNITY)
    x4 = box(x3)
    x5 = cover(I, x4)
    x6 = compress(x5)
    x7 = initset(RIGHT)
    x8 = rbind(index, UNITY)
    x9 = compose(x8, first)
    x10 = rbind(fill, x7)
    x11 = fork(x10, last, x9)
    x12 = compose(rot90, x11)
    x13 = compose(rot90, first)
    x14 = fork(astuple, x13, x12)
    x15 = power(x14, FOUR)
    x16 = astuple(I, x6)
    x17 = x15(x16)
    O = last(x17)
    return O


def solve_b7999b51(I):
    x1 = fgpartition(I)
    x2 = compose(invert, height)
    x3 = order(x1, x2)
    x4 = rbind(astuple, ONE)
    x5 = compose(x4, height)
    x6 = fork(canvas, color, x5)
    x7 = compose(asobject, x6)
    x8 = valmax(x1, height)
    x9 = size(x1)
    x10 = astuple(x8, x9)
    x11 = canvas(ZERO, x10)
    x12 = apply(x7, x3)
    x13 = interval(ZERO, x9, ONE)
    x14 = pair(x13, x12)
    x15 = compose(tojvec, first)
    x16 = fork(shift, last, x15)
    x17 = mapply(x16, x14)
    O = paint(x11, x17)
    return O


def solve_3d31c5b3(I):
    x1 = tophalf(I)
    x2 = bottomhalf(I)
    x3 = tophalf(x1)
    x4 = bottomhalf(x1)
    x5 = tophalf(x2)
    x6 = bottomhalf(x2)
    x7 = ofcolor(x4, FOUR)
    x8 = ofcolor(x3, ZERO)
    x9 = intersection(x7, x8)
    x10 = fill(x3, FOUR, x9)
    x11 = ofcolor(x6, EIGHT)
    x12 = ofcolor(x10, ZERO)
    x13 = intersection(x11, x12)
    x14 = fill(x10, EIGHT, x13)
    x15 = ofcolor(x5, TWO)
    x16 = ofcolor(x14, ZERO)
    x17 = intersection(x15, x16)
    O = fill(x14, TWO, x17)
    return O


def solve_8719f442(I):
    x1 = shape(I)
    x2 = add(x1, TWO_BY_TWO)
    x3 = ofcolor(I, FIVE)
    x4 = shift(x3, UNITY)
    x5 = canvas(ZERO, x2)
    x6 = fill(x5, FIVE, x4)
    x7 = mapply(dneighbors, x4)
    x8 = outbox(x4)
    x9 = intersection(x7, x8)
    x10 = underfill(x6, ONE, x9)
    x11 = upscale(x10, THREE)
    x12 = objects(x11, T, F, T)
    x13 = colorfilter(x12, ONE)
    x14 = apply(ulcorner, x13)
    x15 = asobject(I)
    x16 = lbind(shift, x15)
    x17 = mapply(x16, x14)
    O = paint(x11, x17)
    return O


def solve_5207a7b5(I):
    x1 = ofcolor(I, FIVE)
    x2 = argmax(x1, first)
    x3 = interval(ONE, FIVE, ONE)
    x4 = interval(ONE, EIGHT, TWO)
    x5 = add(x2, UP)
    x6 = lbind(add, x5)
    x7 = apply(invert, x4)
    x8 = pair(x7, x3)
    x9 = apply(x6, x8)
    x10 = rbind(shoot, UP)
    x11 = mapply(x10, x9)
    x12 = fill(I, SIX, x11)
    x13 = apply(invert, x3)
    x14 = pair(x4, x13)
    x15 = apply(x6, x14)
    x16 = shift(x15, TWO_BY_ZERO)
    x17 = mapply(x10, x16)
    O = fill(x12, EIGHT, x17)
    return O


def solve_9110e3c5(I):
    x1 = palette(I)
    x2 = remove(ZERO, x1)
    x3 = lbind(colorcount, I)
    x4 = argmax(x2, x3)
    x5 = canvas(ZERO, THREE_BY_THREE)
    x6 = initset(UNITY)
    x7 = astuple(TWO, ONE)
    x8 = astuple(ONE, TWO)
    x9 = equality(x4, TWO)
    x10 = equality(x4, THREE)
    x11 = flip(x9)
    x12 = branch(x11, ZERO_BY_TWO, UNITY)
    x13 = branch(x9, x8, x7)
    x14 = branch(x10, RIGHT, DOWN)
    x15 = insert(x12, x6)
    x16 = insert(x13, x15)
    x17 = insert(x14, x16)
    O = fill(x5, EIGHT, x17)
    return O


def solve_c1990cce(I):
    x1 = width(I)
    x2 = astuple(x1, x1)
    x3 = canvas(ZERO, x2)
    x4 = ofcolor(I, TWO)
    x5 = first(x4)
    x6 = shoot(x5, DOWN_LEFT)
    x7 = fill(x3, TWO, x6)
    x8 = double(TEN)
    x9 = interval(ZERO, x8, TWO)
    x10 = apply(invert, x9)
    x11 = pair(x9, x10)
    x12 = lbind(add, x5)
    x13 = apply(x12, x11)
    x14 = rbind(shoot, UNITY)
    x15 = mapply(x14, x13)
    x16 = underfill(x7, ONE, x15)
    x17 = shoot(x5, UNITY)
    O = fill(x16, TWO, x17)
    return O


def solve_58743b76(I):
    x1 = shape(I)
    x2 = canvas(EIGHT, x1)
    x3 = vconcat(I, x2)
    x4 = objects(x3, F, F, T)
    x5 = argmax(x4, size)
    x6 = argmin(x4, size)
    x7 = width(x5)
    x8 = width(x6)
    x9 = divide(x7, x8)
    x10 = subgrid(x5, x3)
    x11 = subgrid(x6, x3)
    x12 = upscale(x11, x9)
    x13 = ofcolor(x10, ZERO)
    x14 = fill(x12, ZERO, x13)
    x15 = asobject(x14)
    x16 = ulcorner(x5)
    x17 = shift(x15, x16)
    O = paint(I, x17)
    return O


def solve_3f23242b(I):
    x1 = ofcolor(I, THREE)
    x2 = power(outbox, TWO)
    x3 = compose(x2, initset)
    x4 = mapply(x3, x1)
    x5 = fill(I, TWO, x4)
    x6 = objects(x5, T, F, T)
    x7 = colorfilter(x6, TWO)
    x8 = apply(llcorner, x7)
    x9 = mapply(hfrontier, x8)
    x10 = intersection(x4, x9)
    x11 = fill(x5, TWO, x9)
    x12 = fill(x11, EIGHT, x10)
    x13 = shift(x1, UP)
    x14 = fill(x12, FIVE, x13)
    x15 = shift(x13, UP)
    x16 = mapply(hfrontier, x15)
    x17 = intersection(x4, x16)
    O = fill(x14, FIVE, x17)
    return O


def solve_4cd1b7b2(I):
    x1 = interval(ZERO, FIVE, ONE)
    x2 = rbind(colorcount, ZERO)
    x3 = matcher(x2, ONE)
    x4 = initset(ZERO)
    x5 = rbind(branch, x4)
    x6 = lbind(difference, x1)
    x7 = compose(x6, palette)
    x8 = fork(x5, x3, x7)
    x9 = rbind(ofcolor, ZERO)
    x10 = compose(first, x8)
    x11 = fork(recolor, x10, x9)
    x12 = fork(paint, identity, x11)
    x13 = fork(vsplit, identity, height)
    x14 = lbind(apply, x12)
    x15 = chain(merge, x14, x13)
    x16 = compose(dmirror, x15)
    x17 = power(x16, FOUR)
    O = x17(I)
    return O


def solve_e681b708(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = lbind(remove, ONE)
    x4 = rbind(toobject, I)
    x5 = compose(x4, outbox)
    x6 = chain(x3, palette, x5)
    x7 = lbind(lbind, colorcount)
    x8 = compose(x7, x5)
    x9 = fork(argmax, x6, x8)
    x10 = rbind(subgrid, I)
    x11 = rbind(ofcolor, ONE)
    x12 = compose(x11, x10)
    x13 = fork(recolor, x9, x12)
    x14 = fork(paint, x10, x13)
    x15 = compose(asobject, x14)
    x16 = fork(shift, x15, ulcorner)
    x17 = mapply(x16, x2)
    O = paint(I, x17)
    return O


def solve_b7f8a4d8(I):
    x1 = objects(I, T, T, T)
    x2 = palette(I)
    x3 = lbind(colorfilter, x1)
    x4 = compose(size, x3)
    x5 = matcher(x4, FOUR)
    x6 = sfilter(x2, x5)
    x7 = lbind(ofcolor, I)
    x8 = lbind(prapply, connect)
    x9 = fork(x8, x7, x7)
    x10 = fork(either, vline, hline)
    x11 = rbind(mfilter, x10)
    x12 = compose(x11, x9)
    x13 = ofcolor(I, ZERO)
    x14 = rbind(intersection, x13)
    x15 = compose(x14, x12)
    x16 = fork(recolor, identity, x15)
    x17 = mapply(x16, x6)
    O = paint(I, x17)
    return O


def solve_8403a5d5(I):
    x1 = asindices(I)
    x2 = objects(I, T, F, T)
    x3 = first(x2)
    x4 = color(x3)
    x5 = leftmost(x3)
    x6 = interval(x5, TEN, TWO)
    x7 = rbind(contained, x6)
    x8 = compose(x7, last)
    x9 = sfilter(x1, x8)
    x10 = increment(x5)
    x11 = add(x5, THREE)
    x12 = interval(x10, TEN, FOUR)
    x13 = interval(x11, TEN, FOUR)
    x14 = lbind(astuple, NINE)
    x15 = apply(tojvec, x12)
    x16 = apply(x14, x13)
    x17 = fill(I, x4, x9)
    x18 = fill(x17, FIVE, x15)
    O = fill(x18, FIVE, x16)
    return O


def solve_ec883f72(I):
    x1 = palette(I)
    x2 = objects(I, T, T, T)
    x3 = fork(multiply, height, width)
    x4 = argmax(x2, x3)
    x5 = color(x4)
    x6 = remove(ZERO, x1)
    x7 = other(x6, x5)
    x8 = lrcorner(x4)
    x9 = llcorner(x4)
    x10 = urcorner(x4)
    x11 = ulcorner(x4)
    x12 = shoot(x8, UNITY)
    x13 = shoot(x9, DOWN_LEFT)
    x14 = shoot(x10, UP_RIGHT)
    x15 = shoot(x11, NEG_UNITY)
    x16 = combine(x12, x13)
    x17 = combine(x14, x15)
    x18 = combine(x16, x17)
    O = underfill(I, x7, x18)
    return O


def solve_539a4f51(I):
    x1 = shape(I)
    x2 = index(I, ORIGIN)
    x3 = colorcount(I, ZERO)
    x4 = decrement(x1)
    x5 = positive(x3)
    x6 = branch(x5, x4, x1)
    x7 = crop(I, ORIGIN, x6)
    x8 = width(x7)
    x9 = astuple(ONE, x8)
    x10 = crop(x7, ORIGIN, x9)
    x11 = vupscale(x10, x8)
    x12 = dmirror(x11)
    x13 = hconcat(x7, x11)
    x14 = hconcat(x12, x7)
    x15 = vconcat(x13, x14)
    x16 = asobject(x15)
    x17 = multiply(UNITY, TEN)
    x18 = canvas(x2, x17)
    O = paint(x18, x16)
    return O


def solve_3bdb4ada(I):
    x1 = objects(I, T, F, T)
    x2 = totuple(x1)
    x3 = compose(increment, ulcorner)
    x4 = compose(decrement, lrcorner)
    x5 = apply(x3, x2)
    x6 = apply(x4, x2)
    x7 = papply(connect, x5, x6)
    x8 = apply(last, x5)
    x9 = compose(last, first)
    x10 = power(last, TWO)
    x11 = fork(subtract, x9, x10)
    x12 = compose(even, x11)
    x13 = lbind(rbind, astuple)
    x14 = lbind(compose, x12)
    x15 = compose(x14, x13)
    x16 = fork(sfilter, first, x15)
    x17 = pair(x7, x8)
    x18 = mapply(x16, x17)
    O = fill(I, ZERO, x18)
    return O


def solve_91413438(I):
    x1 = colorcount(I, ZERO)
    x2 = subtract(NINE, x1)
    x3 = multiply(x1, THREE)
    x4 = multiply(x3, x1)
    x5 = subtract(x4, THREE)
    x6 = astuple(THREE, x5)
    x7 = canvas(ZERO, x6)
    x8 = hconcat(I, x7)
    x9 = objects(x8, T, T, T)
    x10 = first(x9)
    x11 = lbind(shift, x10)
    x12 = compose(x11, tojvec)
    x13 = interval(ZERO, x2, ONE)
    x14 = rbind(multiply, THREE)
    x15 = apply(x14, x13)
    x16 = mapply(x12, x15)
    x17 = paint(x8, x16)
    x18 = hsplit(x17, x1)
    O = merge(x18)
    return O


def solve_5daaa586(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = rbind(bordering, I)
    x4 = compose(flip, x3)
    x5 = extract(x2, x4)
    x6 = outbox(x5)
    x7 = subgrid(x6, I)
    x8 = fgpartition(x7)
    x9 = argmax(x8, size)
    x10 = color(x9)
    x11 = toindices(x9)
    x12 = prapply(connect, x11, x11)
    x13 = mfilter(x12, vline)
    x14 = mfilter(x12, hline)
    x15 = size(x13)
    x16 = size(x14)
    x17 = greater(x15, x16)
    x18 = branch(x17, x13, x14)
    O = fill(x7, x10, x18)
    return O


def solve_8dae5dfc(I):
    x1 = objects(I, F, T, T)
    x2 = rbind(objects, F)
    x3 = rbind(x2, T)
    x4 = rbind(x3, T)
    x5 = rbind(subgrid, I)
    x6 = compose(x4, x5)
    x7 = rbind(order, width)
    x8 = compose(invert, width)
    x9 = rbind(order, x8)
    x10 = compose(x7, x6)
    x11 = compose(x9, x6)
    x12 = compose(color, first)
    x13 = fork(recolor, x12, last)
    x14 = fork(pair, x10, x11)
    x15 = lbind(mapply, x13)
    x16 = compose(x15, x14)
    x17 = fork(shift, x16, ulcorner)
    x18 = mapply(x17, x1)
    O = paint(I, x18)
    return O


def solve_137f0df0(I):
    x1 = ofcolor(I, FIVE)
    x2 = delta(x1)
    x3 = apply(first, x1)
    x4 = apply(last, x1)
    x5 = asindices(I)
    x6 = rbind(contained, x3)
    x7 = rbind(contained, x4)
    x8 = chain(flip, x6, first)
    x9 = chain(flip, x7, last)
    x10 = fork(both, x8, x9)
    x11 = sfilter(x5, x10)
    x12 = fill(I, ONE, x11)
    x13 = fill(x12, TWO, x2)
    x14 = objects(x13, T, T, T)
    x15 = colorfilter(x14, ONE)
    x16 = rbind(adjacent, x2)
    x17 = compose(flip, x16)
    x18 = mfilter(x15, x17)
    O = fill(x13, ZERO, x18)
    return O


def solve_94133066(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, size)
    x3 = cover(I, x2)
    x4 = compress(x3)
    x5 = subgrid(x2, I)
    x6 = rbind(replace, ZERO)
    x7 = rbind(argmax, size)
    x8 = chain(color, x7, fgpartition)
    x9 = fork(x6, identity, x8)
    x10 = rbind(x6, ONE)
    x11 = chain(compress, x10, x9)
    x12 = matcher(x11, x4)
    x13 = initset(identity)
    x14 = insert(rot90, x13)
    x15 = initset(vmirror)
    x16 = insert(hmirror, x15)
    x17 = prapply(compose, x14, x16)
    x18 = rapply(x17, x5)
    O = extract(x18, x12)
    return O


def solve_551d5bf1(I):
    x1 = objects(I, T, T, T)
    x2 = mapply(delta, x1)
    x3 = fill(I, EIGHT, x2)
    x4 = matcher(first, ZERO)
    x5 = rbind(toobject, x3)
    x6 = rbind(sfilter, x4)
    x7 = chain(x6, x5, dneighbors)
    x8 = lbind(index, x3)
    x9 = matcher(x8, EIGHT)
    x10 = compose(size, x7)
    x11 = matcher(x10, ONE)
    x12 = fork(both, x9, x11)
    x13 = compose(center, x7)
    x14 = asindices(x3)
    x15 = sfilter(x14, x12)
    x16 = fork(subtract, x13, identity)
    x17 = fork(shoot, identity, x16)
    x18 = mapply(x17, x15)
    O = fill(x3, EIGHT, x18)
    return O


def solve_29700607(I):
    x1 = fgpartition(I)
    x2 = matcher(size, ONE)
    x3 = sfilter(x1, x2)
    x4 = difference(x1, x3)
    x5 = rbind(shoot, DOWN)
    x6 = compose(x5, center)
    x7 = fork(recolor, color, x6)
    x8 = mapply(x7, x3)
    x9 = paint(I, x8)
    x10 = rbind(argmin, first)
    x11 = compose(x10, toindices)
    x12 = compose(last, x11)
    x13 = fork(astuple, lowermost, x12)
    x14 = fork(connect, x11, x13)
    x15 = fork(connect, llcorner, lrcorner)
    x16 = fork(combine, x14, x15)
    x17 = fork(recolor, color, x16)
    x18 = mapply(x17, x4)
    O = paint(x9, x18)
    return O


def solve_0e671a1a(I):
    x1 = lbind(ofcolor, I)
    x2 = compose(first, x1)
    x3 = x2(TWO)
    x4 = x2(THREE)
    x5 = x2(FOUR)
    x6 = first(x3)
    x7 = last(x4)
    x8 = first(x5)
    x9 = last(x5)
    x10 = astuple(x6, x9)
    x11 = connect(x3, x10)
    x12 = connect(x5, x10)
    x13 = combine(x11, x12)
    x14 = astuple(x8, x7)
    x15 = connect(x5, x14)
    x16 = connect(x4, x14)
    x17 = combine(x15, x16)
    x18 = combine(x13, x17)
    O = underfill(I, FIVE, x18)
    return O


def solve_bf89d739(I):
    x1 = ofcolor(I, TWO)
    x2 = apply(initset, x1)
    x3 = product(x2, x2)
    x4 = fork(vmatching, first, last)
    x5 = fork(hmatching, first, last)
    x6 = fork(either, x4, x5)
    x7 = sfilter(x3, x6)
    x8 = fork(manhattan, first, last)
    x9 = argmax(x7, x8)
    x10 = fork(combine, first, last)
    x11 = x10(x9)
    x12 = delta(x11)
    x13 = fill(I, THREE, x12)
    x14 = rbind(gravitate, x12)
    x15 = compose(x14, initset)
    x16 = fork(add, identity, x15)
    x17 = fork(connect, identity, x16)
    x18 = mapply(x17, x1)
    O = underfill(x13, THREE, x18)
    return O


def solve_8cb8642d(I):
    x1 = objects(I, F, F, T)
    x2 = merge(x1)
    x3 = cover(I, x2)
    x4 = chain(halve, minimum, shape)
    x5 = fork(astuple, x4, x4)
    x6 = fork(add, ulcorner, x5)
    x7 = fork(subtract, lrcorner, x5)
    x8 = fork(connect, x6, x7)
    x9 = compose(backdrop, x8)
    x10 = fork(recolor, mostcolor, box)
    x11 = compose(corners, inbox)
    x12 = lbind(prapply, connect)
    x13 = fork(x12, x9, x11)
    x14 = compose(merge, x13)
    x15 = fork(combine, x9, x14)
    x16 = fork(recolor, leastcolor, x15)
    x17 = fork(combine, x10, x16)
    x18 = mapply(x17, x1)
    O = paint(x3, x18)
    return O


def solve_f3cdc58f(I):
    x1 = interval(ONE, FIVE, ONE)
    x2 = lbind(colorcount, I)
    x3 = apply(x2, x1)
    x4 = shape(I)
    x5 = canvas(ZERO, x4)
    x6 = interval(ZERO, FOUR, ONE)
    x7 = apply(tojvec, x6)
    x8 = papply(astuple, x1, x7)
    x9 = pair(x8, x3)
    x10 = compose(first, first)
    x11 = compose(last, first)
    x12 = compose(decrement, last)
    x13 = chain(last, last, first)
    x14 = fork(astuple, x12, x13)
    x15 = fork(connect, x11, x14)
    x16 = fork(recolor, x10, x15)
    x17 = mapply(x16, x9)
    x18 = paint(x5, x17)
    O = hmirror(x18)
    return O


def solve_423a55dc(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = cover(I, x2)
    x4 = compose(tojvec, first)
    x5 = fork(add, identity, x4)
    x6 = apply(x5, x2)
    x7 = normalize(x6)
    x8 = chain(invert, tojvec, height)
    x9 = x8(x2)
    x10 = increment(x9)
    x11 = ulcorner(x2)
    x12 = add(x10, x11)
    x13 = add(UP, x12)
    x14 = lrcorner(x2)
    x15 = shift(x7, x13)
    x16 = lrcorner(x15)
    x17 = subtract(x14, x16)
    x18 = shift(x15, x17)
    O = fill(x3, x1, x18)
    return O


def solve_d931c21c(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = rbind(bordering, I)
    x4 = compose(flip, x3)
    x5 = sfilter(x2, x4)
    x6 = apply(toindices, x5)
    x7 = ofcolor(I, ONE)
    x8 = colorfilter(x1, ONE)
    x9 = apply(toindices, x8)
    x10 = lbind(argmin, x9)
    x11 = lbind(rbind, manhattan)
    x12 = compose(x10, x11)
    x13 = lbind(mapply, neighbors)
    x14 = compose(x13, x12)
    x15 = fork(intersection, identity, x14)
    x16 = mapply(x14, x6)
    x17 = mapply(x15, x6)
    x18 = fill(I, THREE, x17)
    O = underfill(x18, TWO, x16)
    return O


def solve_9bebae7a(I):
    x1 = ofcolor(I, SIX)
    x2 = fork(greater, width, height)
    x3 = x2(x1)
    x4 = urcorner(x1)
    x5 = branch(x3, LEFT, ORIGIN)
    x6 = add(x4, x5)
    x7 = contained(x6, x1)
    x8 = branch(x3, hmirror, vmirror)
    x9 = branch(x3, height, width)
    x10 = ofcolor(I, FOUR)
    x11 = x9(x10)
    x12 = x8(x10)
    x13 = branch(x7, ONE, NEG_ONE)
    x14 = branch(x3, toivec, tojvec)
    x15 = x14(x11)
    x16 = multiply(x13, x15)
    x17 = shift(x12, x16)
    x18 = cover(I, x1)
    O = fill(x18, FOUR, x17)
    return O


def solve_dd2401ed(I):
    x1 = ofcolor(I, ONE)
    x2 = ofcolor(I, TWO)
    x3 = size(x1)
    x4 = ofcolor(I, FIVE)
    x5 = cover(I, x4)
    x6 = tojvec(x3)
    x7 = shift(x4, x6)
    x8 = rbind(intersection, x2)
    x9 = chain(positive, size, x8)
    x10 = compose(tojvec, x9)
    x11 = fork(shift, identity, x10)
    x12 = power(x11, TEN)
    x13 = x12(x7)
    x14 = fill(x5, FIVE, x13)
    x15 = leftmost(x13)
    x16 = lbind(greater, x15)
    x17 = compose(x16, last)
    x18 = sfilter(x2, x17)
    O = fill(x14, ONE, x18)
    return O


def solve_8731374e(I):
    x1 = objects(I, T, F, F)
    x2 = argmax(x1, size)
    x3 = subgrid(x2, I)
    x4 = height(x3)
    x5 = width(x3)
    x6 = vsplit(x3, x4)
    x7 = lbind(greater, FOUR)
    x8 = compose(x7, numcolors)
    x9 = sfilter(x6, x8)
    x10 = merge(x9)
    x11 = rot90(x10)
    x12 = vsplit(x11, x5)
    x13 = sfilter(x12, x8)
    x14 = merge(x13)
    x15 = rot270(x14)
    x16 = leastcolor(x15)
    x17 = ofcolor(x15, x16)
    x18 = fork(combine, vfrontier, hfrontier)
    x19 = mapply(x18, x17)
    O = fill(x15, x16, x19)
    return O


def solve_29623171(I):
    x1 = leastcolor(I)
    x2 = interval(ZERO, NINE, FOUR)
    x3 = product(x2, x2)
    x4 = rbind(add, THREE)
    x5 = rbind(interval, ONE)
    x6 = fork(x5, identity, x4)
    x7 = compose(x6, first)
    x8 = compose(x6, last)
    x9 = fork(product, x7, x8)
    x10 = rbind(colorcount, x1)
    x11 = rbind(toobject, I)
    x12 = compose(x10, x11)
    x13 = apply(x9, x3)
    x14 = valmax(x13, x12)
    x15 = matcher(x12, x14)
    x16 = compose(flip, x15)
    x17 = mfilter(x13, x15)
    x18 = mfilter(x13, x16)
    x19 = fill(I, x1, x17)
    O = fill(x19, ZERO, x18)
    return O


def solve_d6ad076f(I):
    x1 = objects(I, T, F, T)
    x2 = argmin(x1, size)
    x3 = argmax(x1, size)
    x4 = vmatching(x2, x3)
    x5 = branch(x4, DOWN, RIGHT)
    x6 = branch(x4, uppermost, leftmost)
    x7 = valmax(x1, x6)
    x8 = x6(x2)
    x9 = equality(x7, x8)
    x10 = branch(x9, NEG_ONE, ONE)
    x11 = multiply(x5, x10)
    x12 = inbox(x2)
    x13 = rbind(shoot, x11)
    x14 = mapply(x13, x12)
    x15 = underfill(I, EIGHT, x14)
    x16 = objects(x15, T, F, T)
    x17 = colorfilter(x16, EIGHT)
    x18 = rbind(bordering, I)
    x19 = mfilter(x17, x18)
    O = cover(x15, x19)
    return O


def solve_db93a21d(I):
    x1 = objects(I, T, T, T)
    x2 = ofcolor(I, NINE)
    x3 = colorfilter(x1, NINE)
    x4 = rbind(shoot, DOWN)
    x5 = mapply(x4, x2)
    x6 = underfill(I, ONE, x5)
    x7 = compose(halve, width)
    x8 = rbind(greater, ONE)
    x9 = compose(x8, x7)
    x10 = matcher(x7, THREE)
    x11 = power(outbox, TWO)
    x12 = power(outbox, THREE)
    x13 = mapply(outbox, x3)
    x14 = sfilter(x3, x9)
    x15 = sfilter(x3, x10)
    x16 = mapply(x11, x14)
    x17 = mapply(x12, x15)
    x18 = fill(x6, THREE, x13)
    x19 = fill(x18, THREE, x16)
    O = fill(x19, THREE, x17)
    return O


def solve_a2fd1cf0(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, THREE)
    x3 = uppermost(x1)
    x4 = leftmost(x1)
    x5 = uppermost(x2)
    x6 = leftmost(x2)
    x7 = astuple(x3, x5)
    x8 = minimum(x7)
    x9 = maximum(x7)
    x10 = astuple(x8, x6)
    x11 = astuple(x9, x6)
    x12 = connect(x10, x11)
    x13 = astuple(x4, x6)
    x14 = minimum(x13)
    x15 = maximum(x13)
    x16 = astuple(x3, x14)
    x17 = astuple(x3, x15)
    x18 = connect(x16, x17)
    x19 = combine(x12, x18)
    O = underfill(I, EIGHT, x19)
    return O


def solve_e8dc4411(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, ZERO)
    x3 = ofcolor(I, x1)
    x4 = position(x2, x3)
    x5 = fork(connect, ulcorner, lrcorner)
    x6 = x5(x2)
    x7 = intersection(x2, x6)
    x8 = equality(x6, x7)
    x9 = fork(subtract, identity, crement)
    x10 = fork(add, identity, x9)
    x11 = branch(x8, identity, x10)
    x12 = shape(x2)
    x13 = multiply(x12, x4)
    x14 = apply(x11, x13)
    x15 = interval(ONE, FIVE, ONE)
    x16 = lbind(multiply, x14)
    x17 = apply(x16, x15)
    x18 = lbind(shift, x2)
    x19 = mapply(x18, x17)
    O = fill(I, x1, x19)
    return O


def solve_b0c4d837(I):
    x1 = ofcolor(I, FIVE)
    x2 = ofcolor(I, EIGHT)
    x3 = height(x1)
    x4 = decrement(x3)
    x5 = height(x2)
    x6 = subtract(x4, x5)
    x7 = astuple(ONE, x6)
    x8 = canvas(EIGHT, x7)
    x9 = subtract(SIX, x6)
    x10 = astuple(ONE, x9)
    x11 = canvas(ZERO, x10)
    x12 = hconcat(x8, x11)
    x13 = hsplit(x12, TWO)
    x14 = first(x13)
    x15 = last(x13)
    x16 = vmirror(x15)
    x17 = vconcat(x14, x16)
    x18 = astuple(ONE, THREE)
    x19 = canvas(ZERO, x18)
    O = vconcat(x17, x19)
    return O


def solve_272f95fa(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = apply(toindices, x2)
    x4 = rbind(bordering, I)
    x5 = compose(flip, x4)
    x6 = extract(x3, x5)
    x7 = remove(x6, x3)
    x8 = lbind(vmatching, x6)
    x9 = lbind(hmatching, x6)
    x10 = sfilter(x7, x8)
    x11 = sfilter(x7, x9)
    x12 = argmin(x10, uppermost)
    x13 = argmax(x10, uppermost)
    x14 = argmin(x11, leftmost)
    x15 = argmax(x11, leftmost)
    x16 = fill(I, SIX, x6)
    x17 = fill(x16, TWO, x12)
    x18 = fill(x17, ONE, x13)
    x19 = fill(x18, FOUR, x14)
    O = fill(x19, THREE, x15)
    return O


def solve_53b68214(I):
    x1 = width(I)
    x2 = objects(I, T, T, T)
    x3 = first(x2)
    x4 = vperiod(x3)
    x5 = toivec(x4)
    x6 = interval(ZERO, NINE, ONE)
    x7 = lbind(multiply, x5)
    x8 = apply(x7, x6)
    x9 = lbind(shift, x3)
    x10 = mapply(x9, x8)
    x11 = astuple(x1, x1)
    x12 = portrait(x3)
    x13 = shape(x3)
    x14 = add(DOWN, x13)
    x15 = decrement(x14)
    x16 = shift(x3, x15)
    x17 = branch(x12, x10, x16)
    x18 = canvas(ZERO, x11)
    x19 = paint(x18, x3)
    O = paint(x19, x17)
    return O


def solve_e40b9e2f(I):
    x1 = objects(I, F, T, T)
    x2 = neighbors(ORIGIN)
    x3 = mapply(neighbors, x2)
    x4 = first(x1)
    x5 = lbind(intersection, x4)
    x6 = compose(hmirror, vmirror)
    x7 = x6(x4)
    x8 = lbind(shift, x7)
    x9 = apply(x8, x3)
    x10 = argmax(x9, x5)
    x11 = paint(I, x10)
    x12 = objects(x11, F, T, T)
    x13 = first(x12)
    x14 = compose(size, x5)
    x15 = compose(vmirror, dmirror)
    x16 = x15(x13)
    x17 = lbind(shift, x16)
    x18 = apply(x17, x3)
    x19 = argmax(x18, x14)
    O = paint(x11, x19)
    return O


def solve_2bee17df(I):
    x1 = height(I)
    x2 = rot90(I)
    x3 = subtract(x1, TWO)
    x4 = interval(ZERO, x1, ONE)
    x5 = rbind(colorcount, ZERO)
    x6 = matcher(x5, x3)
    x7 = rbind(vsplit, x1)
    x8 = lbind(apply, x6)
    x9 = compose(x8, x7)
    x10 = x9(I)
    x11 = pair(x4, x10)
    x12 = sfilter(x11, last)
    x13 = mapply(hfrontier, x12)
    x14 = x9(x2)
    x15 = pair(x14, x4)
    x16 = sfilter(x15, first)
    x17 = mapply(vfrontier, x16)
    x18 = astuple(x13, x17)
    x19 = merge(x18)
    O = underfill(I, THREE, x19)
    return O


def solve_df8cc377(I):
    x1 = objects(I, T, F, T)
    x2 = sizefilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = order(x3, size)
    x5 = lbind(colorcount, I)
    x6 = merge(x2)
    x7 = palette(x6)
    x8 = order(x7, x5)
    x9 = pair(x4, x8)
    x10 = fork(add, first, last)
    x11 = compose(even, x10)
    x12 = compose(ulcorner, first)
    x13 = chain(normalize, backdrop, first)
    x14 = rbind(sfilter, x11)
    x15 = compose(x14, x13)
    x16 = fork(shift, x15, x12)
    x17 = fork(recolor, last, x16)
    x18 = mapply(x17, x9)
    x19 = cover(I, x6)
    O = underpaint(x19, x18)
    return O


def solve_fb791726(I):
    x1 = shape(I)
    x2 = double(x1)
    x3 = canvas(ZERO, x2)
    x4 = asobject(I)
    x5 = paint(x3, x4)
    x6 = shift(x4, x1)
    x7 = paint(x5, x6)
    x8 = leastcolor(I)
    x9 = rbind(add, UP)
    x10 = rbind(add, DOWN)
    x11 = lbind(index, x7)
    x12 = compose(x11, x9)
    x13 = compose(x11, x10)
    x14 = matcher(x12, x8)
    x15 = matcher(x13, x8)
    x16 = fork(both, x14, x15)
    x17 = asindices(x7)
    x18 = sfilter(x17, x16)
    x19 = mapply(hfrontier, x18)
    O = fill(x7, THREE, x19)
    return O


def solve_7d18a6fb(I):
    x1 = ofcolor(I, ONE)
    x2 = subgrid(x1, I)
    x3 = backdrop(x1)
    x4 = cover(I, x3)
    x5 = objects(x4, T, T, T)
    x6 = palette(x2)
    x7 = remove(ONE, x6)
    x8 = rbind(contained, x7)
    x9 = compose(x8, color)
    x10 = sfilter(x5, x9)
    x11 = lbind(ofcolor, x2)
    x12 = chain(decrement, center, x11)
    x13 = compose(x12, color)
    x14 = fork(shift, normalize, x13)
    x15 = mapply(x14, x10)
    x16 = fgpartition(x2)
    x17 = merge(x16)
    x18 = cover(x2, x17)
    x19 = paint(x18, x15)
    O = replace(x19, ONE, ZERO)
    return O


def solve_54db823b(I):
    x1 = shape(I)
    x2 = canvas(ZERO, x1)
    x3 = vconcat(I, x2)
    x4 = objects(x3, F, T, T)
    x5 = rbind(colorcount, NINE)
    x6 = argmin(x4, x5)
    x7 = cover(x3, x6)
    x8 = tophalf(x7)
    x9 = astuple(TWO, FOUR)
    x10 = index(x8, x9)
    x11 = equality(x10, NINE)
    x12 = initset(x9)
    x13 = shift(x12, LEFT)
    x14 = recolor(THREE, x12)
    x15 = recolor(NINE, x13)
    x16 = rbind(paint, x14)
    x17 = rbind(paint, x15)
    x18 = compose(x17, x16)
    x19 = branch(x11, x18, identity)
    O = x19(x8)
    return O


def solve_1c02dbbe(I):
    x1 = asindices(I)
    x2 = partition(I)
    x3 = colorfilter(x2, ZERO)
    x4 = colorfilter(x2, FIVE)
    x5 = difference(x2, x3)
    x6 = difference(x5, x4)
    x7 = compose(increment, lowermost)
    x8 = compose(increment, rightmost)
    x9 = rbind(interval, ONE)
    x10 = fork(x9, uppermost, x7) 
    x11 = fork(x9, leftmost, x8)
    x12 = lbind(prapply, astuple)
    x13 = fork(x12, x10, x11)
    x14 = fork(recolor, color, x13)
    x15 = mapply(x14, x6)
    x16 = paint(I, x15)
    x17 = ofcolor(I, FIVE)
    x18 = backdrop(x17)
    x19 = difference(x1, x18)
    O = fill(x16, ZERO, x19)
    return O


def solve_2f0c5170(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, numcolors)
    x3 = argmin(x1, numcolors)
    x4 = subgrid(x2, I)
    x5 = subgrid(x3, I)
    x6 = leastcolor(x5)
    x7 = ofcolor(x5, x6)
    x8 = first(x7)
    x9 = objects(x4, F, T, T)
    x10 = mapply(normalize, x9)
    x11 = merge(x9)
    x12 = cover(x4, x11)
    x13 = paint(x12, x10)
    x14 = ofcolor(x13, x6)
    x15 = first(x14)
    x16 = objects(x13, F, T, T)
    x17 = merge(x16)
    x18 = subtract(x8, x15)
    x19 = shift(x17, x18)
    O = paint(x5, x19)
    return O


def solve_6cdd2623(I):
    x1 = leastcolor(I)
    x2 = height(I)
    x3 = width(I)
    x4 = objects(I, T, F, T)
    x5 = merge(x4)
    x6 = cover(I, x5)
    x7 = ofcolor(I, x1)
    x8 = prapply(connect, x7, x7)
    x9 = merge(x8)
    x10 = decrement(x2)
    x11 = decrement(x3)
    x12 = lbind(greater, x10)
    x13 = lbind(greater, x11)
    x14 = fork(both, positive, x12)
    x15 = compose(x14, first)
    x16 = fork(both, positive, x13)
    x17 = compose(x16, last)
    x18 = fork(both, x15, x17)
    x19 = sfilter(x9, x18)
    x20 = fill(x6, x1, x19)
    O = fill(x20, x1, x7)
    return O


def solve_8d510a79(I):
    x1 = height(I)
    x2 = halve(x1)
    x3 = ofcolor(I, ONE)
    x4 = ofcolor(I, TWO)
    x5 = ofcolor(I, FIVE)
    x6 = rbind(gravitate, x5)
    x7 = compose(x6, initset)
    x8 = fork(add, identity, x7)
    x9 = fork(connect, identity, x8)
    x10 = mapply(x9, x4)
    x11 = fill(I, TWO, x10)
    x12 = rbind(greater, x2)
    x13 = compose(x12, first)
    x14 = sfilter(x3, x13)
    x15 = difference(x3, x14)
    x16 = rbind(shoot, UP)
    x17 = rbind(shoot, DOWN)
    x18 = mapply(x16, x15)
    x19 = mapply(x17, x14)
    x20 = combine(x18, x19)
    O = fill(x11, ONE, x20)
    return O


def solve_b190f7f5(I):
    x1 = dmirror(I)
    x2 = portrait(I)
    x3 = branch(x2, x1, I)
    x4 = lefthalf(x3)
    x5 = righthalf(x3)
    x6 = palette(x4)
    x7 = contained(EIGHT, x6)
    x8 = branch(x7, x4, x5)
    x9 = branch(x7, x5, x4)
    x10 = width(x9)
    x11 = upscale(x9, x10)
    x12 = repeat(x8, x10)
    x13 = merge(x12)
    x14 = dmirror(x13)
    x15 = repeat(x14, x10)
    x16 = merge(x15)
    x17 = dmirror(x16)
    x18 = ofcolor(x17, ZERO)
    x19 = fill(x11, ZERO, x18)
    x20 = dmirror(x19)
    O = branch(x2, x20, x19)
    return O


def solve_a3df8b1e(I):
    x1 = shape(I)
    x2 = ofcolor(I, ONE)
    x3 = first(x2)
    x4 = shoot(x3, UP_RIGHT)
    x5 = fill(I, ONE, x4)
    x6 = ofcolor(x5, ONE)
    x7 = urcorner(x6)
    x8 = shoot(x7, NEG_UNITY)
    x9 = fill(x5, ONE, x8)
    x10 = objects(x9, T, T, T)
    x11 = first(x10)
    x12 = subgrid(x11, x9)
    x13 = shape(x12)
    x14 = subtract(x13, DOWN)
    x15 = crop(x12, DOWN, x14)
    x16 = vconcat(x15, x15)
    x17 = vconcat(x16, x16)
    x18 = vconcat(x17, x17)
    x19 = hmirror(x18)
    x20 = crop(x19, ORIGIN, x1)
    O = hmirror(x20)
    return O


def solve_cdecee7f(I):
    x1 = objects(I, T, F, T)
    x2 = astuple(ONE, THREE)
    x3 = size(x1)
    x4 = order(x1, leftmost)
    x5 = apply(color, x4)
    x6 = rbind(canvas, UNITY)
    x7 = apply(x6, x5)
    x8 = merge(x7)
    x9 = dmirror(x8)
    x10 = subtract(NINE, x3)
    x11 = astuple(ONE, x10)
    x12 = canvas(ZERO, x11)
    x13 = hconcat(x9, x12)
    x14 = hsplit(x13, THREE)
    x15 = merge(x14)
    x16 = crop(x15, ORIGIN, x2)
    x17 = crop(x15, DOWN, x2)
    x18 = crop(x15, TWO_BY_ZERO, x2)
    x19 = vmirror(x17)
    x20 = vconcat(x16, x19)
    O = vconcat(x20, x18)
    return O


def solve_3345333e(I):
    x1 = mostcolor(I)
    x2 = asindices(I)
    x3 = objects(I, F, T, T)
    x4 = first(x3)
    x5 = mostcolor(x4)
    x6 = matcher(first, x5)
    x7 = sfilter(x4, x6)
    x8 = toindices(x7)
    x9 = ulcorner(x7)
    x10 = difference(x2, x8)
    x11 = fill(I, x1, x10)
    x12 = subgrid(x7, x11)
    x13 = vmirror(x12)
    x14 = ofcolor(x13, x5)
    x15 = last(x9)
    x16 = even(x15)
    x17 = invert(x16)
    x18 = tojvec(x17)
    x19 = add(x9, x18)
    x20 = shift(x14, x19)
    O = fill(x11, x5, x20)
    return O


def solve_9772c176(I):
    x1 = astuple(THREE, ONE)
    x2 = astuple(EIGHT, UNITY)
    x3 = canvas(EIGHT, x1)
    x4 = canvas(ZERO, x1)
    x5 = asobject(x3)
    x6 = asobject(x4)
    x7 = shift(x6, RIGHT)
    x8 = combine(x5, x7)
    x9 = initset(x2)
    x10 = lbind(shift, x9)
    x11 = rbind(occurrences, x8)
    x12 = lbind(mapply, x10)
    x13 = compose(x12, x11)
    x14 = fork(paint, identity, x13)
    x15 = compose(rot90, x14)
    x16 = double(EIGHT)
    x17 = power(x15, x16)
    x18 = x17(I)
    x19 = ofcolor(I, EIGHT)
    x20 = replace(x18, EIGHT, FOUR)
    O = fill(x20, EIGHT, x19)
    return O


def solve_642248e4(I):
    x1 = objects(I, T, T, T)
    x2 = colorfilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = first(x3)
    x5 = last(x3)
    x6 = lbind(manhattan, x4)
    x7 = lbind(manhattan, x5)
    x8 = fork(greater, x6, x7)
    x9 = sfilter(x2, x8)
    x10 = color(x5)
    x11 = color(x4)
    x12 = merge(x9)
    x13 = gravitate(x12, x5)
    x14 = sign(x13)
    x15 = shift(x12, x14)
    x16 = fill(I, x10, x15)
    x17 = difference(x2, x9)
    x18 = merge(x17)
    x19 = invert(x14)
    x20 = shift(x18, x19)
    O = fill(x16, x11, x20)
    return O


def solve_bd14c3bf(I):
    x1 = objects(I, T, T, T)
    x2 = fork(add, uppermost, leftmost)
    x3 = argmin(x1, x2)
    x4 = rbind(subgrid, I)
    x5 = rbind(objects, F)
    x6 = rbind(x5, T)
    x7 = rbind(x6, T)
    x8 = rbind(colorfilter, ZERO)
    x9 = chain(x8, x7, x4)
    x10 = compose(size, x9)
    x11 = lbind(rbind, bordering)
    x12 = compose(x11, x4)
    x13 = fork(sfilter, x9, x12)
    x14 = compose(size, x13)
    x15 = x10(x3)
    x16 = x14(x3)
    x17 = matcher(x10, x15)
    x18 = matcher(x14, x16)
    x19 = fork(both, x17, x18)
    x20 = mfilter(x1, x19)
    O = fill(I, TWO, x20)
    return O


def solve_d304284e(I):
    x1 = ofcolor(I, SEVEN)
    x2 = width(x1)
    x3 = increment(x2)
    x4 = tojvec(x3)
    x5 = lbind(multiply, x4)
    x6 = lbind(shift, x1)
    x7 = interval(ZERO, SEVEN, ONE)
    x8 = apply(x5, x7)
    x9 = mapply(x6, x8)
    x10 = fill(I, SEVEN, x9)
    x11 = interval(TWO, SEVEN, THREE)
    x12 = apply(x5, x11)
    x13 = mapply(x6, x12)
    x14 = height(x1)
    x15 = increment(x14)
    x16 = toivec(x15)
    x17 = lbind(multiply, x16)
    x18 = apply(x17, x7)
    x19 = lbind(shift, x13)
    x20 = mapply(x19, x18)
    O = fill(x10, SIX, x20)
    return O


def solve_cad67732(I):
    x1 = index(I, ORIGIN)
    x2 = equality(x1, ZERO)
    x3 = branch(x2, vmirror, identity)
    x4 = x3(I)
    x5 = shape(I)
    x6 = double(x5)
    x7 = canvas(ZERO, x6)
    x8 = fgpartition(x4)
    x9 = merge(x8)
    x10 = paint(x7, x9)
    x11 = interval(ONE, SIX, ONE)
    x12 = pair(x11, x11)
    x13 = lbind(shift, x9)
    x14 = lbind(intersection, x9)
    x15 = chain(size, x14, x13)
    x16 = argmax(x12, x15)
    x17 = lbind(multiply, x16)
    x18 = apply(x17, x11)
    x19 = mapply(x13, x18)
    x20 = paint(x10, x19)
    O = x3(x20)
    return O


def solve_50aad11f(I):
    x1 = objects(I, T, T, T)
    x2 = colorfilter(x1, SIX)
    x3 = difference(x1, x2)
    x4 = lbind(lbind, manhattan)
    x5 = lbind(argmin, x3)
    x6 = chain(color, x5, x4)
    x7 = fork(recolor, x6, identity)
    x8 = mapply(x7, x2)
    x9 = paint(I, x8)
    x10 = merge(x3)
    x11 = cover(x9, x10)
    x12 = portrait(x11)
    x13 = branch(x12, identity, rot90)
    x14 = branch(x12, identity, rot270)
    x15 = x13(x11)
    x16 = objects(x15, T, T, T)
    x17 = order(x16, uppermost)
    x18 = rbind(subgrid, x15)
    x19 = apply(x18, x17)
    x20 = merge(x19)
    O = x14(x20)
    return O


def solve_1e97544e(I):
    x1 = height(I)
    x2 = vsplit(I, x1)
    x3 = last(x2)
    x4 = vupscale(x3, x1)
    x5 = asobject(x4)
    x6 = chain(increment, last, last)
    x7 = compose(first, last)
    x8 = compose(last, last)
    x9 = fork(greater, x7, x8)
    x10 = compose(decrement, x7)
    x11 = fork(greater, x6, x10)
    x12 = sfilter(x5, x9)
    x13 = sfilter(x5, x11)
    x14 = shift(x13, RIGHT)
    x15 = combine(x12, x14)
    x16 = shape(I)
    x17 = canvas(ZERO, x16)
    x18 = paint(x17, x15)
    x19 = index(I, ORIGIN)
    x20 = initset(ORIGIN)
    O = fill(x18, x19, x20)
    return O


def solve_f9012d9b(I):
    x1 = objects(I, T, F, F)
    x2 = ofcolor(I, ZERO)
    x3 = lbind(contained, ZERO)
    x4 = chain(flip, x3, palette)
    x5 = mfilter(x1, x4)
    x6 = vsplit(I, TWO)
    x7 = hsplit(I, TWO)
    x8 = extract(x6, x4)
    x9 = extract(x7, x4)
    x10 = asobject(x8)
    x11 = asobject(x9)
    x12 = vperiod(x10)
    x13 = hperiod(x11)
    x14 = neighbors(ORIGIN)
    x15 = mapply(neighbors, x14)
    x16 = astuple(x12, x13)
    x17 = rbind(multiply, x16)
    x18 = apply(x17, x15)
    x19 = lbind(shift, x5)
    x20 = mapply(x19, x18)
    x21 = paint(I, x20)
    O = subgrid(x2, x21)
    return O


def solve_d89b689b(I):
    x1 = asindices(I)
    x2 = ofcolor(I, EIGHT)
    x3 = replace(I, EIGHT, ZERO)
    x4 = vsplit(x3, TWO)
    x5 = rbind(order, leftmost)
    x6 = lbind(apply, color)
    x7 = rbind(repeat, ONE)
    x8 = chain(x7, x6, x5)
    x9 = matcher(first, ZERO)
    x10 = compose(flip, x9)
    x11 = rbind(sfilter, x10)
    x12 = lbind(apply, initset)
    x13 = chain(x12, x11, asobject)
    x14 = compose(x8, x13)
    x15 = apply(x14, x4)
    x16 = merge(x15)
    x17 = ulcorner(x2)
    x18 = asindices(x16)
    x19 = toobject(x18, x16)
    x20 = shift(x19, x17)
    x21 = cover(I, x1)
    O = paint(x21, x20)
    return O


def solve_e21d9049(I):
    x1 = asindices(I)
    x2 = leastcolor(I)
    x3 = objects(I, T, F, T)
    x4 = ofcolor(I, x2)
    x5 = merge(x3)
    x6 = shape(x5)
    x7 = neighbors(ORIGIN)
    x8 = lbind(mapply, neighbors)
    x9 = power(x8, TWO)
    x10 = x9(x7)
    x11 = lbind(multiply, x6)
    x12 = lbind(shift, x5)
    x13 = apply(x11, x10)
    x14 = mapply(x12, x13)
    x15 = lbind(hmatching, x4)
    x16 = lbind(vmatching, x4)
    x17 = fork(either, x15, x16)
    x18 = compose(x17, initset)
    x19 = paint(I, x14)
    x20 = sfilter(x1, x18)
    x21 = difference(x1, x20)
    O = cover(x19, x21)
    return O


def solve_4522001f(I):
    x1 = objects(I, F, F, T)
    x2 = first(x1)
    x3 = toindices(x2)
    x4 = contained(ZERO_BY_TWO, x3)
    x5 = contained(TWO_BY_TWO, x3)
    x6 = contained(TWO_BY_ZERO, x3)
    x7 = astuple(NINE, NINE)
    x8 = canvas(ZERO, x7)
    x9 = astuple(THREE, ORIGIN)
    x10 = initset(x9)
    x11 = upscale(x10, TWO)
    x12 = upscale(x11, TWO)
    x13 = shape(x12)
    x14 = shift(x12, x13)
    x15 = combine(x12, x14)
    x16 = paint(x8, x15)
    x17 = rot90(x16)
    x18 = rot180(x16)
    x19 = rot270(x16)
    x20 = branch(x4, x17, x16)
    x21 = branch(x5, x18, x20)
    O = branch(x6, x19, x21)
    return O


def solve_caa06a1f(I):
    x1 = asobject(I)
    x2 = shape(I)
    x3 = decrement(x2)
    x4 = index(I, x3)
    x5 = double(x2)
    x6 = canvas(x4, x5)
    x7 = paint(x6, x1)
    x8 = objects(x7, F, F, T)
    x9 = first(x8)
    x10 = shift(x9, LEFT)
    x11 = vperiod(x10)
    x12 = hperiod(x10)
    x13 = neighbors(ORIGIN)
    x14 = lbind(mapply, neighbors)
    x15 = power(x14, TWO)
    x16 = x15(x13)
    x17 = astuple(x11, x12)
    x18 = lbind(multiply, x17)
    x19 = apply(x18, x16)
    x20 = lbind(shift, x10)
    x21 = mapply(x20, x19)
    O = paint(I, x21)
    return O


def solve_a48eeaf7(I):
    x1 = objects(I, T, F, T)
    x2 = ofcolor(I, TWO)
    x3 = colorfilter(x1, FIVE)
    x4 = rbind(gravitate, x2)
    x5 = fork(shift, identity, x4)
    x6 = mapply(x5, x3)
    x7 = paint(I, x6)
    x8 = rbind(vmatching, x2)
    x9 = rbind(hmatching, x2)
    x10 = fork(either, x8, x9)
    x11 = sfilter(x3, x10)
    x12 = merge(x3)
    x13 = cover(x7, x12)
    x14 = difference(x3, x11)
    x15 = rbind(position, x2)
    x16 = rbind(manhattan, x2)
    x17 = compose(halve, x16)
    x18 = fork(multiply, x17, x15)
    x19 = fork(subtract, x18, x15)
    x20 = fork(shift, identity, x19)
    x21 = mapply(x20, x14)
    O = paint(x13, x21)
    return O


def solve_63613498(I):
    x1 = objects(I, F, F, T)
    x2 = crop(I, ORIGIN, THREE_BY_THREE)
    x3 = partition(x2)
    x4 = colorfilter(x3, ZERO)
    x5 = difference(x3, x4)
    x6 = first(x5)
    x7 = toindices(x6)
    x8 = ulcorner(x7)
    x9 = invert(x8)
    x10 = shift(x7, x9)
    x11 = totuple(x1)
    x12 = apply(toindices, x11)
    x13 = apply(normalize, x12)
    x14 = pair(x11, x13)
    x15 = matcher(last, x10)
    x16 = sfilter(x14, x15)
    x17 = matcher(first, x6)
    x18 = compose(flip, x17)
    x19 = extract(x16, x18)
    x20 = first(x19)
    x21 = recolor(FIVE, x20)
    O = paint(I, x21)
    return O


def solve_746b3537(I):
    x1 = rot90(I)
    x2 = objects(I, T, F, F)
    x3 = sfilter(x2, vline)
    x4 = compose(positive, size)
    x5 = x4(x3)
    x6 = branch(x5, x1, I)
    x7 = height(x6)
    x8 = astuple(x7, ONE)
    x9 = crop(x6, ORIGIN, x8)
    x10 = objects(x9, T, F, F)
    x11 = asindices(x9)
    x12 = apply(center, x10)
    x13 = difference(x11, x12)
    x14 = fill(x9, ZERO, x13)
    x15 = vsplit(x14, x7)
    x16 = canvas(ZERO, UNITY)
    x17 = rbind(equality, x16)
    x18 = compose(flip, x17)
    x19 = sfilter(x15, x18)
    x20 = merge(x19)
    x21 = dmirror(x20)
    O = branch(x5, x21, x20)
    return O


def solve_06df4c85(I):
    x1 = partition(I)
    x2 = mostcolor(I)
    x3 = ofcolor(I, x2)
    x4 = colorfilter(x1, ZERO)
    x5 = argmax(x1, size)
    x6 = difference(x1, x4)
    x7 = remove(x5, x6)
    x8 = merge(x7)
    x9 = product(x8, x8)
    x10 = power(first, TWO)
    x11 = compose(first, last)
    x12 = fork(equality, x10, x11)
    x13 = sfilter(x9, x12)
    x14 = compose(last, first)
    x15 = power(last, TWO)
    x16 = fork(connect, x14, x15)
    x17 = fork(recolor, color, x16)
    x18 = apply(x17, x13)
    x19 = fork(either, vline, hline)
    x20 = mfilter(x18, x19)
    x21 = paint(I, x20)
    O = fill(x21, x2, x3)
    return O


def solve_ff72ca3e(I):
    x1 = ofcolor(I, FOUR)
    x2 = mapply(neighbors, x1)
    x3 = fill(I, TWO, x2)
    x4 = rbind(objects, F)
    x5 = rbind(x4, F)
    x6 = rbind(x5, T)
    x7 = rbind(colorfilter, TWO)
    x8 = compose(x7, x6)
    x9 = initset(ZERO)
    x10 = lbind(equality, x9)
    x11 = compose(x10, palette)
    x12 = lbind(chain, x11)
    x13 = rbind(x12, outbox)
    x14 = lbind(rbind, toobject)
    x15 = compose(x13, x14)
    x16 = fork(sfilter, x8, x15)
    x17 = lbind(mapply, outbox)
    x18 = lbind(recolor, TWO)
    x19 = chain(x18, x17, x16)
    x20 = fork(paint, identity, x19)
    x21 = power(x20, FIVE)
    O = x21(x3)
    return O


def solve_a57f2f04(I):
    x1 = objects(I, F, T, T)
    x2 = rbind(objects, T)
    x3 = rbind(x2, T)
    x4 = rbind(x3, T)
    x5 = rbind(subgrid, I)
    x6 = chain(first, x4, x5)
    x7 = compose(shape, x6)
    x8 = neighbors(ORIGIN)
    x9 = lbind(mapply, neighbors)
    x10 = power(x9, SEVEN)
    x11 = x10(x8)
    x12 = rbind(apply, x11)
    x13 = lbind(lbind, shift)
    x14 = compose(x13, x6)
    x15 = lbind(lbind, multiply)
    x16 = chain(x12, x15, x7)
    x17 = fork(mapply, x14, x16)
    x18 = fork(paint, x5, x17)
    x19 = compose(asobject, x18)
    x20 = fork(shift, x19, ulcorner)
    x21 = mapply(x20, x1)
    O = paint(I, x21)
    return O


def solve_95a58926(I):
    x1 = leastcolor(I)
    x2 = replace(I, x1, ZERO)
    x3 = astuple(ONE, TWO)
    x4 = canvas(FIVE, x3)
    x5 = asobject(x4)
    x6 = lbind(mapply, hfrontier)
    x7 = rbind(occurrences, x5)
    x8 = compose(x6, x7)
    x9 = x8(x2)
    x10 = fill(x2, FIVE, x9)
    x11 = rot90(x10)
    x12 = x8(x11)
    x13 = fill(x11, FIVE, x12)
    x14 = rot270(x13)
    x15 = rbind(colorcount, FIVE)
    x16 = rbind(toobject, x14)
    x17 = chain(x15, x16, dneighbors)
    x18 = rbind(greater, TWO)
    x19 = compose(x18, x17)
    x20 = ofcolor(x14, FIVE)
    x21 = sfilter(x20, x19)
    O = fill(x14, x1, x21)
    return O


def solve_03560426(I):
    x1 = fgpartition(I)
    x2 = rbind(argmin, leftmost)
    x3 = shape(I)
    x4 = canvas(ZERO, x3)
    x5 = x2(x1)
    x6 = normalize(x5)
    x7 = chain(x2, fgpartition, last)
    x8 = chain(merge, fgpartition, first)
    x9 = compose(normalize, x7)
    x10 = compose(lrcorner, x8)
    x11 = fork(shift, x9, x10)
    x12 = fork(paint, first, x11)
    x13 = fork(cover, last, x7)
    x14 = fork(astuple, x12, x13)
    x15 = size(x1)
    x16 = decrement(x15)
    x17 = paint(x4, x6)
    x18 = cover(I, x5)
    x19 = astuple(x17, x18)
    x20 = power(x14, x16)
    x21 = x20(x19)
    O = first(x21)
    return O


def solve_ac0c5833(I):
    x1 = objects(I, T, T, T)
    x2 = argmax(x1, size)
    x3 = remove(x2, x1)
    x4 = lbind(manhattan, x2)
    x5 = lbind(greater, SIX)
    x6 = compose(x5, x4)
    x7 = mfilter(x3, x6)
    x8 = combine(x7, x2)
    x9 = normalize(x8)
    x10 = matcher(first, FOUR)
    x11 = sfilter(x9, x10)
    x12 = ulcorner(x11)
    x13 = invert(x12)
    x14 = shift(x9, x13)
    x15 = lbind(shift, x14)
    x16 = rbind(occurrences, x11)
    x17 = lbind(mapply, x15)
    x18 = compose(x17, x16)
    x19 = fork(paint, identity, x18)
    x20 = compose(rot90, x19)
    x21 = power(x20, FOUR)
    O = x21(I)
    return O


def solve_97239e3d(I):
    x1 = palette(I)
    x2 = remove(EIGHT, x1)
    x3 = remove(ZERO, x2)
    x4 = objects(I, T, F, F)
    x5 = colorfilter(x4, EIGHT)
    x6 = colorfilter(x4, ZERO)
    x7 = sizefilter(x6, ONE)
    x8 = lbind(ofcolor, I)
    x9 = compose(backdrop, x8)
    x10 = compose(positive, size)
    x11 = lbind(mfilter, x5)
    x12 = lbind(mfilter, x7)
    x13 = lbind(chain, x10)
    x14 = rbind(x13, toindices)
    x15 = lbind(rbind, intersection)
    x16 = chain(x14, x15, x9)
    x17 = chain(outbox, x11, x16)
    x18 = chain(toindices, x12, x16)
    x19 = fork(combine, x17, x18)
    x20 = fork(recolor, identity, x19)
    x21 = mapply(x20, x3)
    O = paint(I, x21)
    return O


def solve_639f5a19(I):
    x1 = fork(difference, toindices, box)
    x2 = objects(I, T, T, T)
    x3 = power(x1, TWO)
    x4 = rbind(subgrid, I)
    x5 = compose(lefthalf, tophalf)
    x6 = chain(asobject, x5, x4)
    x7 = chain(toivec, halve, height)
    x8 = chain(tojvec, halve, width)
    x9 = fork(shift, x6, ulcorner)
    x10 = mapply(x9, x2)
    x11 = fork(add, ulcorner, x7)
    x12 = fork(shift, x6, x11)
    x13 = mapply(x12, x2)
    x14 = fill(I, TWO, x13)
    x15 = fill(x14, SIX, x10)
    x16 = fork(add, ulcorner, x8)
    x17 = fork(shift, x6, x16)
    x18 = mapply(x17, x2)
    x19 = fill(x15, ONE, x18)
    x20 = replace(x19, EIGHT, THREE)
    x21 = mapply(x3, x2)
    O = fill(x20, FOUR, x21)
    return O


def solve_4e469f39(I):
    x1 = objects(I, T, T, T)
    x2 = mapply(delta, x1)
    x3 = fill(I, TWO, x2)
    x4 = asindices(x3)
    x5 = lbind(index, x3)
    x6 = rbind(toobject, x3)
    x7 = matcher(x5, ZERO)
    x8 = rbind(colorcount, FIVE)
    x9 = chain(x8, x6, neighbors)
    x10 = matcher(x9, TWO)
    x11 = rbind(colorcount, TWO)
    x12 = chain(x11, x6, dneighbors)
    x13 = matcher(x12, ONE)
    x14 = fork(both, x7, x10)
    x15 = fork(both, x14, x13)
    x16 = rbind(extract, x14)
    x17 = compose(x16, dneighbors)
    x18 = sfilter(x4, x15)
    x19 = fork(subtract, x17, identity)
    x20 = fork(shoot, identity, x19)
    x21 = mapply(x20, x18)
    O = fill(x3, TWO, x21)
    return O


def solve_fe9372f3(I):
    x1 = ofcolor(I, TWO)
    x2 = center(x1)
    x3 = shoot(x2, UNITY)
    x4 = shoot(x2, NEG_UNITY)
    x5 = shoot(x2, UP_RIGHT)
    x6 = shoot(x2, DOWN_LEFT)
    x7 = combine(x3, x4)
    x8 = combine(x5, x6)
    x9 = combine(x7, x8)
    x10 = underfill(I, ONE, x9)
    x11 = fork(combine, hfrontier, vfrontier)
    x12 = x11(x2)
    x13 = underfill(x10, EIGHT, x12)
    x14 = lbind(manhattan, x1)
    x15 = compose(x14, initset)
    x16 = rbind(divide, THREE)
    x17 = rbind(multiply, THREE)
    x18 = chain(x17, x16, x15)
    x19 = fork(equality, x18, x15)
    x20 = sfilter(x12, x19)
    x21 = fill(x13, FOUR, x20)
    O = fill(x21, TWO, x1)
    return O


def solve_d5c634a2(I):
    x1 = objects(I, T, F, T)
    x2 = lbind(index, I)
    x3 = compose(x2, ulcorner)
    x4 = matcher(x3, ZERO)
    x5 = sfilter(x1, x4)
    x6 = difference(x1, x5)
    x7 = size(x5)
    x8 = size(x6)
    x9 = astuple(ORIGIN, TWO_BY_ZERO)
    x10 = astuple(ZERO_BY_TWO, TWO_BY_TWO)
    x11 = combine(x9, x10)
    x12 = lbind(apply, first)
    x13 = lbind(pair, x11)
    x14 = compose(x12, x13)
    x15 = interval(ZERO, x7, ONE)
    x16 = interval(ZERO, x8, ONE)
    x17 = x14(x15)
    x18 = x14(x16)
    x19 = canvas(ZERO, THREE_BY_THREE)
    x20 = fill(x19, THREE, x17)
    x21 = fill(x19, ONE, x18)
    O = hconcat(x20, x21)
    return O


def solve_d2acf2cb(I):
    x1 = ofcolor(I, FOUR)
    x2 = prapply(connect, x1, x1)
    x3 = fork(either, vline, hline)
    x4 = asobject(I)
    x5 = box(x4)
    x6 = rbind(intersection, x5)
    x7 = compose(size, x6)
    x8 = matcher(x7, TWO)
    x9 = fork(both, x3, x8)
    x10 = mfilter(x2, x9)
    x11 = difference(x10, x1)
    x12 = ofcolor(I, SIX)
    x13 = intersection(x11, x12)
    x14 = size(x13)
    x15 = equality(x14, ZERO)
    x16 = branch(x15, SIX, SEVEN)
    x17 = branch(x15, ZERO, EIGHT)
    x18 = ofcolor(I, SEVEN)
    x19 = branch(x15, x18, x13)
    x20 = difference(x11, x19)
    x21 = fill(I, x16, x19)
    O = fill(x21, x17, x20)
    return O


def solve_12997ef3(I):
    x1 = objects(I, T, T, T)
    x2 = argmax(x1, size)
    x3 = sizefilter(x1, ONE)
    x4 = merge(x3)
    x5 = size(x3)
    x6 = subgrid(x2, I)
    x7 = width(x4)
    x8 = equality(x7, ONE)
    x9 = branch(x8, uppermost, leftmost)
    x10 = branch(x8, identity, rot90)
    x11 = branch(x8, identity, rot270)
    x12 = order(x3, x9)
    x13 = apply(color, x12)
    x14 = rbind(ofcolor, ONE)
    x15 = compose(x14, last)
    x16 = fork(recolor, first, x15)
    x17 = fork(paint, last, x16)
    x18 = x10(x6)
    x19 = repeat(x18, x5)
    x20 = pair(x13, x19)
    x21 = mapply(x17, x20)
    O = x11(x21)
    return O


def solve_2b01abd0(I):
    x1 = frontiers(I)
    x2 = sfilter(x1, hline)
    x3 = size(x2)
    x4 = positive(x3)
    x5 = branch(x4, hmirror, vmirror)
    x6 = ofcolor(I, ONE)
    x7 = objects(I, F, T, T)
    x8 = argmax(x7, numcolors)
    x9 = gravitate(x8, x6)
    x10 = branch(x4, height, width)
    x11 = x10(x8)
    x12 = compose(crement, crement)
    x13 = x12(x11)
    x14 = multiply(x13, x9)
    x15 = add(x14, x9)
    x16 = x5(x8)
    x17 = shift(x16, x15)
    x18 = paint(I, x17)
    x19 = leastcolor(x8)
    x20 = mostcolor(x8)
    x21 = switch(x18, x19, x20)
    O = paint(x21, x17)
    return O


def solve_0a2355a6(I):
    x1 = objects(I, T, F, T)
    x2 = rbind(objects, T)
    x3 = rbind(x2, F)
    x4 = rbind(x3, T)
    x5 = rbind(subgrid, I)
    x6 = lbind(rbind, bordering)
    x7 = compose(x4, x5)
    x8 = compose(x6, x5)
    x9 = fork(sfilter, x7, x8)
    x10 = fork(difference, x7, x9)
    x11 = compose(size, x10)
    x12 = lbind(mfilter, x1)
    x13 = lbind(matcher, x11)
    x14 = compose(x12, x13)
    x15 = x14(ONE)
    x16 = x14(TWO)
    x17 = x14(THREE)
    x18 = x14(FOUR)
    x19 = fill(I, ONE, x15)
    x20 = fill(x19, THREE, x16)
    x21 = fill(x20, TWO, x17)
    O = fill(x21, FOUR, x18)
    return O


def solve_d06dbe63(I):
    x1 = ofcolor(I, EIGHT)
    x2 = center(x1)
    x3 = connect(ORIGIN, DOWN)
    x4 = connect(ORIGIN, ZERO_BY_TWO)
    x5 = combine(x3, x4)
    x6 = subtract(x2, TWO_BY_ZERO)
    x7 = shift(x5, x6)
    x8 = astuple(NEG_TWO, TWO)
    x9 = interval(ZERO, FIVE, ONE)
    x10 = lbind(multiply, x8)
    x11 = apply(x10, x9)
    x12 = lbind(shift, x7)
    x13 = mapply(x12, x11)
    x14 = fill(I, FIVE, x13)
    x15 = rot180(x14)
    x16 = ofcolor(x15, EIGHT)
    x17 = center(x16)
    x18 = subtract(x17, x6)
    x19 = shift(x13, x18)
    x20 = toivec(NEG_TWO)
    x21 = shift(x19, x20)
    x22 = fill(x15, FIVE, x21)
    O = rot180(x22)
    return O


def solve_e179c5f4(I):
    x1 = height(I)
    x2 = ofcolor(I, ONE)
    x3 = first(x2)
    x4 = shoot(x3, UP_RIGHT)
    x5 = fill(I, ONE, x4)
    x6 = ofcolor(x5, ONE)
    x7 = urcorner(x6)
    x8 = shoot(x7, NEG_UNITY)
    x9 = fill(x5, ONE, x8)
    x10 = ofcolor(x9, ONE)
    x11 = subgrid(x10, x9)
    x12 = height(x11)
    x13 = width(x11)
    x14 = decrement(x12)
    x15 = astuple(x14, x13)
    x16 = ulcorner(x10)
    x17 = crop(x9, x16, x15)
    x18 = repeat(x17, NINE)
    x19 = merge(x18)
    x20 = astuple(x1, x13)
    x21 = crop(x19, ORIGIN, x20)
    x22 = hmirror(x21)
    O = replace(x22, ZERO, EIGHT)
    return O


def solve_eb5a1d5d(I):
    x1 = objects(I, T, F, F)
    x2 = argmin(x1, size)
    x3 = color(x2)
    x4 = compose(invert, width)
    x5 = order(x1, x4)
    x6 = apply(color, x5)
    x7 = size(x5)
    x8 = double(x7)
    x9 = decrement(x8)
    x10 = interval(ZERO, x7, ONE)
    x11 = pair(x10, x10)
    x12 = decrement(x9)
    x13 = interval(x12, ZERO, NEG_TWO)
    x14 = papply(add, x13, x10)
    x15 = order(x14, invert)
    x16 = pair(x15, x15)
    x17 = pair(x11, x16)
    x18 = apply(box, x17)
    x19 = mpapply(recolor, x6, x18)
    x20 = astuple(x9, x9)
    x21 = canvas(ZERO, x20)
    x22 = paint(x21, x19)
    O = replace(x22, ZERO, x3)
    return O


def solve_0a938d79(I):
    x1 = portrait(I)
    x2 = branch(x1, dmirror, identity)
    x3 = x2(I)
    x4 = objects(x3, T, F, T)
    x5 = argmin(x4, leftmost)
    x6 = argmax(x4, leftmost)
    x7 = color(x5)
    x8 = color(x6)
    x9 = leftmost(x5)
    x10 = leftmost(x6)
    x11 = subtract(x10, x9)
    x12 = double(x11)
    x13 = multiply(THREE, TEN)
    x14 = interval(x9, x13, x12)
    x15 = interval(x10, x13, x12)
    x16 = compose(vfrontier, tojvec)
    x17 = mapply(x16, x14)
    x18 = mapply(x16, x15)
    x19 = recolor(x7, x17)
    x20 = recolor(x8, x18)
    x21 = combine(x19, x20)
    x22 = paint(x3, x21)
    O = x2(x22)
    return O


def solve_36fdfd69(I):
    x1 = upscale(I, TWO)
    x2 = ofcolor(x1, TWO)
    x3 = mapply(neighbors, x2)
    x4 = difference(x3, x2)
    x5 = fill(x1, FOUR, x4)
    x6 = objects(x5, T, T, T)
    x7 = colorfilter(x6, FOUR)
    x8 = totuple(x7)
    x9 = rbind(subgrid, x5)
    x10 = apply(x9, x8)
    x11 = apply(ulcorner, x8)
    x12 = rbind(ofcolor, TWO)
    x13 = apply(x12, x10)
    x14 = papply(subgrid, x13, x10)
    x15 = rbind(downscale, TWO)
    x16 = apply(x15, x14)
    x17 = apply(asindices, x16)
    x18 = apply(increment, x11)
    x19 = apply(halve, x18)
    x20 = mpapply(shift, x17, x19)
    x21 = fill(I, FOUR, x20)
    x22 = ofcolor(I, TWO)
    O = fill(x21, TWO, x22)
    return O


def solve_995c5fa3(I):
    x1 = hsplit(I, THREE)
    x2 = astuple(TWO, ONE)
    x3 = rbind(ofcolor, ZERO)
    x4 = compose(ulcorner, x3)
    x5 = compose(size, x3)
    x6 = matcher(x5, ZERO)
    x7 = matcher(x4, UNITY)
    x8 = matcher(x4, DOWN)
    x9 = matcher(x4, x2)
    x10 = rbind(multiply, THREE)
    x11 = power(double, TWO)
    x12 = compose(double, x6)
    x13 = chain(x11, double, x7)
    x14 = compose(x10, x8)
    x15 = compose(x11, x9)
    x16 = fork(add, x12, x13)
    x17 = fork(add, x14, x15)
    x18 = fork(add, x16, x17)
    x19 = rbind(canvas, UNITY)
    x20 = compose(x19, x18)
    x21 = apply(x20, x1)
    x22 = merge(x21)
    O = hupscale(x22, THREE)
    return O


def solve_228f6490(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = rbind(bordering, I)
    x4 = compose(flip, x3)
    x5 = sfilter(x2, x4)
    x6 = first(x5)
    x7 = last(x5)
    x8 = difference(x1, x2)
    x9 = compose(normalize, toindices)
    x10 = x9(x6)
    x11 = x9(x7)
    x12 = matcher(x9, x10)
    x13 = matcher(x9, x11)
    x14 = extract(x8, x12)
    x15 = extract(x8, x13)
    x16 = ulcorner(x6)
    x17 = ulcorner(x7)
    x18 = ulcorner(x14)
    x19 = ulcorner(x15)
    x20 = subtract(x16, x18)
    x21 = subtract(x17, x19)
    x22 = move(I, x14, x20)
    O = move(x22, x15, x21)
    return O


def solve_50f325b5(I):
    x1 = ofcolor(I, EIGHT)
    x2 = recolor(THREE, x1)
    x3 = normalize(x1)
    x4 = lbind(shift, x3)
    x5 = rbind(occurrences, x2)
    x6 = lbind(mapply, x4)
    x7 = compose(x6, x5)
    x8 = x7(I)
    x9 = fill(I, EIGHT, x8)
    x10 = rot90(x9)
    x11 = x7(x10)
    x12 = fill(x10, EIGHT, x11)
    x13 = rot90(x12)
    x14 = x7(x13)
    x15 = fill(x13, EIGHT, x14)
    x16 = rot90(x15)
    x17 = x7(x16)
    x18 = fill(x16, EIGHT, x17)
    x19 = rot90(x18)
    x20 = dmirror(x19)
    x21 = x7(x20)
    x22 = fill(x20, EIGHT, x21)
    O = dmirror(x22)
    return O


def solve_de493100(I):
    x1 = ofcolor(I, SEVEN)
    x2 = replace(I, SEVEN, ZERO)
    x3 = shape(I)
    x4 = decrement(x3)
    x5 = crop(x2, ZERO_BY_TWO, x4)
    x6 = crop(x2, TWO_BY_ZERO, x4)
    x7 = matcher(first, ZERO)
    x8 = compose(flip, x7)
    x9 = rbind(sfilter, x8)
    x10 = compose(x9, asobject)
    x11 = x10(x5)
    x12 = x10(x6)
    x13 = shift(x11, ZERO_BY_TWO)
    x14 = shift(x12, TWO_BY_ZERO)
    x15 = vmirror(x13)
    x16 = hmirror(x14)
    x17 = combine(x15, x16)
    x18 = paint(x2, x17)
    x19 = ofcolor(x18, ZERO)
    x20 = dmirror(x18)
    x21 = toobject(x19, x20)
    x22 = paint(x18, x21)
    O = subgrid(x1, x22)
    return O


def solve_4c177718(I):
    x1 = objects(I, T, T, F)
    x2 = colorfilter(x1, ZERO)
    x3 = argmax(x2, size)
    x4 = remove(x3, x2)
    x5 = argmax(x4, size)
    x6 = subgrid(x3, I)
    x7 = subgrid(x5, I)
    x8 = objects(x7, T, T, T)
    x9 = argmax(x8, rightmost)
    x10 = ofcolor(x6, ONE)
    x11 = center(x9)
    x12 = index(I, x11)
    x13 = equality(x12, ZERO)
    x14 = toivec(SIX)
    x15 = rbind(shift, x14)
    x16 = branch(x13, x15, identity)
    x17 = ulcorner(x10)
    x18 = toivec(THREE)
    x19 = subtract(x17, x18)
    x20 = normalize(x9)
    x21 = shift(x20, x19)
    x22 = x16(x21)
    O = paint(x6, x22)
    return O


def solve_4e45f183(I):
    x1 = leastcolor(I)
    x2 = shape(I)
    x3 = add(TWO_BY_TWO, x2)
    x4 = canvas(ZERO, x3)
    x5 = asobject(I)
    x6 = paint(x4, x5)
    x7 = objects(x6, F, F, T)
    x8 = rbind(subgrid, I)
    x9 = apply(x8, x7)
    x10 = rbind(ofcolor, x1)
    x11 = compose(center, x10)
    x12 = order(x9, x11)
    x13 = lbind(canvas, ZERO)
    x14 = chain(x13, increment, shape)
    x15 = fork(paint, x14, asobject)
    x16 = apply(x15, x12)
    x17 = mapply(rot90, x16)
    x18 = rot270(x17)
    x19 = hsplit(x18, THREE)
    x20 = merge(x19)
    x21 = asobject(x20)
    x22 = shift(x21, UNITY)
    O = paint(I, x22)
    return O


def solve_c663677b(I):
    x1 = ofcolor(I, ZERO)
    x2 = mapply(hfrontier, x1)
    x3 = fill(I, ZERO, x2)
    x4 = asobject(x3)
    x5 = hperiod(x4)
    x6 = mapply(vfrontier, x1)
    x7 = fill(I, ZERO, x6)
    x8 = asobject(x7)
    x9 = vperiod(x8)
    x10 = astuple(x9, x5)
    x11 = asobject(I)
    x12 = matcher(first, ZERO)
    x13 = compose(flip, x12)
    x14 = sfilter(x11, x13)
    x15 = neighbors(ORIGIN)
    x16 = lbind(mapply, neighbors)
    x17 = power(x16, TWO)
    x18 = x17(x15)
    x19 = lbind(multiply, x10)
    x20 = apply(x19, x18)
    x21 = lbind(shift, x14)
    x22 = mapply(x21, x20)
    O = paint(I, x22)
    return O


def solve_ca8f78db(I):
    x1 = ofcolor(I, ZERO)
    x2 = mapply(hfrontier, x1)
    x3 = fill(I, ZERO, x2)
    x4 = asobject(x3)
    x5 = hperiod(x4)
    x6 = mapply(vfrontier, x1)
    x7 = fill(I, ZERO, x6)
    x8 = asobject(x7)
    x9 = vperiod(x8)
    x10 = astuple(x9, x5)
    x11 = asobject(I)
    x12 = matcher(first, ZERO)
    x13 = compose(flip, x12)
    x14 = sfilter(x11, x13)
    x15 = neighbors(ORIGIN)
    x16 = lbind(mapply, neighbors)
    x17 = power(x16, TWO)
    x18 = x17(x15)
    x19 = lbind(multiply, x10)
    x20 = apply(x19, x18)
    x21 = lbind(shift, x14)
    x22 = mapply(x21, x20)
    O = paint(I, x22)
    return O


def solve_c64f1187(I):
    x1 = objects(I, T, T, T)
    x2 = colorfilter(x1, ONE)
    x3 = ofcolor(I, FIVE)
    x4 = subgrid(x3, I)
    x5 = objects(x4, T, F, F)
    x6 = colorfilter(x5, FIVE)
    x7 = sizefilter(x6, THREE)
    x8 = compose(first, delta)
    x9 = lbind(index, x4)
    x10 = compose(x9, x8)
    x11 = lbind(index, I)
    x12 = chain(x11, decrement, ulcorner)
    x13 = lbind(rbind, equality)
    x14 = rbind(compose, x12)
    x15 = lbind(extract, x2)
    x16 = chain(x14, x13, x10)
    x17 = chain(normalize, x15, x16)
    x18 = fork(shift, x17, ulcorner)
    x19 = fork(recolor, x10, x18)
    x20 = mapply(x19, x7)
    x21 = shape(x4)
    x22 = canvas(ZERO, x21)
    O = paint(x22, x20)
    return O


def solve_e78887d1(I):
    x1 = height(I)
    x2 = width(I)
    x3 = subtract(x1, FOUR)
    x4 = toivec(x3)
    x5 = astuple(THREE, x2)
    x6 = crop(I, x4, x5)
    x7 = fgpartition(x6)
    x8 = order(x7, leftmost)
    x9 = first(x8)
    x10 = multiply(LEFT, FOUR)
    x11 = subtract(x2, THREE)
    x12 = tojvec(x11)
    x13 = rbind(shift, x10)
    x14 = remove(x9, x8)
    x15 = shift(x9, x12)
    x16 = apply(x13, x14)
    x17 = repeat(x15, ONE)
    x18 = combine(x16, x17)
    x19 = apply(color, x8)
    x20 = mpapply(recolor, x19, x18)
    x21 = merge(x7)
    x22 = cover(x6, x21)
    O = paint(x22, x20)
    return O


def solve_b1fc8b8e(I):
    x1 = canvas(EIGHT, TWO_BY_TWO)
    x2 = asobject(x1)
    x3 = occurrences(I, x2)
    x4 = lbind(shift, x2)
    x5 = mapply(x4, x3)
    x6 = toindices(x5)
    x7 = ofcolor(I, EIGHT)
    x8 = equality(x6, x7)
    x9 = branch(x8, EIGHT, ZERO)
    x10 = initset(ORIGIN)
    x11 = fill(x1, x9, x10)
    x12 = astuple(FIVE, FIVE)
    x13 = canvas(ZERO, x12)
    x14 = asobject(x11)
    x15 = toivec(THREE)
    x16 = tojvec(THREE)
    x17 = shift(x14, x15)
    x18 = shift(x14, x16)
    x19 = shift(x14, THREE_BY_THREE)
    x20 = combine(x14, x19)
    x21 = combine(x17, x18)
    x22 = combine(x20, x21)
    O = paint(x13, x22)
    return O


def solve_0f63c0b9(I):
    x1 = compose(hfrontier, center)
    x2 = fork(recolor, color, x1)
    x3 = fgpartition(I)
    x4 = trim(I)
    x5 = asindices(x4)
    x6 = mapply(x2, x3)
    x7 = asindices(I)
    x8 = shift(x5, UNITY)
    x9 = difference(x7, x8)
    x10 = paint(I, x6)
    x11 = fgpartition(x10)
    x12 = lbind(multiply, TEN)
    x13 = lbind(lbind, manhattan)
    x14 = compose(x13, initset)
    x15 = rbind(fork, uppermost)
    x16 = lbind(x15, add)
    x17 = lbind(compose, x12)
    x18 = chain(x16, x17, x14)
    x19 = lbind(argmin, x11)
    x20 = chain(color, x19, x18)
    x21 = fork(astuple, x20, identity)
    x22 = apply(x21, x9)
    O = paint(x10, x22)
    return O


def solve_9def23fe(I):
    x1 = ofcolor(I, TWO)
    x2 = leastcolor(I)
    x3 = ofcolor(I, x2)
    x4 = lbind(rbind, shoot)
    x5 = rbind(apply, x1)
    x6 = compose(x5, x4)
    x7 = x6(DOWN)
    x8 = x6(UP)
    x9 = x6(LEFT)
    x10 = x6(RIGHT)
    x11 = combine(x7, x8)
    x12 = combine(x9, x10)
    x13 = combine(x11, x12)
    x14 = rbind(intersection, x3)
    x15 = compose(size, x14)
    x16 = matcher(x15, ZERO)
    x17 = mfilter(x13, x16)
    x18 = fill(I, TWO, x17)
    x19 = equality(x2, EIGHT)
    x20 = initset(ORIGIN)
    x21 = insert(RIGHT, x20)
    x22 = fill(x18, TWO, x21)
    O = branch(x19, x22, x18)
    return O


def solve_e95e3d8e(I):
    x1 = ofcolor(I, ZERO)
    x2 = mapply(hfrontier, x1)
    x3 = fill(I, ZERO, x2)
    x4 = asobject(x3)
    x5 = hperiod(x4)
    x6 = mapply(vfrontier, x1)
    x7 = fill(I, ZERO, x6)
    x8 = asobject(x7)
    x9 = vperiod(x8)
    x10 = astuple(x9, x5)
    x11 = asobject(I)
    x12 = matcher(first, ZERO)
    x13 = compose(flip, x12)
    x14 = sfilter(x11, x13)
    x15 = neighbors(ORIGIN)
    x16 = lbind(mapply, neighbors)
    x17 = power(x16, TWO)
    x18 = x17(x15)
    x19 = lbind(multiply, x10)
    x20 = apply(x19, x18)
    x21 = lbind(shift, x14)
    x22 = mapply(x21, x20)
    O = paint(I, x22)
    return O


def solve_992798f6(I):
    x1 = ofcolor(I, ONE)
    x2 = ofcolor(I, TWO)
    x3 = center(x1)
    x4 = position(x1, x2)
    x5 = shoot(x3, x4)
    x6 = uppermost(x2)
    x7 = leftmost(x2)
    x8 = matcher(first, x6)
    x9 = matcher(last, x7)
    x10 = fork(either, x8, x9)
    x11 = sfilter(x5, x10)
    x12 = apply(initset, x11)
    x13 = lbind(manhattan, x1)
    x14 = argmin(x12, x13)
    x15 = invert(x4)
    x16 = shift(x14, x15)
    x17 = center(x16)
    x18 = shift(x2, x15)
    x19 = connect(x3, x17)
    x20 = center(x18)
    x21 = connect(x17, x20)
    x22 = combine(x19, x21)
    O = underfill(I, THREE, x22)
    return O


def solve_1d0a4b61(I):
    x1 = ofcolor(I, ZERO)
    x2 = mapply(hfrontier, x1)
    x3 = fill(I, ZERO, x2)
    x4 = asobject(x3)
    x5 = hperiod(x4)
    x6 = mapply(vfrontier, x1)
    x7 = fill(I, ZERO, x6)
    x8 = asobject(x7)
    x9 = vperiod(x8)
    x10 = astuple(x9, x5)
    x11 = asobject(I)
    x12 = matcher(first, ZERO)
    x13 = compose(flip, x12)
    x14 = sfilter(x11, x13)
    x15 = neighbors(ORIGIN)
    x16 = lbind(mapply, neighbors)
    x17 = power(x16, TWO)
    x18 = x17(x15)
    x19 = lbind(multiply, x10)
    x20 = apply(x19, x18)
    x21 = lbind(shift, x14)
    x22 = mapply(x21, x20)
    O = paint(I, x22)
    return O


def solve_604001fa(I):
    x1 = objects(I, T, T, T)
    x2 = colorfilter(x1, ONE)
    x3 = colorfilter(x1, SEVEN)
    x4 = lbind(lbind, manhattan)
    x5 = lbind(argmin, x3)
    x6 = compose(x5, x4)
    x7 = lbind(index, I)
    x8 = rbind(chain, x6)
    x9 = lbind(x8, x7)
    x10 = rbind(equality, ZERO)
    x11 = lbind(mfilter, x2)
    x12 = lbind(compose, x10)
    x13 = chain(x11, x12, x9)
    x14 = x13(ulcorner)
    x15 = x13(lrcorner)
    x16 = x13(llcorner)
    x17 = x13(urcorner)
    x18 = fill(I, THREE, x14)
    x19 = fill(x18, SIX, x15)
    x20 = fill(x19, FOUR, x16)
    x21 = fill(x20, EIGHT, x17)
    x22 = merge(x3)
    O = cover(x21, x22)
    return O


def solve_a78176bb(I):
    x1 = palette(I)
    x2 = objects(I, T, F, T)
    x3 = remove(ZERO, x1)
    x4 = other(x3, FIVE)
    x5 = colorfilter(x2, FIVE)
    x6 = lbind(index, I)
    x7 = compose(x6, urcorner)
    x8 = matcher(x7, FIVE)
    x9 = sfilter(x5, x8)
    x10 = difference(x5, x9)
    x11 = apply(urcorner, x9)
    x12 = apply(llcorner, x10)
    x13 = rbind(add, UP_RIGHT)
    x14 = rbind(add, DOWN_LEFT)
    x15 = apply(x13, x11)
    x16 = apply(x14, x12)
    x17 = rbind(shoot, UNITY)
    x18 = rbind(shoot, NEG_UNITY)
    x19 = fork(combine, x17, x18)
    x20 = mapply(x19, x15)
    x21 = mapply(x19, x16)
    x22 = combine(x20, x21)
    x23 = fill(I, x4, x22)
    O = replace(x23, FIVE, ZERO)
    return O


def solve_72322fa7(I):
    x1 = objects(I, F, T, T)
    x2 = matcher(numcolors, ONE)
    x3 = sfilter(x1, x2)
    x4 = difference(x1, x3)
    x5 = lbind(matcher, first)
    x6 = compose(x5, mostcolor)
    x7 = fork(sfilter, identity, x6)
    x8 = fork(difference, identity, x7)
    x9 = lbind(occurrences, I)
    x10 = compose(x9, x7)
    x11 = compose(x9, x8)
    x12 = compose(ulcorner, x8)
    x13 = fork(subtract, ulcorner, x12)
    x14 = lbind(rbind, add)
    x15 = compose(x14, x13)
    x16 = fork(apply, x15, x11)
    x17 = lbind(lbind, shift)
    x18 = compose(x17, normalize)
    x19 = fork(mapply, x18, x10)
    x20 = fork(mapply, x18, x16)
    x21 = mapply(x19, x4)
    x22 = mapply(x20, x4)
    x23 = paint(I, x21)
    O = paint(x23, x22)
    return O


def solve_82819916(I):
    x1 = objects(I, F, F, T)
    x2 = index(I, DOWN)
    x3 = argmax(x1, size)
    x4 = remove(x3, x1)
    x5 = matcher(first, x2)
    x6 = sfilter(x3, x5)
    x7 = difference(x3, x6)
    x8 = lbind(shift, x6)
    x9 = lbind(shift, x7)
    x10 = totuple(x4)
    x11 = apply(ulcorner, x10)
    x12 = apply(urcorner, x10)
    x13 = apply(first, x11)
    x14 = apply(decrement, x13)
    x15 = apply(toivec, x14)
    x16 = lbind(index, I)
    x17 = apply(x16, x11)
    x18 = apply(x16, x12)
    x19 = apply(x8, x15)
    x20 = apply(x9, x15)
    x21 = mpapply(recolor, x17, x19)
    x22 = mpapply(recolor, x18, x20)
    x23 = paint(I, x21)
    O = paint(x23, x22)
    return O


def solve_855e0971(I):
    x1 = rot90(I)
    x2 = objects(I, T, F, F)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = first(x4)
    x6 = portrait(x5)
    x7 = branch(x6, x1, I)
    x8 = objects(x7, T, F, F)
    x9 = sizefilter(x8, ONE)
    x10 = difference(x8, x9)
    x11 = rbind(subgrid, x7)
    x12 = rbind(ofcolor, ZERO)
    x13 = lbind(mapply, vfrontier)
    x14 = chain(x13, x12, x11)
    x15 = lbind(recolor, ZERO)
    x16 = compose(x15, x14)
    x17 = fork(paint, x11, x16)
    x18 = fork(toobject, asindices, identity)
    x19 = compose(x18, x17)
    x20 = fork(shift, x19, ulcorner)
    x21 = mapply(x20, x10)
    x22 = paint(x7, x21)
    x23 = rot270(x22)
    O = branch(x6, x23, x22)
    return O


def solve_045e512c(I):
    x1 = objects(I, T, T, T)
    x2 = apply(size, x1)
    x3 = maximum(x2)
    x4 = lbind(greater, x3)
    x5 = compose(x4, size)
    x6 = sfilter(x1, x5)
    x7 = difference(x1, x6)
    x8 = first(x7)
    x9 = interval(ONE, FOUR, ONE)
    x10 = lbind(multiply, FOUR)
    x11 = apply(x10, x9)
    x12 = product(x6, x11)
    x13 = totuple(x12)
    x14 = apply(first, x13)
    x15 = apply(last, x13)
    x16 = apply(color, x14)
    x17 = lbind(position, x8)
    x18 = apply(x17, x14)
    x19 = papply(multiply, x18, x15)
    x20 = rbind(recolor, x8)
    x21 = apply(x20, x16)
    x22 = mpapply(shift, x21, x19)
    x23 = paint(I, x22)
    O = paint(x23, x8)
    return O


def solve_99fa7670(I):
    x1 = shape(I)
    x2 = objects(I, T, F, T)
    x3 = rbind(shoot, RIGHT)
    x4 = compose(x3, center)
    x5 = fork(recolor, color, x4)
    x6 = mapply(x5, x2)
    x7 = paint(I, x6)
    x8 = add(x1, DOWN_LEFT)
    x9 = initset(x8)
    x10 = recolor(ZERO, x9)
    x11 = objects(x7, T, F, T)
    x12 = insert(x10, x11)
    x13 = order(x12, uppermost)
    x14 = first(x13)
    x15 = remove(x10, x13)
    x16 = remove(x14, x13)
    x17 = compose(lrcorner, first)
    x18 = compose(lrcorner, last)
    x19 = fork(connect, x17, x18)
    x20 = compose(color, first)
    x21 = fork(recolor, x20, x19)
    x22 = pair(x15, x16)
    x23 = mapply(x21, x22)
    O = underpaint(x7, x23)
    return O


def solve_94414823(I):
    x1 = rbind(ofcolor, FIVE)
    x2 = chain(decrement, ulcorner, x1)
    x3 = chain(increment, ulcorner, x1)
    x4 = compose(initset, x3)
    x5 = fork(index, identity, x2)
    x6 = fork(recolor, x5, x4)
    x7 = fork(paint, identity, x6)
    x8 = compose(rot90, x7)
    x9 = power(x8, FOUR)
    x10 = x9(I)
    x11 = x1(x10)
    x12 = inbox(x11)
    x13 = ulcorner(x12)
    x14 = subgrid(x12, x10)
    x15 = chain(merge, fgpartition, rot180)
    x16 = x15(x14)
    x17 = shift(x16, x13)
    x18 = paint(x10, x17)
    x19 = subgrid(x12, x18)
    x20 = compress(x19)
    x21 = upscale(x20, TWO)
    x22 = asobject(x21)
    x23 = shift(x22, x13)
    O = paint(I, x23)
    return O


def solve_2753e76c(I):
    x1 = objects(I, T, T, T)
    x2 = palette(I)
    x3 = remove(ZERO, x2)
    x4 = lbind(matcher, color)
    x5 = lbind(sfilter, x1)
    x6 = chain(size, x5, x4)
    x7 = compose(invert, x6)
    x8 = order(x3, x7)
    x9 = size(x8)
    x10 = valmax(x8, x6)
    x11 = astuple(x9, x10)
    x12 = canvas(ZERO, x11)
    x13 = interval(ZERO, x9, ONE)
    x14 = lbind(multiply, DOWN)
    x15 = apply(x14, x13)
    x16 = papply(astuple, x8, x15)
    x17 = compose(tojvec, decrement)
    x18 = chain(x17, x6, first)
    x19 = fork(add, last, x18)
    x20 = fork(connect, last, x19)
    x21 = fork(recolor, first, x20)
    x22 = mapply(x21, x16)
    x23 = paint(x12, x22)
    O = vmirror(x23)
    return O


def solve_c6e1b8da(I):
    x1 = fgpartition(I)
    x2 = rbind(toobject, I)
    x3 = chain(palette, x2, delta)
    x4 = lbind(contained, ZERO)
    x5 = compose(x4, x3)
    x6 = sfilter(x1, x5)
    x7 = difference(x1, x6)
    x8 = fork(position, identity, delta)
    x9 = compose(shape, delta)
    x10 = fork(multiply, x8, x9)
    x11 = power(delta, TWO)
    x12 = rbind(chain, last)
    x13 = lbind(x12, flip)
    x14 = lbind(rbind, contained)
    x15 = chain(x13, x14, x11)
    x16 = fork(sfilter, identity, x15)
    x17 = fork(shift, x16, x10)
    x18 = mapply(x17, x6)
    x19 = merge(x6)
    x20 = cover(I, x19)
    x21 = paint(x20, x18)
    x22 = fork(recolor, color, delta)
    x23 = mapply(x22, x7)
    O = underpaint(x21, x23)
    return O


def solve_ac3e2b04(I):
    x1 = objects(I, T, F, T)
    x2 = initset(THREE)
    x3 = rbind(toobject, I)
    x4 = chain(palette, x3, outbox)
    x5 = matcher(x4, x2)
    x6 = sizefilter(x1, ONE)
    x7 = sfilter(x6, x5)
    x8 = fork(combine, hfrontier, vfrontier)
    x9 = mapply(toindices, x7)
    x10 = mapply(x8, x9)
    x11 = underfill(I, ONE, x10)
    x12 = asindices(x11)
    x13 = rbind(toobject, x11)
    x14 = compose(x13, dneighbors)
    x15 = rbind(colorcount, ONE)
    x16 = rbind(colorcount, TWO)
    x17 = compose(x15, x14)
    x18 = compose(x16, x14)
    x19 = matcher(x17, TWO)
    x20 = matcher(x18, TWO)
    x21 = fork(both, x19, x20)
    x22 = sfilter(x12, x21)
    x23 = mapply(neighbors, x22)
    O = fill(x11, ONE, x23)
    return O


def solve_13713586(I):
    x1 = ofcolor(I, FIVE)
    x2 = fork(either, vline, hline)
    x3 = recolor(FIVE, x1)
    x4 = lbind(manhattan, x3)
    x5 = rbind(argmin, x4)
    x6 = rbind(objects, T)
    x7 = rbind(x6, T)
    x8 = rbind(x7, T)
    x9 = lbind(remove, x3)
    x10 = rbind(sfilter, x2)
    x11 = chain(x5, x10, x9)
    x12 = compose(x11, x8)
    x13 = rbind(gravitate, x3)
    x14 = lbind(rbind, shoot)
    x15 = chain(x14, x13, x12)
    x16 = compose(toindices, x12)
    x17 = compose(color, x12)
    x18 = fork(mapply, x15, x16)
    x19 = fork(recolor, x17, x18)
    x20 = fork(underpaint, identity, x19)
    x21 = chain(decrement, size, x8)
    x22 = x21(I)
    x23 = power(x20, x22)
    O = x23(I)
    return O


def solve_79369cc6(I):
    x1 = ofcolor(I, FOUR)
    x2 = delta(x1)
    x3 = recolor(SIX, x2)
    x4 = ulcorner(x1)
    x5 = ulcorner(x2)
    x6 = subtract(x4, x5)
    x7 = lbind(recolor, FOUR)
    x8 = lbind(contained, FOUR)
    x9 = chain(flip, x8, palette)
    x10 = normalize(x1)
    x11 = lbind(shift, x10)
    x12 = lbind(apply, x11)
    x13 = rbind(occurrences, x3)
    x14 = rbind(shift, x6)
    x15 = chain(x12, x14, x13)
    x16 = lbind(compose, x9)
    x17 = lbind(rbind, toobject)
    x18 = compose(x16, x17)
    x19 = fork(mfilter, x15, x18)
    x20 = compose(x7, x19)
    x21 = fork(paint, identity, x20)
    x22 = compose(x21, rot90)
    x23 = power(x22, FOUR)
    O = x23(I)
    return O


def solve_1990f7a8(I):
    x1 = objects(I, T, T, T)
    x2 = fork(add, uppermost, leftmost)
    x3 = compose(invert, leftmost)
    x4 = fork(add, uppermost, x3)
    x5 = argmin(x1, x2)
    x6 = argmin(x1, x4)
    x7 = argmax(x1, x4)
    x8 = argmax(x1, x2)
    x9 = normalize(x5)
    x10 = normalize(x6)
    x11 = normalize(x7)
    x12 = normalize(x8)
    x13 = tojvec(FOUR)
    x14 = shift(x10, x13)
    x15 = toivec(FOUR)
    x16 = shift(x11, x15)
    x17 = add(x13, x15)
    x18 = shift(x12, x17)
    x19 = astuple(SEVEN, SEVEN)
    x20 = canvas(ZERO, x19)
    x21 = combine(x9, x14)
    x22 = combine(x21, x16)
    x23 = combine(x22, x18)
    O = paint(x20, x23)
    return O


def solve_3ee1011a(I):
    x1 = objects(I, T, T, T)
    x2 = fork(combine, identity, dmirror)
    x3 = compose(normalize, x2)
    x4 = compose(invert, size)
    x5 = order(x1, x4)
    x6 = apply(x3, x5)
    x7 = valmax(x1, size)
    x8 = astuple(x7, x7)
    x9 = canvas(ZERO, x8)
    x10 = size(x1)
    x11 = interval(ZERO, x10, ONE)
    x12 = pair(x11, x11)
    x13 = mpapply(shift, x6, x12)
    x14 = compose(first, last)
    x15 = compose(last, last)
    x16 = fork(add, x14, x15)
    x17 = lbind(greater, x7)
    x18 = compose(x17, x16)
    x19 = sfilter(x13, x18)
    x20 = paint(x9, x19)
    x21 = cmirror(x20)
    x22 = papply(pair, x20, x21)
    x23 = lbind(apply, maximum)
    O = apply(x23, x22)
    return O


def solve_952a094c(I):
    x1 = objects(I, F, F, T)
    x2 = first(x1)
    x3 = inbox(x2)
    x4 = toobject(x3, I)
    x5 = dmirror(x4)
    x6 = cmirror(x5)
    x7 = paint(I, x6)
    x8 = lbind(index, x7)
    x9 = fork(astuple, x8, identity)
    x10 = compose(initset, x9)
    x11 = double(NEG_UNITY)
    x12 = astuple(NEG_TWO, TWO)
    x13 = astuple(TWO, NEG_TWO)
    x14 = ulcorner(x3)
    x15 = urcorner(x3)
    x16 = llcorner(x3)
    x17 = lrcorner(x3)
    x18 = x10(x14)
    x19 = move(x7, x18, x11)
    x20 = x10(x15)
    x21 = move(x19, x20, x12)
    x22 = x10(x16)
    x23 = move(x21, x22, x13)
    x24 = x10(x17)
    O = move(x23, x24, TWO_BY_TWO)
    return O


def solve_6aa20dc0(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, numcolors)
    x3 = normalize(x2)
    x4 = lbind(matcher, first)
    x5 = compose(x4, mostcolor)
    x6 = fork(sfilter, identity, x5)
    x7 = fork(difference, identity, x6)
    x8 = lbind(rbind, upscale)
    x9 = interval(ONE, FOUR, ONE)
    x10 = apply(x8, x9)
    x11 = initset(identity)
    x12 = insert(vmirror, x11)
    x13 = insert(hmirror, x12)
    x14 = insert(cmirror, x13)
    x15 = insert(dmirror, x14)
    x16 = fork(compose, first, last)
    x17 = lbind(occurrences, I)
    x18 = lbind(lbind, shift)
    x19 = compose(x17, x7)
    x20 = product(x15, x10)
    x21 = apply(x16, x20)
    x22 = rapply(x21, x3)
    x23 = fork(mapply, x18, x19)
    x24 = mapply(x23, x22)
    O = paint(I, x24)
    return O


def solve_e6721834(I):
    x1 = portrait(I)
    x2 = branch(x1, vsplit, hsplit)
    x3 = x2(I, TWO)
    x4 = order(x3, numcolors)
    x5 = first(x4)
    x6 = last(x4)
    x7 = objects(x6, F, F, T)
    x8 = merge(x7)
    x9 = mostcolor(x8)
    x10 = matcher(first, x9)
    x11 = compose(flip, x10)
    x12 = rbind(sfilter, x11)
    x13 = lbind(occurrences, x5)
    x14 = compose(x13, x12)
    x15 = chain(positive, size, x14)
    x16 = sfilter(x7, x15)
    x17 = chain(first, x13, x12)
    x18 = compose(ulcorner, x12)
    x19 = fork(subtract, x17, x18)
    x20 = fork(shift, identity, x19)
    x21 = apply(x20, x16)
    x22 = compose(decrement, width)
    x23 = chain(positive, decrement, x22)
    x24 = mfilter(x21, x23)
    O = paint(x5, x24)
    return O


def solve_6d58a25d(I):
    x1 = objects(I, T, T, T)
    x2 = argmax(x1, size)
    x3 = remove(x2, x1)
    x4 = first(x3)
    x5 = color(x4)
    x6 = leftmost(x2)
    x7 = rightmost(x2)
    x8 = center(x2)
    x9 = first(x8)
    x10 = rbind(greater, x6)
    x11 = compose(x10, leftmost)
    x12 = lbind(greater, x7)
    x13 = compose(x12, rightmost)
    x14 = rbind(greater, x9)
    x15 = compose(x14, lowermost)
    x16 = fork(both, x11, x13)
    x17 = fork(both, x16, x15)
    x18 = sfilter(x3, x17)
    x19 = mapply(toindices, x18)
    x20 = apply(last, x19)
    x21 = lbind(astuple, x9)
    x22 = apply(x21, x20)
    x23 = rbind(shoot, DOWN)
    x24 = mapply(x23, x22)
    O = underfill(I, x5, x24)
    return O


def solve_447fd412(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, numcolors)
    x3 = normalize(x2)
    x4 = lbind(matcher, first)
    x5 = compose(x4, mostcolor)
    x6 = fork(sfilter, identity, x5)
    x7 = fork(difference, identity, x6)
    x8 = lbind(rbind, upscale)
    x9 = interval(ONE, FOUR, ONE)
    x10 = apply(x8, x9)
    x11 = lbind(recolor, ZERO)
    x12 = compose(x11, outbox)
    x13 = fork(combine, identity, x12)
    x14 = lbind(occurrences, I)
    x15 = lbind(rbind, subtract)
    x16 = lbind(apply, increment)
    x17 = lbind(lbind, shift)
    x18 = chain(x15, ulcorner, x7)
    x19 = chain(x14, x13, x7)
    x20 = fork(apply, x18, x19)
    x21 = compose(x16, x20)
    x22 = fork(mapply, x17, x21)
    x23 = rapply(x10, x3)
    x24 = mapply(x22, x23)
    O = paint(I, x24)
    return O


def solve_baf41dbf(I):
    x1 = ofcolor(I, THREE)
    x2 = ofcolor(I, SIX)
    x3 = outbox(x1)
    x4 = combine(x2, x3)
    x5 = inbox(x4)
    x6 = box(x1)
    x7 = cover(I, x6)
    x8 = fill(x7, THREE, x5)
    x9 = astuple(THREE, TWO)
    x10 = canvas(ZERO, x9)
    x11 = initset(DOWN)
    x12 = fill(x10, THREE, x11)
    x13 = asobject(x12)
    x14 = initset(UNITY)
    x15 = fill(x12, THREE, x14)
    x16 = asobject(x15)
    x17 = lbind(shift, x16)
    x18 = rbind(occurrences, x13)
    x19 = lbind(mapply, x17)
    x20 = compose(x19, x18)
    x21 = fork(paint, identity, x20)
    x22 = power(x21, TEN)
    x23 = compose(rot90, x22)
    x24 = power(x23, FOUR)
    O = x24(x8)
    return O


def solve_c97c0139(I):
    x1 = astuple(EIGHT, UP)
    x2 = astuple(EIGHT, ORIGIN)
    x3 = astuple(EIGHT, DOWN)
    x4 = astuple(ZERO, RIGHT)
    x5 = astuple(EIGHT, RIGHT)
    x6 = initset(x1)
    x7 = insert(x2, x6)
    x8 = insert(x3, x7)
    x9 = rbind(insert, x8)
    x10 = rbind(shift, DOWN)
    x11 = compose(x10, x9)
    x12 = x11(x4)
    x13 = x11(x5)
    x14 = rbind(occurrences, x12)
    x15 = lbind(shift, x13)
    x16 = lbind(mapply, x15)
    x17 = compose(x16, x14)
    x18 = fork(paint, identity, x17)
    x19 = compose(rot90, x18)
    x20 = multiply(FOUR, EIGHT)
    x21 = power(x19, x20)
    x22 = ofcolor(I, TWO)
    x23 = replace(I, TWO, EIGHT)
    x24 = x21(x23)
    O = fill(x24, TWO, x22)
    return O


def solve_0a1d4ef5(I):
    x1 = objects(I, T, F, F)
    x2 = sizefilter(x1, ONE)
    x3 = merge(x2)
    x4 = palette(x3)
    x5 = lbind(ofcolor, I)
    x6 = mapply(x5, x4)
    x7 = fill(I, ZERO, x6)
    x8 = compress(x7)
    x9 = lbind(apply, numcolors)
    x10 = chain(decrement, maximum, x9)
    x11 = height(x8)
    x12 = width(x8)
    x13 = vsplit(x8, x11)
    x14 = hsplit(x8, x12)
    x15 = x10(x13)
    x16 = x10(x14)
    x17 = vsplit(x8, x16)
    x18 = lbind(remove, ZERO)
    x19 = compose(x18, palette)
    x20 = lbind(lbind, colorcount)
    x21 = fork(argmax, x19, x20)
    x22 = rbind(hsplit, x15)
    x23 = lbind(apply, x21)
    x24 = compose(x23, x22)
    O = apply(x24, x17)
    return O


def solve_e88171ec(I):
    x1 = interval(THREE, EIGHT, ONE)
    x2 = product(x1, x1)
    x3 = lbind(canvas, ZERO)
    x4 = compose(asobject, x3)
    x5 = apply(x4, x2)
    x6 = fork(multiply, first, last)
    x7 = compose(x6, shape)
    x8 = order(x5, identity)
    x9 = lbind(occurrences, I)
    x10 = apply(x9, x8)
    x11 = chain(positive, size, last)
    x12 = pair(x8, x10)
    x13 = sfilter(x12, x11)
    x14 = compose(x7, first)
    x15 = argmax(x13, x14)
    x16 = last(x15)
    x17 = first(x15)
    x18 = shape(x17)
    x19 = canvas(EIGHT, x18)
    x20 = trim(x19)
    x21 = asobject(x20)
    x22 = center(x16)
    x23 = increment(x22)
    x24 = shift(x21, x23)
    O = fill(I, EIGHT, x24)
    return O


def solve_9caba7c3(I):
    x1 = rbind(toobject, I)
    x2 = compose(palette, x1)
    x3 = lbind(contained, TWO)
    x4 = compose(x2, neighbors)
    x5 = chain(x2, outbox, neighbors)
    x6 = lbind(index, I)
    x7 = matcher(x6, FIVE)
    x8 = chain(x3, x2, dneighbors)
    x9 = compose(flip, x3)
    x10 = compose(x9, x5)
    x11 = lbind(contained, ZERO)
    x12 = compose(flip, x11)
    x13 = compose(x12, x4)
    x14 = fork(both, x7, x8)
    x15 = fork(both, x13, x10)
    x16 = fork(both, x14, x15)
    x17 = trim(I)
    x18 = asindices(x17)
    x19 = shift(x18, UNITY)
    x20 = sfilter(x19, x16)
    x21 = fill(I, FOUR, x20)
    x22 = mapply(neighbors, x20)
    x23 = ofcolor(I, FIVE)
    x24 = intersection(x23, x22)
    O = fill(x21, SEVEN, x24)
    return O


def solve_d4c90558(I):
    x1 = objects(I, T, F, T)
    x2 = lbind(greater, FIVE)
    x3 = compose(x2, size)
    x4 = sfilter(x1, x3)
    x5 = difference(x1, x4)
    x6 = rbind(subgrid, I)
    x7 = apply(x6, x5)
    x8 = rbind(colorcount, FIVE)
    x9 = order(x7, x8)
    x10 = valmax(x7, x8)
    x11 = size(x5)
    x12 = astuple(x11, x10)
    x13 = canvas(ZERO, x12)
    x14 = rbind(index, ORIGIN)
    x15 = lbind(connect, ORIGIN)
    x16 = chain(x15, tojvec, decrement)
    x17 = compose(x16, x8)
    x18 = fork(recolor, x14, x17)
    x19 = compose(x18, first)
    x20 = compose(toivec, last)
    x21 = fork(shift, x19, x20)
    x22 = interval(ZERO, x11, ONE)
    x23 = pair(x9, x22)
    x24 = mapply(x21, x23)
    O = paint(x13, x24)
    return O


def solve_36d67576(I):
    x1 = objects(I, F, F, T)
    x2 = argmax(x1, numcolors)
    x3 = astuple(TWO, FOUR)
    x4 = rbind(contained, x3)
    x5 = compose(x4, first)
    x6 = rbind(sfilter, x5)
    x7 = lbind(rbind, subtract)
    x8 = lbind(occurrences, I)
    x9 = lbind(lbind, shift)
    x10 = compose(x7, ulcorner)
    x11 = chain(x10, x6, normalize)
    x12 = chain(x8, x6, normalize)
    x13 = fork(apply, x11, x12)
    x14 = compose(x9, normalize)
    x15 = fork(mapply, x14, x13)
    x16 = astuple(cmirror, dmirror)
    x17 = astuple(hmirror, vmirror)
    x18 = combine(x16, x17)
    x19 = product(x18, x18)
    x20 = fork(compose, first, last)
    x21 = apply(x20, x19)
    x22 = totuple(x21)
    x23 = combine(x18, x22)
    x24 = rapply(x23, x2)
    x25 = mapply(x15, x24)
    O = paint(I, x25)
    return O


def solve_776ffc46(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, FIVE)
    x3 = totuple(x2)
    x4 = rbind(subgrid, I)
    x5 = apply(x4, x3)
    x6 = multiply(FOUR, SIX)
    x7 = rbind(ofcolor, FIVE)
    x8 = compose(size, x7)
    x9 = matcher(x8, x6)
    x10 = extract(x5, x9)
    x11 = astuple(FIVE, FIVE)
    x12 = crop(x10, UNITY, x11)
    x13 = objects(x12, T, F, T)
    x14 = first(x13)
    x15 = color(x14)
    x16 = normalize(x14)
    x17 = toindices(x16)
    x18 = totuple(x1)
    x19 = apply(normalize, x18)
    x20 = apply(toindices, x19)
    x21 = pair(x18, x20)
    x22 = matcher(last, x17)
    x23 = sfilter(x21, x22)
    x24 = mapply(first, x23)
    x25 = recolor(x15, x24)
    O = paint(I, x25)
    return O


def solve_0dfd9992(I):
    x1 = height(I)
    x2 = width(I)
    x3 = partition(I)
    x4 = colorfilter(x3, ZERO)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    x7 = astuple(x1, ONE)
    x8 = astuple(ONE, x2)
    x9 = decrement(x1)
    x10 = decrement(x2)
    x11 = toivec(x10)
    x12 = tojvec(x9)
    x13 = crop(I, x11, x8)
    x14 = crop(I, x12, x7)
    x15 = asobject(x14)
    x16 = asobject(x13)
    x17 = vperiod(x15)
    x18 = hperiod(x16)
    x19 = astuple(x17, x18)
    x20 = lbind(multiply, x19)
    x21 = neighbors(ORIGIN)
    x22 = mapply(neighbors, x21)
    x23 = apply(x20, x22)
    x24 = lbind(shift, x6)
    x25 = mapply(x24, x23)
    O = paint(I, x25)
    return O


def solve_f35d900a(I):
    x1 = objects(I, T, F, T)
    x2 = merge(x1)
    x3 = hmirror(x2)
    x4 = compose(neighbors, last)
    x5 = fork(recolor, first, x4)
    x6 = mapply(x5, x3)
    x7 = paint(I, x6)
    x8 = outbox(x2)
    x9 = ulcorner(x8)
    x10 = subgrid(x8, x7)
    x11 = dneighbors(ORIGIN)
    x12 = rbind(multiply, FOUR)
    x13 = apply(double, x11)
    x14 = apply(x12, x11)
    x15 = apply(increment, x13)
    x16 = apply(increment, x14)
    x17 = combine(x15, x16)
    x18 = underfill(x10, FIVE, x17)
    x19 = vmirror(x18)
    x20 = underfill(x19, FIVE, x17)
    x21 = ofcolor(x20, FIVE)
    x22 = hmirror(x20)
    x23 = underfill(x22, FIVE, x21)
    x24 = ofcolor(x23, FIVE)
    x25 = shift(x24, x9)
    O = fill(x7, FIVE, x25)
    return O


def solve_29ec7d0e(I):
    x1 = height(I)
    x2 = width(I)
    x3 = partition(I)
    x4 = colorfilter(x3, ZERO)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    x7 = astuple(x1, ONE)
    x8 = astuple(ONE, x2)
    x9 = decrement(x1)
    x10 = decrement(x2)
    x11 = toivec(x10)
    x12 = tojvec(x9)
    x13 = crop(I, x11, x8)
    x14 = crop(I, x12, x7)
    x15 = asobject(x14)
    x16 = asobject(x13)
    x17 = vperiod(x15)
    x18 = hperiod(x16)
    x19 = astuple(x17, x18)
    x20 = lbind(multiply, x19)
    x21 = neighbors(ORIGIN)
    x22 = mapply(neighbors, x21)
    x23 = apply(x20, x22)
    x24 = lbind(shift, x6)
    x25 = mapply(x24, x23)
    O = paint(I, x25)
    return O


def solve_2bcee788(I):
    x1 = mostcolor(I)
    x2 = objects(I, T, F, T)
    x3 = replace(I, x1, THREE)
    x4 = argmax(x2, size)
    x5 = argmin(x2, size)
    x6 = position(x4, x5)
    x7 = first(x6)
    x8 = last(x6)
    x9 = subgrid(x4, x3)
    x10 = hline(x5)
    x11 = hmirror(x9)
    x12 = vmirror(x9)
    x13 = branch(x10, x11, x12)
    x14 = branch(x10, x7, ZERO)
    x15 = branch(x10, ZERO, x8)
    x16 = asobject(x13)
    x17 = matcher(first, THREE)
    x18 = compose(flip, x17)
    x19 = sfilter(x16, x18)
    x20 = ulcorner(x4)
    x21 = shape(x4)
    x22 = astuple(x14, x15)
    x23 = multiply(x21, x22)
    x24 = add(x20, x23)
    x25 = shift(x19, x24)
    O = paint(x3, x25)
    return O


def solve_98cf29f8(I):
    x1 = objects(I, T, F, T)
    x2 = fork(multiply, height, width)
    x3 = fork(equality, size, x2)
    x4 = extract(x1, x3)
    x5 = other(x1, x4)
    x6 = toindices(x5)
    x7 = rbind(add, LEFT)
    x8 = rbind(add, RIGHT)
    x9 = rbind(add, UP)
    x10 = rbind(add, DOWN)
    x11 = initset(ZERO)
    x12 = compose(initset, x8)
    x13 = compose(initset, x10)
    x14 = fork(insert, x7, x12)
    x15 = fork(insert, x9, x13)
    x16 = matcher(palette, x11)
    x17 = rbind(toobject, I)
    x18 = chain(x16, x17, x14)
    x19 = chain(x16, x17, x15)
    x20 = fork(either, x18, x19)
    x21 = sfilter(x6, x20)
    x22 = cover(I, x21)
    x23 = difference(x6, x21)
    x24 = gravitate(x23, x4)
    x25 = toobject(x23, x22)
    O = move(x22, x25, x24)
    return O


def solve_9c1e755f(I):
    x1 = objects(I, F, T, T)
    x2 = matcher(first, FIVE)
    x3 = rbind(sfilter, x2)
    x4 = fork(difference, identity, x3)
    x5 = chain(invert, toivec, height)
    x6 = chain(tojvec, width, x4)
    x7 = compose(vline, x3)
    x8 = compose(x5, x4)
    x9 = fork(multiply, x8, x7)
    x10 = compose(flip, x7)
    x11 = fork(multiply, x6, x10)
    x12 = fork(add, x9, x11)
    x13 = chain(minimum, shape, x4)
    x14 = compose(size, x3)
    x15 = fork(divide, x14, x13)
    x16 = lbind(interval, ZERO)
    x17 = rbind(x16, ONE)
    x18 = compose(x17, x15)
    x19 = lbind(lbind, multiply)
    x20 = compose(x19, x12)
    x21 = fork(apply, x20, x18)
    x22 = lbind(lbind, shift)
    x23 = compose(x22, x4)
    x24 = fork(mapply, x23, x21)
    x25 = mapply(x24, x1)
    O = paint(I, x25)
    return O


def solve_cb227835(I):
    x1 = ofcolor(I, EIGHT)
    x2 = first(x1)
    x3 = last(x1)
    x4 = rbind(shoot, NEG_UNITY)
    x5 = rbind(shoot, UNITY)
    x6 = rbind(shoot, UP_RIGHT)
    x7 = rbind(shoot, DOWN_LEFT)
    x8 = fork(combine, x4, x5)
    x9 = fork(combine, x6, x7)
    x10 = fork(combine, x8, x9)
    x11 = mapply(x10, x1)
    x12 = lbind(sfilter, x11)
    x13 = lbind(rbind, contained)
    x14 = chain(x12, x13, backdrop)
    x15 = x14(x1)
    x16 = underfill(I, THREE, x15)
    x17 = fork(either, vline, hline)
    x18 = ofcolor(x16, THREE)
    x19 = lbind(lbind, connect)
    x20 = rbind(apply, x18)
    x21 = rbind(mfilter, x17)
    x22 = chain(x21, x20, x19)
    x23 = x22(x2)
    x24 = x22(x3)
    x25 = combine(x23, x24)
    O = underfill(x16, THREE, x25)
    return O


def solve_ecaa0ec1(I):
    x1 = objects(I, F, T, T)
    x2 = sizefilter(x1, ONE)
    x3 = merge(x2)
    x4 = center(x3)
    x5 = ofcolor(I, ONE)
    x6 = ofcolor(I, EIGHT)
    x7 = combine(x5, x6)
    x8 = outbox(x7)
    x9 = combine(x7, x8)
    x10 = toobject(x9, I)
    x11 = subgrid(x10, I)
    x12 = ulcorner(x10)
    x13 = subtract(x4, x12)
    x14 = rbind(index, x13)
    x15 = matcher(x14, FOUR)
    x16 = rot90(x11)
    x17 = rot180(x11)
    x18 = rot270(x11)
    x19 = initset(x16)
    x20 = insert(x17, x19)
    x21 = insert(x18, x20)
    x22 = extract(x21, x15)
    x23 = asobject(x22)
    x24 = shift(x23, x12)
    x25 = cover(I, x3)
    O = paint(x25, x24)
    return O


def solve_1da012fc(I):
    x1 = ofcolor(I, FIVE)
    x2 = subgrid(x1, I)
    x3 = upscale(x2, TWO)
    x4 = objects(x3, T, T, T)
    x5 = backdrop(x1)
    x6 = cover(I, x5)
    x7 = objects(x6, T, T, T)
    x8 = ofcolor(I, ZERO)
    x9 = tojvec(TWO)
    x10 = merge(x4)
    x11 = normalize(x10)
    x12 = merge(x7)
    x13 = ulcorner(x12)
    x14 = add(x13, x9)
    x15 = shift(x11, x14)
    x16 = paint(x6, x15)
    x17 = fill(x16, ZERO, x8)
    x18 = objects(x17, F, T, T)
    x19 = leastcolor(x6)
    x20 = matcher(first, x19)
    x21 = compose(flip, x20)
    x22 = rbind(sfilter, x21)
    x23 = compose(color, x22)
    x24 = fork(recolor, x23, identity)
    x25 = mapply(x24, x18)
    O = paint(I, x25)
    return O


def solve_81c0276b(I):
    x1 = palette(I)
    x2 = objects(I, T, F, T)
    x3 = merge(x2)
    x4 = mostcolor(x3)
    x5 = remove(x4, x1)
    x6 = remove(ZERO, x5)
    x7 = lbind(colorfilter, x2)
    x8 = compose(size, x7)
    x9 = fork(astuple, identity, x8)
    x10 = apply(x9, x6)
    x11 = order(x10, last)
    x12 = size(x6)
    x13 = valmax(x10, last)
    x14 = astuple(x12, x13)
    x15 = canvas(ZERO, x14)
    x16 = lbind(connect, ORIGIN)
    x17 = chain(x16, tojvec, decrement)
    x18 = compose(x17, last)
    x19 = fork(recolor, first, x18)
    x20 = apply(x19, x11)
    x21 = interval(ZERO, x13, ONE)
    x22 = compose(toivec, last)
    x23 = fork(shift, first, x22)
    x24 = pair(x20, x21)
    x25 = mapply(x23, x24)
    O = paint(x15, x25)
    return O


def solve_17cae0c1(I):
    x1 = hsplit(I, THREE)
    x2 = rbind(colorcount, FIVE)
    x3 = matcher(x2, EIGHT)
    x4 = rbind(multiply, THREE)
    x5 = compose(x4, x3)
    x6 = matcher(x2, ONE)
    x7 = rbind(multiply, FOUR)
    x8 = compose(x7, x6)
    x9 = fork(equality, identity, vmirror)
    x10 = compose(flip, x9)
    x11 = rbind(multiply, NINE)
    x12 = compose(x11, x10)
    x13 = rbind(ofcolor, FIVE)
    x14 = compose(hline, x13)
    x15 = compose(uppermost, x13)
    x16 = matcher(x15, ZERO)
    x17 = fork(both, x14, x16)
    x18 = rbind(multiply, SIX)
    x19 = compose(x18, x17)
    x20 = fork(add, x5, x8)
    x21 = fork(add, x12, x19)
    x22 = fork(add, x20, x21)
    x23 = apply(x22, x1)
    x24 = repeat(x23, ONE)
    x25 = replace(x24, ZERO, ONE)
    O = upscale(x25, THREE)
    return O


def solve_e9ac8c9e(I):
    x1 = objects(I, F, T, T)
    x2 = rbind(subgrid, I)
    x3 = chain(lefthalf, tophalf, x2)
    x4 = chain(righthalf, tophalf, x2)
    x5 = chain(lefthalf, bottomhalf, x2)
    x6 = chain(righthalf, bottomhalf, x2)
    x7 = lbind(remove, ZERO)
    x8 = rbind(other, FIVE)
    x9 = chain(x8, x7, palette)
    x10 = rbind(switch, FIVE)
    x11 = compose(x9, x3)
    x12 = compose(x9, x4)
    x13 = compose(x9, x5)
    x14 = compose(x9, x6)
    x15 = fork(x10, x3, x11)
    x16 = fork(x10, x4, x12)
    x17 = fork(x10, x5, x13)
    x18 = fork(x10, x6, x14)
    x19 = fork(hconcat, x15, x16)
    x20 = fork(hconcat, x17, x18)
    x21 = fork(vconcat, x19, x20)
    x22 = compose(asobject, x21)
    x23 = fork(shift, x22, ulcorner)
    x24 = mapply(x23, x1)
    x25 = paint(I, x24)
    O = replace(x25, FIVE, ZERO)
    return O


def solve_d282b262(I):
    x1 = rbind(objects, T)
    x2 = rbind(x1, F)
    x3 = rbind(x2, F)
    x4 = rbind(argmax, rightmost)
    x5 = compose(x4, x3)
    x6 = compose(x5, first)
    x7 = fork(cover, first, x6)
    x8 = compose(merge, last)
    x9 = fork(gravitate, x6, x8)
    x10 = fork(shift, x6, x9)
    x11 = fork(insert, x10, last)
    x12 = fork(astuple, x7, x11)
    x13 = objects(I, F, F, T)
    x14 = size(x13)
    x15 = power(x12, x14)
    x16 = merge(x13)
    x17 = cover(I, x16)
    x18 = width(I)
    x19 = tojvec(x18)
    x20 = asobject(x17)
    x21 = shift(x20, x19)
    x22 = initset(x21)
    x23 = astuple(I, x22)
    x24 = x15(x23)
    x25 = x8(x24)
    O = paint(x17, x25)
    return O


def solve_39e1d7f9(I):
    x1 = fgpartition(I)
    x2 = objects(I, T, F, T)
    x3 = order(x1, height)
    x4 = last(x3)
    x5 = remove(x4, x3)
    x6 = last(x5)
    x7 = color(x6)
    x8 = colorfilter(x2, x7)
    x9 = power(outbox, TWO)
    x10 = rbind(toobject, I)
    x11 = chain(numcolors, x10, x9)
    x12 = argmax(x8, x11)
    x13 = ulcorner(x12)
    x14 = shape(x12)
    x15 = subtract(x13, x14)
    x16 = decrement(x15)
    x17 = multiply(x14, THREE)
    x18 = add(x17, TWO_BY_TWO)
    x19 = crop(I, x16, x18)
    x20 = asobject(x19)
    x21 = apply(ulcorner, x8)
    x22 = increment(x14)
    x23 = rbind(subtract, x22)
    x24 = apply(x23, x21)
    x25 = lbind(shift, x20)
    x26 = mapply(x25, x24)
    O = paint(I, x26)
    return O


def solve_484b58aa(I):
    x1 = height(I)
    x2 = width(I)
    x3 = partition(I)
    x4 = colorfilter(x3, ZERO)
    x5 = difference(x3, x4)
    x6 = merge(x5)
    x7 = astuple(x1, TWO)
    x8 = astuple(TWO, x2)
    x9 = power(decrement, TWO)
    x10 = x9(x1)
    x11 = x9(x2)
    x12 = toivec(x11)
    x13 = tojvec(x10)
    x14 = crop(I, x12, x8)
    x15 = crop(I, x13, x7)
    x16 = asobject(x15)
    x17 = asobject(x14)
    x18 = vperiod(x16)
    x19 = hperiod(x17)
    x20 = astuple(x18, x19)
    x21 = lbind(multiply, x20)
    x22 = neighbors(ORIGIN)
    x23 = mapply(neighbors, x22)
    x24 = apply(x21, x23)
    x25 = lbind(shift, x6)
    x26 = mapply(x25, x24)
    O = paint(I, x26)
    return O


def solve_469497ad(I):
    x1 = numcolors(I)
    x2 = decrement(x1)
    x3 = upscale(I, x2)
    x4 = objects(x3, F, F, T)
    x5 = argmin(x4, size)
    x6 = ulcorner(x5)
    x7 = llcorner(x5)
    x8 = shoot(x6, NEG_UNITY)
    x9 = shoot(x6, UNITY)
    x10 = shoot(x7, DOWN_LEFT)
    x11 = shoot(x7, UP_RIGHT)
    x12 = combine(x8, x9)
    x13 = combine(x10, x11)
    x14 = combine(x12, x13)
    x15 = underfill(x3, TWO, x14)
    x16 = objects(x15, T, F, T)
    x17 = argmax(x16, lrcorner)
    x18 = urcorner(x17)
    x19 = tojvec(NEG_TWO)
    x20 = add(x18, x19)
    x21 = connect(x18, x20)
    x22 = toobject(x21, x15)
    x23 = shift(x22, UP)
    x24 = color(x23)
    x25 = equality(x24, SIX)
    x26 = branch(x25, x23, x17)
    O = paint(x15, x26)
    return O


def solve_103eff5b(I):
    x1 = objects(I, F, T, T)
    x2 = argmin(x1, size)
    x3 = argmax(x1, size)
    x4 = compose(normalize, toindices)
    x5 = lbind(rbind, upscale)
    x6 = interval(ONE, SIX, ONE)
    x7 = apply(x5, x6)
    x8 = initset(vmirror)
    x9 = insert(hmirror, x8)
    x10 = insert(dmirror, x9)
    x11 = insert(cmirror, x10)
    x12 = prapply(compose, x11, x11)
    x13 = prapply(compose, x7, x12)
    x14 = x4(x3)
    x15 = rbind(equality, x14)
    x16 = compose(x15, x4)
    x17 = lbind(compose, x16)
    x18 = rbind(rapply, x2)
    x19 = chain(first, x18, initset)
    x20 = compose(x19, x17)
    x21 = sfilter(x13, x20)
    x22 = first(x21)
    x23 = x22(x2)
    x24 = normalize(x23)
    x25 = ulcorner(x3)
    x26 = shift(x24, x25)
    O = paint(I, x26)
    return O


def solve_712bf12e(I):
    x1 = astuple(ZERO, ORIGIN)
    x2 = astuple(TWO, DOWN)
    x3 = initset(x1)
    x4 = insert(x2, x3)
    x5 = recolor(TWO, x4)
    x6 = astuple(FIVE, ORIGIN)
    x7 = initset(x2)
    x8 = insert(x6, x7)
    x9 = astuple(ZERO, UNITY)
    x10 = astuple(TWO, UNITY)
    x11 = insert(x9, x8)
    x12 = insert(x10, x8)
    x13 = lbind(lbind, shift)
    x14 = double(TEN)
    x15 = x13(x5)
    x16 = x13(x12)
    x17 = rbind(occurrences, x4)
    x18 = rbind(occurrences, x11)
    x19 = lbind(mapply, x15)
    x20 = lbind(mapply, x16)
    x21 = compose(x19, x17)
    x22 = compose(x20, x18)
    x23 = fork(paint, identity, x21)
    x24 = fork(paint, identity, x22)
    x25 = compose(x23, x24)
    x26 = power(x25, x14)
    O = x26(I)
    return O


def solve_5a5a2103(I):
    x1 = objects(I, T, T, T)
    x2 = argmax(x1, size)
    x3 = remove(x2, x1)
    x4 = fork(multiply, height, width)
    x5 = argmax(x3, x4)
    x6 = remove(x5, x3)
    x7 = normalize(x5)
    x8 = width(x7)
    x9 = height(x7)
    x10 = greater(x8, x9)
    x11 = branch(x10, DOWN, ORIGIN)
    x12 = shift(x7, x11)
    x13 = lbind(shift, x12)
    x14 = merge(x6)
    x15 = cover(I, x14)
    x16 = chain(x13, decrement, ulcorner)
    x17 = fork(recolor, color, x16)
    x18 = chain(tojvec, increment, width)
    x19 = x18(x5)
    x20 = interval(ZERO, TEN, ONE)
    x21 = lbind(multiply, x19)
    x22 = apply(x21, x20)
    x23 = lbind(lbind, shift)
    x24 = rbind(mapply, x22)
    x25 = chain(x24, x23, x17)
    x26 = mapply(x25, x6)
    O = paint(x15, x26)
    return O


def solve_e4075551(I):
    x1 = fgpartition(I)
    x2 = merge(x1)
    x3 = backdrop(x2)
    x4 = argmin(x1, uppermost)
    x5 = argmax(x1, uppermost)
    x6 = argmin(x1, leftmost)
    x7 = argmax(x1, leftmost)
    x8 = compose(hfrontier, center)
    x9 = compose(vfrontier, center)
    x10 = lbind(intersection, x3)
    x11 = compose(x10, x8)
    x12 = compose(x10, x9)
    x13 = fork(recolor, color, x11)
    x14 = fork(recolor, color, x12)
    x15 = x13(x4)
    x16 = x13(x5)
    x17 = x14(x6)
    x18 = x14(x7)
    x19 = combine(x15, x16)
    x20 = paint(I, x19)
    x21 = combine(x17, x18)
    x22 = underpaint(x20, x21)
    x23 = ofcolor(I, TWO)
    x24 = fork(combine, x8, x9)
    x25 = x24(x23)
    x26 = x10(x25)
    O = underfill(x22, FIVE, x26)
    return O


def solve_c62e2108(I):
    x1 = objects(I, T, T, T)
    x2 = colorfilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = lbind(rbind, vmatching)
    x5 = lbind(rbind, hmatching)
    x6 = lbind(fork, either)
    x7 = fork(x6, x4, x5)
    x8 = lbind(sfilter, x2)
    x9 = compose(x8, x7)
    x10 = lbind(lbind, shift)
    x11 = lbind(lbind, multiply)
    x12 = interval(ZERO, TEN, ONE)
    x13 = lbind(lbind, position)
    x14 = rbind(apply, x12)
    x15 = compose(x14, x11)
    x16 = compose(x11, shape)
    x17 = fork(compose, x16, x13)
    x18 = lbind(compose, x15)
    x19 = compose(x18, x17)
    x20 = lbind(lbind, mapply)
    x21 = compose(x20, x10)
    x22 = fork(compose, x21, x19)
    x23 = fork(mapply, x22, x9)
    x24 = mapply(x23, x3)
    x25 = merge(x2)
    x26 = cover(I, x25)
    O = underpaint(x26, x24)
    return O


def solve_99306f82(I):
    x1 = fgpartition(I)
    x2 = sizefilter(x1, ONE)
    x3 = merge(x2)
    x4 = shape(x3)
    x5 = increment(x4)
    x6 = shift(x3, x5)
    x7 = paint(I, x6)
    x8 = ofcolor(I, ONE)
    x9 = subgrid(x8, x7)
    x10 = trim(x9)
    x11 = rot180(x10)
    x12 = paint(x11, x3)
    x13 = fgpartition(x12)
    x14 = fork(recolor, color, box)
    x15 = mapply(x14, x13)
    x16 = paint(x12, x15)
    x17 = partition(x16)
    x18 = colorfilter(x17, ZERO)
    x19 = difference(x17, x18)
    x20 = argmin(x19, size)
    x21 = color(x20)
    x22 = replace(x16, ZERO, x21)
    x23 = asobject(x22)
    x24 = ulcorner(x8)
    x25 = increment(x24)
    x26 = shift(x23, x25)
    O = paint(I, x26)
    return O


def solve_3befdf3e(I):
    x1 = objects(I, F, F, T)
    x2 = totuple(x1)
    x3 = apply(mostcolor, x2)
    x4 = apply(leastcolor, x2)
    x5 = apply(width, x2)
    x6 = rbind(subtract, TWO)
    x7 = apply(x6, x5)
    x8 = apply(invert, x7)
    x9 = papply(recolor, x4, x2)
    x10 = apply(toivec, x7)
    x11 = mpapply(shift, x9, x10)
    x12 = paint(I, x11)
    x13 = apply(toivec, x8)
    x14 = mpapply(shift, x9, x13)
    x15 = paint(x12, x14)
    x16 = apply(tojvec, x7)
    x17 = mpapply(shift, x9, x16)
    x18 = paint(x15, x17)
    x19 = apply(tojvec, x8)
    x20 = mpapply(shift, x9, x19)
    x21 = paint(x18, x20)
    x22 = merge(x2)
    x23 = paint(x21, x22)
    x24 = first(x4)
    x25 = first(x3)
    x26 = replace(x23, x24, NEG_ONE)
    x27 = replace(x26, x25, x24)
    O = replace(x27, NEG_ONE, x25)
    return O


def solve_9aec4887(I):
    x1 = objects(I, F, T, T)
    x2 = colorfilter(x1, EIGHT)
    x3 = first(x2)
    x4 = other(x1, x3)
    x5 = subgrid(x4, I)
    x6 = normalize(x3)
    x7 = shift(x6, UNITY)
    x8 = paint(x5, x7)
    x9 = palette(x8)
    x10 = remove(ZERO, x9)
    x11 = remove(EIGHT, x10)
    x12 = lbind(ofcolor, x8)
    x13 = rbind(remove, x11)
    x14 = lbind(mapply, x12)
    x15 = lbind(rbind, manhattan)
    x16 = chain(x15, x14, x13)
    x17 = rbind(compose, initset)
    x18 = lbind(lbind, manhattan)
    x19 = chain(x17, x18, x12)
    x20 = compose(x17, x16)
    x21 = lbind(fork, greater)
    x22 = fork(x21, x20, x19)
    x23 = ofcolor(x8, EIGHT)
    x24 = lbind(sfilter, x23)
    x25 = compose(x24, x22)
    x26 = fork(recolor, identity, x25)
    x27 = mapply(x26, x11)
    O = paint(x8, x27)
    return O


def solve_9b2a60aa(I):
    x1 = objects(I, T, T, T)
    x2 = argmax(x1, size)
    x3 = normalize(x2)
    x4 = remove(x2, x1)
    x5 = colorfilter(x4, TWO)
    x6 = merge(x5)
    x7 = rbind(combine, x6)
    x8 = compose(backdrop, x7)
    x9 = compose(size, x8)
    x10 = rbind(colorcount, ZERO)
    x11 = rbind(toobject, I)
    x12 = chain(x10, x11, x8)
    x13 = compose(increment, x12)
    x14 = fork(subtract, x9, x13)
    x15 = compose(double, x14)
    x16 = rbind(manhattan, x6)
    x17 = fork(add, x16, x15)
    x18 = merge(x4)
    x19 = position(x6, x18)
    x20 = rbind(multiply, x19)
    x21 = compose(x20, x17)
    x22 = ulcorner(x2)
    x23 = lbind(add, x22)
    x24 = lbind(shift, x3)
    x25 = chain(x24, x23, x21)
    x26 = fork(recolor, color, x25)
    x27 = mapply(x26, x4)
    O = paint(I, x27)
    return O


def solve_49d1d64f(I):
    x1 = upscale(I, TWO)
    x2 = asindices(x1)
    x3 = corners(x2)
    x4 = fill(x1, ZERO, x3)
    x5 = height(x4)
    x6 = width(x4)
    x7 = equality(x5, SIX)
    x8 = equality(x6, SIX)
    x9 = compose(decrement, halve)
    x10 = x9(x5)
    x11 = x9(x6)
    x12 = astuple(x10, x6)
    x13 = crop(x4, ORIGIN, x12)
    x14 = increment(x10)
    x15 = toivec(x14)
    x16 = astuple(x14, x6)
    x17 = crop(x4, x15, x16)
    x18 = vconcat(x13, x17)
    x19 = branch(x7, x18, x4)
    x20 = decrement(x5)
    x21 = branch(x7, x20, x5)
    x22 = astuple(x21, x11)
    x23 = crop(x19, ORIGIN, x22)
    x24 = increment(x11)
    x25 = tojvec(x24)
    x26 = astuple(x21, x24)
    x27 = crop(x19, x25, x26)
    x28 = hconcat(x23, x27)
    O = branch(x8, x28, x19)
    return O


def solve_57aa92db(I):
    x1 = objects(I, F, T, T)
    x2 = objects(I, T, F, T)
    x3 = lbind(lbind, colorcount)
    x4 = fork(apply, x3, palette)
    x5 = compose(maximum, x4)
    x6 = compose(minimum, x4)
    x7 = fork(subtract, x5, x6)
    x8 = argmax(x1, x7)
    x9 = leastcolor(x8)
    x10 = normalize(x8)
    x11 = matcher(first, x9)
    x12 = sfilter(x10, x11)
    x13 = ulcorner(x12)
    x14 = colorfilter(x2, x9)
    x15 = rbind(toobject, I)
    x16 = lbind(remove, ZERO)
    x17 = chain(first, x16, palette)
    x18 = chain(x17, x15, outbox)
    x19 = lbind(multiply, x13)
    x20 = compose(x19, width)
    x21 = fork(subtract, ulcorner, x20)
    x22 = lbind(shift, x10)
    x23 = compose(x22, x21)
    x24 = fork(upscale, x23, width)
    x25 = fork(recolor, x18, x24)
    x26 = mapply(x25, x14)
    x27 = paint(I, x26)
    x28 = merge(x2)
    O = paint(x27, x28)
    return O


def solve_dc2e9a9d(I):
    x1 = rbind(objects, T)
    x2 = rbind(x1, T)
    x3 = rbind(x2, T)
    x4 = rbind(colorfilter, THREE)
    x5 = compose(x4, x3)
    x6 = rbind(matcher, ZERO)
    x7 = lbind(lbind, index)
    x8 = rbind(compose, ulcorner)
    x9 = rbind(compose, llcorner)
    x10 = chain(x6, x8, x7)
    x11 = chain(x6, x9, x7)
    x12 = lbind(fork, both)
    x13 = fork(x12, x10, x11)
    x14 = fork(sfilter, x5, x13)
    x15 = chain(tojvec, increment, width)
    x16 = fork(shift, vmirror, x15)
    x17 = lbind(mapply, x16)
    x18 = compose(x17, x14)
    x19 = lbind(recolor, ONE)
    x20 = lbind(recolor, EIGHT)
    x21 = compose(x19, x18)
    x22 = compose(x20, x18)
    x23 = fork(paint, identity, x21)
    x24 = fork(paint, identity, x22)
    x25 = compose(rot90, x23)
    x26 = compose(rot90, x24)
    x27 = compose(x26, x25)
    x28 = power(x27, TWO)
    O = x28(I)
    return O


def solve_17b80ad2(I):
    x1 = rbind(objects, T)
    x2 = rbind(x1, F)
    x3 = rbind(x2, T)
    x4 = ofcolor(I, FIVE)
    x5 = apply(last, x4)
    x6 = rbind(contained, x5)
    x7 = compose(x6, rightmost)
    x8 = lbind(add, UP)
    x9 = rbind(matcher, ZERO)
    x10 = compose(x8, center)
    x11 = rbind(compose, x10)
    x12 = lbind(lbind, index)
    x13 = chain(x9, x11, x12)
    x14 = lbind(fork, both)
    x15 = lbind(x14, x7)
    x16 = compose(x15, x13)
    x17 = fork(sfilter, x3, x16)
    x18 = rbind(argmin, uppermost)
    x19 = compose(x18, x17)
    x20 = compose(color, x19)
    x21 = compose(center, x19)
    x22 = rbind(shoot, UP)
    x23 = compose(x22, x21)
    x24 = fork(recolor, x20, x23)
    x25 = fork(underpaint, identity, x24)
    x26 = x17(I)
    x27 = size(x26)
    x28 = power(x25, x27)
    O = x28(I)
    return O


def solve_42918530(I):
    x1 = shape(I)
    x2 = decrement(x1)
    x3 = divide(x2, SIX)
    x4 = first(x3)
    x5 = last(x3)
    x6 = crop(I, ORIGIN, x2)
    x7 = rbind(hsplit, x5)
    x8 = vsplit(x6, x4)
    x9 = mapply(x7, x8)
    x10 = matcher(first, ZERO)
    x11 = compose(flip, x10)
    x12 = rbind(sfilter, x11)
    x13 = compose(x12, asobject)
    x14 = apply(x13, x9)
    x15 = multiply(FOUR, FOUR)
    x16 = matcher(size, x15)
    x17 = compose(flip, x16)
    x18 = sfilter(x14, x17)
    x19 = lbind(lbind, shift)
    x20 = lbind(occurrences, I)
    x21 = rbind(compose, last)
    x22 = lbind(rbind, contained)
    x23 = chain(x21, x22, box)
    x24 = fork(sfilter, identity, x23)
    x25 = compose(x20, x24)
    x26 = fork(mapply, x19, x25)
    x27 = mapply(x26, x18)
    x28 = shift(x27, NEG_UNITY)
    O = paint(I, x28)
    return O


def solve_15663ba9(I):
    x1 = leastcolor(I)
    x2 = objects(I, T, T, F)
    x3 = colorfilter(x2, ZERO)
    x4 = rbind(bordering, I)
    x5 = extract(x3, x4)
    x6 = ofcolor(I, x1)
    x7 = lbind(index, I)
    x8 = rbind(equality, x1)
    x9 = rbind(add, DOWN)
    x10 = rbind(add, UP)
    x11 = rbind(add, LEFT)
    x12 = rbind(add, RIGHT)
    x13 = chain(x8, x7, x9)
    x14 = chain(x8, x7, x10)
    x15 = chain(x8, x7, x11)
    x16 = chain(x8, x7, x12)
    x17 = fork(both, x13, x15)
    x18 = fork(both, x13, x16)
    x19 = fork(both, x14, x15)
    x20 = fork(both, x14, x16)
    x21 = fork(either, x17, x18)
    x22 = fork(either, x19, x20)
    x23 = fork(either, x21, x22)
    x24 = sfilter(x6, x23)
    x25 = rbind(adjacent, x5)
    x26 = compose(x25, initset)
    x27 = sfilter(x24, x26)
    x28 = fill(I, TWO, x24)
    O = fill(x28, FOUR, x27)
    return O


def solve_3979b1a8(I):
    x1 = shape(I)
    x2 = double(x1)
    x3 = double(x2)
    x4 = leastcolor(I)
    x5 = mostcolor(I)
    x6 = asobject(I)
    x7 = center(x6)
    x8 = index(I, x7)
    x9 = add(x1, x3)
    x10 = canvas(ZERO, x9)
    x11 = shift(x6, x2)
    x12 = paint(x10, x11)
    x13 = chain(outbox, merge, fgpartition)
    x14 = chain(corners, merge, fgpartition)
    x15 = compose(corners, x13)
    x16 = fork(difference, x13, x15)
    x17 = fork(combine, x16, x14)
    x18 = lbind(fork, paint)
    x19 = lbind(x18, identity)
    x20 = rbind(compose, x17)
    x21 = lbind(lbind, recolor)
    x22 = chain(x19, x20, x21)
    x23 = x22(x4)
    x24 = x22(x8)
    x25 = x22(x5)
    x26 = chain(x25, x24, x23)
    x27 = power(x26, TWO)
    x28 = x27(x12)
    O = crop(x28, x2, x2)
    return O


def solve_963f59bc(I):
    x1 = ofcolor(I, ONE)
    x2 = objects(I, T, T, T)
    x3 = sizefilter(x2, ONE)
    x4 = rbind(vmatching, x1)
    x5 = sfilter(x3, x4)
    x6 = rbind(hmatching, x1)
    x7 = sfilter(x3, x6)
    x8 = hmirror(x1)
    x9 = vmirror(x1)
    x10 = lbind(matcher, last)
    x11 = lbind(matcher, first)
    x12 = lbind(sfilter, x8)
    x13 = lbind(sfilter, x9)
    x14 = chain(x12, x10, leftmost)
    x15 = chain(x13, x11, uppermost)
    x16 = compose(lowermost, x14)
    x17 = compose(leftmost, x15)
    x18 = fork(subtract, uppermost, x16)
    x19 = fork(subtract, leftmost, x17)
    x20 = lbind(shift, x8)
    x21 = lbind(shift, x9)
    x22 = chain(x20, toivec, x18)
    x23 = chain(x21, tojvec, x19)
    x24 = fork(recolor, color, x22)
    x25 = fork(recolor, color, x23)
    x26 = mapply(x24, x5)
    x27 = mapply(x25, x7)
    x28 = combine(x26, x27)
    O = paint(I, x28)
    return O


def solve_5833af48(I):
    x1 = shape(I)
    x2 = canvas(ZERO, x1)
    x3 = vconcat(I, x2)
    x4 = objects(x3, F, T, T)
    x5 = argmax(x4, size)
    x6 = remove(x5, x4)
    x7 = argmax(x6, size)
    x8 = subgrid(x7, x3)
    x9 = argmin(x6, size)
    x10 = subgrid(x9, x3)
    x11 = objects(x8, T, F, F)
    x12 = colorfilter(x11, EIGHT)
    x13 = first(x12)
    x14 = width(x13)
    x15 = width(x9)
    x16 = upscale(x8, x15)
    x17 = upscale(x10, x14)
    x18 = ofcolor(x17, EIGHT)
    x19 = lbind(shift, x18)
    x20 = objects(x16, T, F, F)
    x21 = colorfilter(x20, EIGHT)
    x22 = apply(ulcorner, x21)
    x23 = palette(x16)
    x24 = other(x23, EIGHT)
    x25 = merge(x21)
    x26 = fill(x16, x24, x25)
    x27 = mapply(x19, x22)
    x28 = fill(x26, EIGHT, x27)
    O = downscale(x28, x14)
    return O


def solve_f3e62deb(I):
    x1 = leastcolor(I)
    x2 = equality(x1, EIGHT)
    x3 = equality(x1, FOUR)
    x4 = equality(x1, SIX)
    x5 = equality(x1, THREE)
    x6 = ofcolor(I, x1)
    x7 = center(x6)
    x8 = first(x7)
    x9 = last(x7)
    x10 = shape(I)
    x11 = decrement(x10)
    x12 = first(x11)
    x13 = last(x11)
    x14 = subtract(x12, x8)
    x15 = subtract(x13, x9)
    x16 = decrement(x14)
    x17 = decrement(x15)
    x18 = invert(x8)
    x19 = increment(x18)
    x20 = invert(x9)
    x21 = increment(x20)
    x22 = branch(x4, x19, ZERO)
    x23 = branch(x5, x21, ZERO)
    x24 = branch(x3, x16, x22)
    x25 = branch(x2, x17, x23)
    x26 = astuple(x24, x25)
    x27 = cover(I, x6)
    x28 = shift(x6, x26)
    O = fill(x27, x1, x28)
    return O


def solve_f1cefba8(I):
    x1 = palette(I)
    x2 = objects(I, F, F, T)
    x3 = ofcolor(I, ZERO)
    x4 = first(x2)
    x5 = ulcorner(x4)
    x6 = subgrid(x4, I)
    x7 = power(trim, TWO)
    x8 = x7(x6)
    x9 = asindices(x8)
    x10 = shift(x9, TWO_BY_TWO)
    x11 = fill(x6, ZERO, x10)
    x12 = leastcolor(x11)
    x13 = remove(ZERO, x1)
    x14 = other(x13, x12)
    x15 = ofcolor(x11, x12)
    x16 = shift(x15, x5)
    x17 = ofcolor(I, x12)
    x18 = uppermost(x17)
    x19 = lowermost(x17)
    x20 = matcher(first, x18)
    x21 = matcher(first, x19)
    x22 = fork(either, x20, x21)
    x23 = sfilter(x16, x22)
    x24 = difference(x16, x23)
    x25 = mapply(vfrontier, x23)
    x26 = mapply(hfrontier, x24)
    x27 = combine(x25, x26)
    x28 = intersection(x3, x27)
    x29 = fill(I, x14, x27)
    O = fill(x29, x12, x28)
    return O


def solve_aba27056(I):
    x1 = objects(I, T, F, T)
    x2 = mapply(toindices, x1)
    x3 = box(x2)
    x4 = difference(x3, x2)
    x5 = delta(x2)
    x6 = position(x5, x4)
    x7 = interval(ZERO, NINE, ONE)
    x8 = lbind(multiply, x6)
    x9 = apply(x8, x7)
    x10 = lbind(shift, x4)
    x11 = mapply(x10, x9)
    x12 = fill(I, FOUR, x5)
    x13 = fill(x12, FOUR, x11)
    x14 = corners(x4)
    x15 = ofcolor(x13, ZERO)
    x16 = rbind(toobject, x13)
    x17 = rbind(colorcount, ZERO)
    x18 = chain(x17, x16, dneighbors)
    x19 = matcher(x18, TWO)
    x20 = rbind(adjacent, x2)
    x21 = rbind(adjacent, x11)
    x22 = fork(both, x20, x21)
    x23 = compose(x22, initset)
    x24 = sfilter(x15, x19)
    x25 = sfilter(x24, x23)
    x26 = product(x14, x25)
    x27 = fork(subtract, last, first)
    x28 = fork(shoot, first, x27)
    x29 = mapply(x28, x26)
    O = fill(x13, FOUR, x29)
    return O


def solve_f8be4b64(I):
    x1 = objects(I, F, T, T)
    x2 = apply(center, x1)
    x3 = lbind(index, I)
    x4 = matcher(x3, ZERO)
    x5 = sfilter(x2, x4)
    x6 = ofcolor(I, THREE)
    x7 = difference(x2, x5)
    x8 = lbind(underfill, I)
    x9 = fork(x8, x3, hfrontier)
    x10 = fork(x8, x3, vfrontier)
    x11 = rbind(objects, T)
    x12 = rbind(x11, T)
    x13 = rbind(x12, T)
    x14 = lbind(rbind, adjacent)
    x15 = compose(x14, dneighbors)
    x16 = lbind(fork, mfilter)
    x17 = rbind(x16, x15)
    x18 = compose(x13, x9)
    x19 = compose(x13, x10)
    x20 = fork(colorfilter, x18, x3)
    x21 = fork(colorfilter, x19, x3)
    x22 = x17(x20)
    x23 = x17(x21)
    x24 = mapply(x23, x7)
    x25 = mapply(x22, x7)
    x26 = underpaint(I, x24)
    x27 = underpaint(x26, x25)
    x28 = mapply(vfrontier, x5)
    x29 = difference(x28, x6)
    O = fill(x27, ZERO, x29)
    return O


def solve_896d5239(I):
    x1 = ofcolor(I, THREE)
    x2 = prapply(connect, x1, x1)
    x3 = fork(either, hline, vline)
    x4 = matcher(size, THREE)
    x5 = compose(flip, x3)
    x6 = fork(both, x4, x5)
    x7 = mfilter(x2, x6)
    x8 = fill(I, THREE, x7)
    x9 = objects(x8, T, T, T)
    x10 = colorfilter(x9, THREE)
    x11 = neighbors(ORIGIN)
    x12 = mapply(neighbors, x11)
    x13 = lbind(rbind, shift)
    x14 = apply(x13, x12)
    x15 = astuple(hmirror, vmirror)
    x16 = prapply(compose, x15, x14)
    x17 = lbind(rapply, x16)
    x18 = lbind(compose, size)
    x19 = lbind(rbind, intersection)
    x20 = compose(x18, x19)
    x21 = fork(argmax, x17, x20)
    x22 = fork(combine, identity, x21)
    x23 = compose(toindices, x22)
    x24 = lbind(prapply, connect)
    x25 = fork(x24, x23, x23)
    x26 = rbind(mfilter, x3)
    x27 = compose(x26, x25)
    x28 = mapply(x27, x10)
    x29 = fill(x8, EIGHT, x28)
    O = fill(x29, THREE, x1)
    return O


def solve_05a7bcf2(I):
    x1 = ofcolor(I, EIGHT)
    x2 = hline(x1)
    x3 = branch(x2, identity, dmirror)
    x4 = x3(I)
    x5 = ofcolor(x4, EIGHT)
    x6 = ofcolor(x4, TWO)
    x7 = uppermost(x5)
    x8 = uppermost(x6)
    x9 = greater(x7, x8)
    x10 = branch(x9, identity, hmirror)
    x11 = x10(x4)
    x12 = compose(x3, x10)
    x13 = ofcolor(x11, FOUR)
    x14 = rbind(shoot, UP)
    x15 = mapply(x14, x13)
    x16 = underfill(x11, FOUR, x15)
    x17 = fill(x16, THREE, x13)
    x18 = ofcolor(x11, TWO)
    x19 = uppermost(x18)
    x20 = intersection(x18, x15)
    x21 = fill(x17, FOUR, x20)
    x22 = multiply(UP, x19)
    x23 = shift(x20, x22)
    x24 = fill(x21, TWO, x23)
    x25 = objects(x24, T, T, T)
    x26 = colorfilter(x25, FOUR)
    x27 = rbind(hmatching, x20)
    x28 = mfilter(x26, x27)
    x29 = fill(x24, EIGHT, x28)
    O = x12(x29)
    return O


def solve_845d6e51(I):
    x1 = ofcolor(I, FIVE)
    x2 = lrcorner(x1)
    x3 = crop(I, ORIGIN, x2)
    x4 = rot90(x3)
    x5 = rot180(x3)
    x6 = rot270(x3)
    x7 = objects(x3, T, T, T)
    x8 = objects(x4, T, T, T)
    x9 = objects(x5, T, T, T)
    x10 = objects(x6, T, T, T)
    x11 = combine(x7, x8)
    x12 = combine(x9, x10)
    x13 = combine(x11, x12)
    x14 = apply(normalize, x13)
    x15 = objects(I, T, T, T)
    x16 = colorfilter(x15, THREE)
    x17 = apply(toindices, x16)
    x18 = apply(toindices, x14)
    x19 = rbind(contained, x18)
    x20 = compose(x19, normalize)
    x21 = rbind(sfilter, x20)
    x22 = lbind(extract, x14)
    x23 = rbind(compose, toindices)
    x24 = lbind(lbind, equality)
    x25 = chain(x23, x24, normalize)
    x26 = chain(color, x22, x25)
    x27 = fork(recolor, x26, identity)
    x28 = x21(x17)
    x29 = mapply(x27, x28)
    O = paint(I, x29)
    return O


def solve_1e32b0e9(I):
    x1 = height(I)
    x2 = mostcolor(I)
    x3 = asobject(I)
    x4 = subtract(x1, TWO)
    x5 = divide(x4, THREE)
    x6 = astuple(x5, x5)
    x7 = crop(I, ORIGIN, x6)
    x8 = partition(x7)
    x9 = matcher(color, ZERO)
    x10 = compose(flip, x9)
    x11 = extract(x8, x10)
    x12 = initset(x2)
    x13 = palette(x3)
    x14 = palette(x11)
    x15 = difference(x13, x14)
    x16 = difference(x15, x12)
    x17 = first(x16)
    x18 = interval(ZERO, THREE, ONE)
    x19 = product(x18, x18)
    x20 = totuple(x19)
    x21 = apply(first, x20)
    x22 = apply(last, x20)
    x23 = lbind(multiply, x5)
    x24 = apply(x23, x21)
    x25 = apply(x23, x22)
    x26 = papply(add, x24, x21)
    x27 = papply(add, x25, x22)
    x28 = papply(astuple, x26, x27)
    x29 = lbind(shift, x11)
    x30 = mapply(x29, x28)
    O = underfill(I, x17, x30)
    return O


def solve_28e73c20(I):
    x1 = width(I)
    x2 = astuple(ONE, TWO)
    x3 = astuple(TWO, TWO)
    x4 = astuple(TWO, ONE)
    x5 = astuple(THREE, ONE)
    x6 = canvas(THREE, UNITY)
    x7 = upscale(x6, FOUR)
    x8 = initset(DOWN)
    x9 = insert(UNITY, x8)
    x10 = insert(x2, x9)
    x11 = insert(x3, x10)
    x12 = fill(x7, ZERO, x11)
    x13 = vupscale(x6, FIVE)
    x14 = hupscale(x13, THREE)
    x15 = insert(x4, x9)
    x16 = insert(x5, x15)
    x17 = fill(x14, ZERO, x16)
    x18 = even(x1)
    x19 = branch(x18, x12, x17)
    x20 = canvas(ZERO, UNITY)
    x21 = lbind(hupscale, x20)
    x22 = chain(x21, decrement, height)
    x23 = rbind(hconcat, x6)
    x24 = compose(x23, x22)
    x25 = lbind(hupscale, x6)
    x26 = compose(x25, height)
    x27 = fork(vconcat, x24, rot90)
    x28 = fork(vconcat, x26, x27)
    x29 = subtract(x1, FOUR)
    x30 = power(x28, x29)
    O = x30(x19)
    return O


def solve_14754a24(I):
    x1 = shape(I)
    x2 = asobject(I)
    x3 = shift(x2, UNITY)
    x4 = add(x1, TWO_BY_TWO)
    x5 = canvas(FIVE, x4)
    x6 = paint(x5, x3)
    x7 = objects(x6, T, T, F)
    x8 = colorfilter(x7, FOUR)
    x9 = apply(toindices, x8)
    x10 = replace(x6, FOUR, FIVE)
    x11 = fork(insert, identity, dneighbors)
    x12 = x11(ORIGIN)
    x13 = shift(x12, UNITY)
    x14 = recolor(FIVE, x13)
    x15 = occurrences(x10, x14)
    x16 = lbind(shift, x14)
    x17 = apply(x16, x15)
    x18 = apply(toindices, x17)
    x19 = lbind(fork, equality)
    x20 = lbind(x19, size)
    x21 = lbind(compose, size)
    x22 = lbind(rbind, intersection)
    x23 = chain(x20, x21, x22)
    x24 = lbind(sfilter, x9)
    x25 = chain(size, x24, x23)
    x26 = compose(positive, x25)
    x27 = mfilter(x18, x26)
    x28 = fill(x6, TWO, x27)
    x29 = merge(x8)
    x30 = paint(x28, x29)
    O = trim(x30)
    return O


def solve_4aab4007(I):
    x1 = dmirror(I)
    x2 = papply(pair, I, x1)
    x3 = lbind(apply, maximum)
    x4 = apply(x3, x2)
    x5 = rbind(shoot, RIGHT)
    x6 = rbind(shoot, DOWN)
    x7 = fork(combine, x5, x6)
    x8 = x7(UNITY)
    x9 = fill(x4, ONE, x8)
    x10 = x7(TWO_BY_TWO)
    x11 = fill(x9, FOUR, x10)
    x12 = shape(I)
    x13 = subtract(x12, THREE_BY_THREE)
    x14 = crop(x11, THREE_BY_THREE, x13)
    x15 = asobject(x14)
    x16 = ofcolor(x14, ZERO)
    x17 = recolor(ZERO, x16)
    x18 = difference(x15, x17)
    x19 = interval(NEG_TWO, THREE, ONE)
    x20 = lbind(shift, x18)
    x21 = lbind(multiply, UP_RIGHT)
    x22 = apply(x21, x19)
    x23 = mapply(x20, x22)
    x24 = paint(x14, x23)
    x25 = asobject(x24)
    x26 = shift(x25, THREE_BY_THREE)
    x27 = paint(x11, x26)
    x28 = astuple(SEVEN, SEVEN)
    x29 = crop(x11, ORIGIN, x28)
    x30 = asobject(x29)
    O = paint(x27, x30)
    return O


def solve_93c31fbe(I):
    x1 = palette(I)
    x2 = remove(ZERO, x1)
    x3 = other(x2, ONE)
    x4 = objects(I, T, F, T)
    x5 = colorfilter(x4, x3)
    x6 = apply(toindices, x5)
    x7 = lbind(apply, first)
    x8 = lbind(apply, last)
    x9 = lbind(matcher, x7)
    x10 = lbind(matcher, x8)
    x11 = compose(x9, x7)
    x12 = compose(x10, x8)
    x13 = lbind(fork, either)
    x14 = fork(x13, x11, x12)
    x15 = lbind(mfilter, x6)
    x16 = chain(backdrop, x15, x14)
    x17 = apply(x16, x6)
    x18 = rbind(subgrid, I)
    x19 = compose(merge, fgpartition)
    x20 = rbind(branch, vmirror)
    x21 = rbind(x20, hmirror)
    x22 = compose(x21, portrait)
    x23 = compose(x19, x18)
    x24 = compose(initset, x22)
    x25 = fork(rapply, x24, x18)
    x26 = chain(x19, first, x25)
    x27 = fork(combine, x23, x26)
    x28 = fork(shift, x27, ulcorner)
    x29 = mapply(x28, x17)
    x30 = replace(I, ONE, ZERO)
    O = paint(x30, x29)
    return O


def solve_0607ce86(I):
    x1 = width(I)
    x2 = height(I)
    x3 = repeat(ZERO, x1)
    x4 = repeat(ZERO, x2)
    x5 = rbind(branch, x3)
    x6 = rbind(branch, x4)
    x7 = lbind(equality, ZERO)
    x8 = compose(flip, x7)
    x9 = rbind(sfilter, x8)
    x10 = rbind(greater, TEN)
    x11 = chain(x10, size, x9)
    x12 = fork(x5, x11, identity)
    x13 = fork(x6, x11, identity)
    x14 = apply(x12, I)
    x15 = dmirror(x14)
    x16 = apply(x13, x15)
    x17 = dmirror(x16)
    x18 = objects(x17, F, F, T)
    x19 = totuple(x18)
    x20 = rbind(subgrid, x17)
    x21 = apply(x20, x19)
    x22 = mapply(asindices, x21)
    x23 = rbind(apply, x21)
    x24 = lbind(rbind, index)
    x25 = chain(mostcommon, x23, x24)
    x26 = fork(astuple, x25, identity)
    x27 = apply(x26, x22)
    x28 = lbind(shift, x27)
    x29 = apply(ulcorner, x19)
    x30 = mapply(x28, x29)
    O = paint(x17, x30)
    return O


def solve_4c5c2cf0(I):
    x1 = objects(I, T, T, T)
    x2 = objects(I, F, T, T)
    x3 = first(x2)
    x4 = rbind(subgrid, I)
    x5 = fork(equality, identity, rot90)
    x6 = compose(x5, x4)
    x7 = extract(x1, x6)
    x8 = center(x7)
    x9 = subgrid(x3, I)
    x10 = hmirror(x9)
    x11 = objects(x10, F, T, T)
    x12 = first(x11)
    x13 = objects(x10, T, T, T)
    x14 = extract(x13, x6)
    x15 = center(x14)
    x16 = subtract(x8, x15)
    x17 = shift(x12, x16)
    x18 = paint(I, x17)
    x19 = objects(x18, F, T, T)
    x20 = first(x19)
    x21 = subgrid(x20, x18)
    x22 = vmirror(x21)
    x23 = objects(x22, F, T, T)
    x24 = first(x23)
    x25 = objects(x22, T, T, T)
    x26 = color(x7)
    x27 = matcher(color, x26)
    x28 = extract(x25, x27)
    x29 = center(x28)
    x30 = subtract(x8, x29)
    x31 = shift(x24, x30)
    O = paint(x18, x31)
    return O


def solve_508bd3b6(I):
    x1 = width(I)
    x2 = objects(I, T, T, T)
    x3 = argmin(x2, size)
    x4 = argmax(x2, size)
    x5 = ulcorner(x3)
    x6 = urcorner(x3)
    x7 = index(I, x5)
    x8 = equality(x7, EIGHT)
    x9 = branch(x8, x5, x6)
    x10 = branch(x8, UNITY, DOWN_LEFT)
    x11 = multiply(x10, x1)
    x12 = double(x11)
    x13 = add(x9, x12)
    x14 = subtract(x9, x12)
    x15 = connect(x13, x14)
    x16 = fill(I, THREE, x15)
    x17 = paint(x16, x4)
    x18 = objects(x17, T, F, T)
    x19 = rbind(adjacent, x4)
    x20 = extract(x18, x19)
    x21 = first(x20)
    x22 = last(x21)
    x23 = flip(x8)
    x24 = branch(x23, UNITY, DOWN_LEFT)
    x25 = multiply(x24, x1)
    x26 = double(x25)
    x27 = add(x22, x26)
    x28 = subtract(x22, x26)
    x29 = connect(x27, x28)
    x30 = fill(x17, THREE, x29)
    x31 = paint(x30, x3)
    O = paint(x31, x4)
    return O


def solve_6d0160f0(I):
    x1 = ofcolor(I, FOUR)
    x2 = first(x1)
    x3 = first(x2)
    x4 = last(x2)
    x5 = greater(x3, THREE)
    x6 = greater(x3, SEVEN)
    x7 = greater(x4, THREE)
    x8 = greater(x4, SEVEN)
    x9 = branch(x5, FOUR, ZERO)
    x10 = branch(x6, EIGHT, x9)
    x11 = branch(x7, FOUR, ZERO)
    x12 = branch(x8, EIGHT, x11)
    x13 = astuple(x10, x12)
    x14 = initset(ZERO)
    x15 = insert(FOUR, x14)
    x16 = insert(EIGHT, x15)
    x17 = product(x16, x16)
    x18 = crop(I, ORIGIN, THREE_BY_THREE)
    x19 = asindices(x18)
    x20 = recolor(ZERO, x19)
    x21 = lbind(shift, x20)
    x22 = mapply(x21, x17)
    x23 = paint(I, x22)
    x24 = crop(I, x13, THREE_BY_THREE)
    x25 = replace(x24, FIVE, ZERO)
    x26 = ofcolor(x25, FOUR)
    x27 = first(x26)
    x28 = asindices(x25)
    x29 = toobject(x28, x25)
    x30 = multiply(x27, FOUR)
    x31 = shift(x29, x30)
    O = paint(x23, x31)
    return O


def solve_d07ae81c(I):
    x1 = objects(I, T, F, F)
    x2 = sizefilter(x1, ONE)
    x3 = apply(color, x2)
    x4 = difference(x1, x2)
    x5 = apply(color, x4)
    x6 = first(x5)
    x7 = last(x5)
    x8 = ofcolor(I, x6)
    x9 = ofcolor(I, x7)
    x10 = rbind(shoot, UNITY)
    x11 = rbind(shoot, NEG_UNITY)
    x12 = rbind(shoot, DOWN_LEFT)
    x13 = rbind(shoot, UP_RIGHT)
    x14 = fork(combine, x10, x11)
    x15 = fork(combine, x12, x13)
    x16 = fork(combine, x14, x15)
    x17 = compose(x16, center)
    x18 = mapply(x17, x2)
    x19 = intersection(x8, x18)
    x20 = intersection(x9, x18)
    x21 = first(x2)
    x22 = color(x21)
    x23 = center(x21)
    x24 = neighbors(x23)
    x25 = toobject(x24, I)
    x26 = mostcolor(x25)
    x27 = other(x3, x22)
    x28 = equality(x26, x6)
    x29 = branch(x28, x22, x27)
    x30 = branch(x28, x27, x22)
    x31 = fill(I, x29, x19)
    O = fill(x31, x30, x20)
    return O


def solve_f8a8fe49(I):
    x1 = objects(I, T, F, T)
    x2 = replace(I, FIVE, ZERO)
    x3 = colorfilter(x1, TWO)
    x4 = first(x3)
    x5 = portrait(x4)
    x6 = branch(x5, hsplit, vsplit)
    x7 = branch(x5, vmirror, hmirror)
    x8 = ofcolor(I, TWO)
    x9 = subgrid(x8, I)
    x10 = trim(x9)
    x11 = x7(x10)
    x12 = x6(x11, TWO)
    x13 = compose(normalize, asobject)
    x14 = apply(x13, x12)
    x15 = last(x14)
    x16 = first(x14)
    x17 = ulcorner(x8)
    x18 = increment(x17)
    x19 = shift(x15, x18)
    x20 = shift(x16, x18)
    x21 = branch(x5, width, height)
    x22 = branch(x5, tojvec, toivec)
    x23 = x21(x15)
    x24 = double(x23)
    x25 = compose(x22, increment)
    x26 = x25(x23)
    x27 = invert(x26)
    x28 = x25(x24)
    x29 = shift(x19, x27)
    x30 = shift(x20, x28)
    x31 = paint(x2, x29)
    O = paint(x31, x30)
    return O


def solve_e760a62e(I):
    x1 = fork(recolor, color, outbox)
    x2 = ofcolor(I, ZERO)
    x3 = rbind(contained, x2)
    x4 = compose(x3, last)
    x5 = rbind(objects, T)
    x6 = rbind(x5, T)
    x7 = rbind(x6, T)
    x8 = rbind(colorfilter, TWO)
    x9 = rbind(colorfilter, THREE)
    x10 = compose(x8, x7)
    x11 = compose(x9, x7)
    x12 = fork(combine, x10, x11)
    x13 = lbind(mapply, x1)
    x14 = compose(x13, x12)
    x15 = rbind(sfilter, x4)
    x16 = compose(x15, x14)
    x17 = fork(paint, identity, x16)
    x18 = power(x17, TWO)
    x19 = x18(I)
    x20 = ofcolor(x19, TWO)
    x21 = ofcolor(x19, THREE)
    x22 = fork(either, vline, hline)
    x23 = prapply(connect, x20, x20)
    x24 = prapply(connect, x21, x21)
    x25 = mfilter(x23, x22)
    x26 = mfilter(x24, x22)
    x27 = intersection(x25, x2)
    x28 = intersection(x26, x2)
    x29 = intersection(x27, x28)
    x30 = fill(x19, THREE, x28)
    x31 = fill(x30, TWO, x27)
    O = fill(x31, SIX, x29)
    return O


def solve_a096bf4d(I):
    x1 = partition(I)
    x2 = lbind(greater, EIGHT)
    x3 = compose(x2, size)
    x4 = sfilter(x1, x3)
    x5 = rbind(interval, FIVE)
    x6 = lbind(rbind, astuple)
    x7 = lbind(lbind, astuple)
    x8 = compose(increment, lowermost)
    x9 = compose(increment, rightmost)
    x10 = fork(x5, uppermost, x8)
    x11 = fork(x5, leftmost, x9)
    x12 = compose(x6, leftmost)
    x13 = compose(x7, uppermost)
    x14 = fork(apply, x12, x10)
    x15 = fork(apply, x13, x11)
    x16 = fork(product, identity, identity)
    x17 = compose(initset, last)
    x18 = fork(insert, first, x17)
    x19 = lbind(apply, x18)
    x20 = compose(x19, x16)
    x21 = matcher(width, ONE)
    x22 = matcher(height, ONE)
    x23 = lbind(mapply, x14)
    x24 = lbind(mapply, x15)
    x25 = rbind(sfilter, x21)
    x26 = rbind(sfilter, x22)
    x27 = chain(x23, x25, x20)
    x28 = chain(x24, x26, x20)
    x29 = fork(combine, x27, x28)
    x30 = fork(recolor, color, x29)
    x31 = mapply(x30, x4)
    O = paint(I, x31)
    return O


def solve_1c56ad9f(I):
    x1 = rot180(I)
    x2 = leastcolor(I)
    x3 = ofcolor(x1, x2)
    x4 = cover(x1, x3)
    x5 = uppermost(x3)
    x6 = rbind(subtract, x5)
    x7 = apply(first, x3)
    x8 = order(x7, identity)
    x9 = lbind(sfilter, x3)
    x10 = lbind(matcher, first)
    x11 = compose(x9, x10)
    x12 = compose(double, halve)
    x13 = fork(equality, x12, identity)
    x14 = rbind(divide, FOUR)
    x15 = rbind(multiply, FOUR)
    x16 = chain(x15, x14, x6)
    x17 = fork(subtract, x6, x16)
    x18 = matcher(x17, ONE)
    x19 = matcher(x17, THREE)
    x20 = compose(x13, x6)
    x21 = sfilter(x8, x20)
    x22 = mapply(x11, x21)
    x23 = fill(x4, x2, x22)
    x24 = sfilter(x8, x18)
    x25 = mapply(x11, x24)
    x26 = shift(x25, RIGHT)
    x27 = fill(x23, x2, x26)
    x28 = sfilter(x8, x19)
    x29 = mapply(x11, x28)
    x30 = shift(x29, LEFT)
    x31 = fill(x27, x2, x30)
    O = rot180(x31)
    return O


def solve_85fa5666(I):
    x1 = objects(I, T, T, F)
    x2 = colorfilter(x1, TWO)
    x3 = rbind(subgrid, I)
    x4 = compose(decrement, ulcorner)
    x5 = chain(rot90, x3, outbox)
    x6 = compose(asobject, x5)
    x7 = fork(shift, x6, x4)
    x8 = apply(x7, x2)
    x9 = merge(x8)
    x10 = paint(I, x9)
    x11 = lbind(index, x10)
    x12 = rbind(shoot, NEG_UNITY)
    x13 = rbind(shoot, UNITY)
    x14 = rbind(shoot, DOWN_LEFT)
    x15 = rbind(shoot, UP_RIGHT)
    x16 = compose(x11, ulcorner)
    x17 = compose(x11, lrcorner)
    x18 = compose(x11, llcorner)
    x19 = compose(x11, urcorner)
    x20 = compose(x12, ulcorner)
    x21 = compose(x13, lrcorner)
    x22 = compose(x14, llcorner)
    x23 = compose(x15, urcorner)
    x24 = fork(recolor, x16, x20)
    x25 = fork(recolor, x17, x21)
    x26 = fork(recolor, x18, x22)
    x27 = fork(recolor, x19, x23)
    x28 = fork(combine, x24, x25)
    x29 = fork(combine, x26, x27)
    x30 = fork(combine, x28, x29)
    x31 = mapply(x30, x8)
    O = underpaint(x10, x31)
    return O


def solve_20818e16(I):
    x1 = objects(I, T, T, T)
    x2 = fork(multiply, height, width)
    x3 = compose(invert, x2)
    x4 = order(x1, x3)
    x5 = rbind(subgrid, I)
    x6 = compose(asobject, x5)
    x7 = fork(recolor, color, x6)
    x8 = compose(normalize, x7)
    x9 = apply(x8, x4)
    x10 = compose(first, last)
    x11 = fork(paint, first, x10)
    x12 = fork(remove, x10, last)
    x13 = fork(astuple, x11, x12)
    x14 = size(x4)
    x15 = decrement(x14)
    x16 = power(x13, x15)
    x17 = first(x9)
    x18 = fork(canvas, color, shape)
    x19 = x18(x17)
    x20 = remove(x17, x9)
    x21 = astuple(x19, x20)
    x22 = x16(x21)
    x23 = first(x22)
    x24 = color(x17)
    x25 = equality(x24, SIX)
    x26 = lbind(astuple, ONE)
    x27 = compose(x26, width)
    x28 = lbind(canvas, SIX)
    x29 = compose(x28, x27)
    x30 = fork(vconcat, identity, x29)
    x31 = branch(x25, x30, identity)
    O = x31(x23)
    return O


def solve_4b6b68e5(I):
    x1 = objects(I, T, T, F)
    x2 = matcher(size, ONE)
    x3 = sfilter(x1, x2)
    x4 = difference(x1, x3)
    x5 = colorfilter(x4, ZERO)
    x6 = difference(x4, x5)
    x7 = argmax(x5, size)
    x8 = remove(x7, x5)
    x9 = merge(x8)
    x10 = lbind(adjacent, x9)
    x11 = sfilter(x6, x10)
    x12 = merge(x3)
    x13 = cover(I, x12)
    x14 = objects(x13, T, T, F)
    x15 = colorfilter(x14, ZERO)
    x16 = argmax(x15, size)
    x17 = remove(x16, x15)
    x18 = rbind(subgrid, I)
    x19 = rbind(replace, ZERO)
    x20 = fork(x19, x18, color)
    x21 = rbind(objects, T)
    x22 = rbind(x21, T)
    x23 = rbind(x22, T)
    x24 = chain(totuple, x23, x20)
    x25 = lbind(apply, color)
    x26 = chain(mostcommon, x25, x24)
    x27 = lbind(lbind, adjacent)
    x28 = lbind(extract, x17)
    x29 = compose(x28, x27)
    x30 = fork(recolor, x26, x29)
    x31 = mapply(x30, x11)
    O = paint(x13, x31)
    return O


def solve_6a1e5592(I):
    x1 = width(I)
    x2 = objects(I, T, F, T)
    x3 = astuple(FIVE, x1)
    x4 = crop(I, ORIGIN, x3)
    x5 = colorfilter(x2, FIVE)
    x6 = merge(x5)
    x7 = cover(I, x6)
    x8 = compose(toindices, normalize)
    x9 = apply(x8, x5)
    x10 = asindices(x4)
    x11 = ofcolor(x4, ZERO)
    x12 = ofcolor(x4, TWO)
    x13 = rbind(multiply, TEN)
    x14 = rbind(multiply, EIGHT)
    x15 = rbind(intersection, x12)
    x16 = rbind(intersection, x11)
    x17 = rbind(intersection, x10)
    x18 = chain(x13, size, x15)
    x19 = chain(size, x16, delta)
    x20 = compose(x14, uppermost)
    x21 = chain(size, x16, outbox)
    x22 = chain(x13, size, x17)
    x23 = compose(invert, x18)
    x24 = fork(add, x22, x23)
    x25 = fork(subtract, x24, x21)
    x26 = fork(subtract, x25, x20)
    x27 = fork(subtract, x26, x19)
    x28 = rbind(apply, x10)
    x29 = lbind(lbind, shift)
    x30 = rbind(argmax, x27)
    x31 = chain(x30, x28, x29)
    x32 = mapply(x31, x9)
    O = fill(x7, ONE, x32)
    return O


def solve_94be5b80(I):
    x1 = objects(I, F, T, T)
    x2 = fork(multiply, height, width)
    x3 = fork(equality, size, x2)
    x4 = extract(x1, x3)
    x5 = other(x1, x4)
    x6 = dmirror(x4)
    x7 = fork(divide, height, numcolors)
    x8 = x7(x5)
    x9 = upscale(x6, x8)
    x10 = palette(x5)
    x11 = rbind(contained, x10)
    x12 = compose(x11, first)
    x13 = sfilter(x9, x12)
    x14 = ulcorner(x9)
    x15 = ulcorner(x13)
    x16 = subtract(x14, x15)
    x17 = ulcorner(x5)
    x18 = add(x17, x16)
    x19 = normalize(x9)
    x20 = shift(x19, x18)
    x21 = toindices(x5)
    x22 = lbind(shift, x21)
    x23 = interval(NEG_TWO, THREE, ONE)
    x24 = apply(toivec, x23)
    x25 = height(x5)
    x26 = lbind(multiply, x25)
    x27 = apply(x26, x24)
    x28 = mapply(x22, x27)
    x29 = rbind(contained, x28)
    x30 = compose(x29, last)
    x31 = sfilter(x20, x30)
    x32 = cover(I, x4)
    O = paint(x32, x31)
    return O


def solve_67c52801(I):
    x1 = objects(I, T, T, T)
    x2 = argmax(x1, size)
    x3 = toindices(x2)
    x4 = remove(x2, x1)
    x5 = merge(x4)
    x6 = ofcolor(I, ZERO)
    x7 = lbind(rbind, shift)
    x8 = apply(x7, x6)
    x9 = initset(identity)
    x10 = insert(dmirror, x9)
    x11 = prapply(compose, x8, x10)
    x12 = cover(I, x5)
    x13 = apply(normalize, x4)
    x14 = rbind(add, LEFT)
    x15 = rbind(contained, x3)
    x16 = chain(x15, x14, llcorner)
    x17 = rbind(add, RIGHT)
    x18 = chain(x15, x17, lrcorner)
    x19 = fork(both, x16, x18)
    x20 = rbind(intersection, x6)
    x21 = chain(size, x20, toindices)
    x22 = fork(equality, x21, size)
    x23 = uppermost(x2)
    x24 = compose(halve, height)
    x25 = fork(add, uppermost, x24)
    x26 = matcher(x25, x23)
    x27 = fork(both, x22, x26)
    x28 = fork(both, x19, x27)
    x29 = lbind(rapply, x11)
    x30 = rbind(sfilter, x28)
    x31 = chain(first, x30, x29)
    x32 = mapply(x31, x13)
    O = paint(x12, x32)
    return O


def solve_7d419a02(I):
    x1 = frontiers(I)
    x2 = sfilter(x1, hline)
    x3 = sfilter(x1, vline)
    x4 = size(x2)
    x5 = size(x3)
    x6 = greater(x4, x5)
    x7 = branch(x6, dmirror, identity)
    x8 = x7(I)
    x9 = ofcolor(x8, ZERO)
    x10 = ofcolor(x8, SIX)
    x11 = interval(ONE, TEN, ONE)
    x12 = astuple(NEG_TWO, THREE)
    x13 = lbind(multiply, x12)
    x14 = apply(x13, x11)
    x15 = lbind(shift, x10)
    x16 = rbind(apply, x14)
    x17 = lbind(lbind, multiply)
    x18 = lbind(mapply, x15)
    x19 = chain(x18, x16, x17)
    x20 = x19(UNITY)
    x21 = x19(DOWN_LEFT)
    x22 = x19(UP_RIGHT)
    x23 = x19(NEG_UNITY)
    x24 = combine(x20, x21)
    x25 = combine(x22, x23)
    x26 = rbind(shoot, UP)
    x27 = rbind(shoot, DOWN)
    x28 = mapply(x26, x24)
    x29 = mapply(x27, x25)
    x30 = combine(x28, x29)
    x31 = difference(x30, x9)
    x32 = fill(x8, FOUR, x31)
    O = x7(x32)
    return O


def solve_ea959feb(I):
    x1 = canvas(ONE, TWO_BY_TWO)
    x2 = astuple(TEN, TEN)
    x3 = asobject(x1)
    x4 = lbind(shift, x3)
    x5 = occurrences(I, x3)
    x6 = mapply(x4, x5)
    x7 = fill(I, ZERO, x6)
    x8 = rbind(crop, x2)
    x9 = lbind(x8, x7)
    x10 = lbind(contained, ZERO)
    x11 = chain(x10, palette, x9)
    x12 = compose(flip, x11)
    x13 = compose(shape, x9)
    x14 = matcher(x13, x2)
    x15 = fork(both, x12, x14)
    x16 = asindices(I)
    x17 = sfilter(x16, x15)
    x18 = first(x17)
    x19 = x9(x18)
    x20 = asobject(x19)
    x21 = shift(x20, x18)
    x22 = vperiod(x21)
    x23 = hperiod(x21)
    x24 = astuple(x22, x23)
    x25 = lbind(multiply, x24)
    x26 = neighbors(ORIGIN)
    x27 = lbind(mapply, neighbors)
    x28 = power(x27, THREE)
    x29 = x28(x26)
    x30 = apply(x25, x29)
    x31 = lbind(shift, x21)
    x32 = mapply(x31, x30)
    O = paint(x7, x32)
    return O


def solve_477d2879(I):
    x1 = objects(I, T, T, T)
    x2 = colorfilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = lbind(apply, initset)
    x5 = lbind(multiply, TEN)
    x6 = rbind(toobject, I)
    x7 = matcher(first, ZERO)
    x8 = rbind(sfilter, x7)
    x9 = lbind(rbind, adjacent)
    x10 = rbind(chain, x9)
    x11 = compose(x5, size)
    x12 = lbind(lbind, sfilter)
    x13 = lbind(x10, x11)
    x14 = chain(x13, x12, x4)
    x15 = compose(size, x8)
    x16 = chain(x6, neighbors, center)
    x17 = compose(x15, x16)
    x18 = lbind(argmax, x3)
    x19 = lbind(fork, subtract)
    x20 = rbind(x19, x17)
    x21 = chain(x18, x20, x14)
    x22 = compose(color, x21)
    x23 = fork(recolor, x22, identity)
    x24 = mapply(x23, x2)
    x25 = paint(I, x24)
    x26 = objects(x25, T, T, F)
    x27 = sizefilter(x26, ONE)
    x28 = colorfilter(x26, ZERO)
    x29 = lbind(argmin, x27)
    x30 = lbind(rbind, manhattan)
    x31 = chain(color, x29, x30)
    x32 = fork(recolor, x31, identity)
    x33 = mapply(x32, x28)
    O = paint(x25, x33)
    return O


def solve_fd096ab6(I):
    x1 = ofcolor(I, FOUR)
    x2 = fgpartition(I)
    x3 = merge(x2)
    x4 = apply(initset, x3)
    x5 = lbind(mfilter, x4)
    x6 = lbind(greater, TEN)
    x7 = lbind(matcher, color)
    x8 = compose(x7, color)
    x9 = lbind(compose, x6)
    x10 = lbind(lbind, manhattan)
    x11 = compose(x9, x10)
    x12 = lbind(fork, both)
    x13 = fork(x12, x8, x11)
    x14 = compose(x5, x13)
    x15 = rbind(apply, x4)
    x16 = x15(x14)
    x17 = colorfilter(x16, FOUR)
    x18 = difference(x16, x17)
    x19 = neighbors(ORIGIN)
    x20 = mapply(neighbors, x19)
    x21 = lbind(argmax, x20)
    x22 = compose(normalize, toindices)
    x23 = normalize(x1)
    x24 = lbind(shift, x23)
    x25 = lbind(lbind, intersection)
    x26 = rbind(compose, x24)
    x27 = chain(x26, x25, x22)
    x28 = lbind(compose, size)
    x29 = chain(x21, x28, x27)
    x30 = fork(add, ulcorner, x29)
    x31 = compose(x24, x30)
    x32 = fork(recolor, color, x31)
    x33 = mapply(x32, x18)
    O = paint(I, x33)
    return O


def solve_1acc24af(I):
    x1 = ofcolor(I, ONE)
    x2 = lowermost(x1)
    x3 = increment(x2)
    x4 = width(I)
    x5 = decrement(x4)
    x6 = astuple(x3, x5)
    x7 = crop(I, ORIGIN, x6)
    x8 = objects(x7, T, F, F)
    x9 = argmin(x8, uppermost)
    x10 = fill(x7, ONE, x9)
    x11 = objects(x10, T, T, T)
    x12 = apply(normalize, x11)
    x13 = apply(toindices, x12)
    x14 = objects(I, T, T, T)
    x15 = rbind(contained, x13)
    x16 = rbind(subgrid, I)
    x17 = rbind(ofcolor, FIVE)
    x18 = chain(x15, normalize, x17)
    x19 = astuple(TWO, THREE)
    x20 = rbind(crop, x19)
    x21 = rbind(x20, ORIGIN)
    x22 = compose(x18, x21)
    x23 = lbind(chain, x22)
    x24 = rbind(x23, x16)
    x25 = lbind(contained, T)
    x26 = initset(identity)
    x27 = insert(rot90, x26)
    x28 = insert(rot180, x27)
    x29 = insert(rot270, x28)
    x30 = apply(x24, x29)
    x31 = lbind(rapply, x30)
    x32 = compose(x25, x31)
    x33 = mfilter(x14, x32)
    O = fill(I, TWO, x33)
    return O


def solve_256b0a75(I):
    x1 = ofcolor(I, EIGHT)
    x2 = box(x1)
    x3 = backdrop(x2)
    x4 = fork(combine, hfrontier, vfrontier)
    x5 = mapply(x4, x3)
    x6 = toobject(x3, I)
    x7 = leastcolor(x6)
    x8 = underfill(I, x7, x5)
    x9 = fill(x8, EIGHT, x2)
    x10 = objects(I, T, F, T)
    x11 = sizefilter(x10, ONE)
    x12 = rbind(contained, x5)
    x13 = compose(x12, center)
    x14 = sfilter(x11, x13)
    x15 = rbind(vmatching, x3)
    x16 = rbind(hmatching, x3)
    x17 = rbind(branch, ZERO)
    x18 = uppermost(x3)
    x19 = leftmost(x3)
    x20 = lbind(greater, x18)
    x21 = lbind(greater, x19)
    x22 = compose(x20, uppermost)
    x23 = compose(x21, leftmost)
    x24 = rbind(branch, ONE)
    x25 = rbind(x24, NEG_ONE)
    x26 = compose(x25, x22)
    x27 = compose(x25, x23)
    x28 = fork(x17, x15, x26)
    x29 = fork(x17, x16, x27)
    x30 = fork(astuple, x28, x29)
    x31 = fork(shoot, center, x30)
    x32 = fork(recolor, color, x31)
    x33 = mapply(x32, x14)
    O =  underpaint(x9, x33)
    return O


def solve_d22278a0(I):
    x1 = asindices(I)
    x2 = objects(I, T, F, T)
    x3 = fork(multiply, sign, identity)
    x4 = lbind(apply, x3)
    x5 = chain(even, maximum, x4)
    x6 = lbind(sfilter, x1)
    x7 = fork(add, first, last)
    x8 = rbind(remove, x2)
    x9 = compose(center, last)
    x10 = fork(subtract, first, x9)
    x11 = compose(x5, x10)
    x12 = lbind(rbind, equality)
    x13 = lbind(argmin, x2)
    x14 = chain(x7, x4, x10)
    x15 = lbind(lbind, astuple)
    x16 = lbind(rbind, astuple)
    x17 = lbind(compose, x11)
    x18 = lbind(compose, x14)
    x19 = compose(x18, x15)
    x20 = compose(x18, x16)
    x21 = compose(x13, x19)
    x22 = rbind(compose, x21)
    x23 = lbind(lbind, valmin)
    x24 = rbind(compose, x19)
    x25 = chain(x24, x23, x8)
    x26 = lbind(fork, greater)
    x27 = fork(x26, x25, x20)
    x28 = chain(x6, x17, x16)
    x29 = chain(x6, x22, x12)
    x30 = fork(intersection, x28, x29)
    x31 = compose(x6, x27)
    x32 = fork(intersection, x30, x31)
    x33 = fork(recolor, color, x32)
    x34 = mapply(x33, x2)
    O = paint(I, x34)
    return O


def solve_0e206a2e(I):
    x1 = palette(I)
    x2 = objects(I, F, F, T)
    x3 = rbind(greater, ONE)
    x4 = compose(x3, numcolors)
    x5 = sfilter(x2, x4)
    x6 = remove(ZERO, x1)
    x7 = lbind(colorcount, I)
    x8 = argmax(x6, x7)
    x9 = remove(x8, x6)
    x10 = rbind(contained, x9)
    x11 = compose(x10, first)
    x12 = rbind(sfilter, x11)
    x13 = lbind(rbind, subtract)
    x14 = lbind(occurrences, I)
    x15 = lbind(lbind, shift)
    x16 = compose(x13, ulcorner)
    x17 = chain(x16, x12, normalize)
    x18 = chain(x14, x12, normalize)
    x19 = fork(apply, x17, x18)
    x20 = compose(x15, normalize)
    x21 = fork(mapply, x20, x19)
    x22 = astuple(cmirror, dmirror)
    x23 = astuple(hmirror, vmirror)
    x24 = combine(x22, x23)
    x25 = product(x24, x24)
    x26 = fork(compose, first, last)
    x27 = apply(x26, x25)
    x28 = totuple(x27)
    x29 = combine(x24, x28)
    x30 = lbind(rapply, x29)
    x31 = mapply(x30, x5)
    x32 = mapply(x21, x31)
    x33 = paint(I, x32)
    x34 = merge(x5)
    O = cover(x33, x34)
    return O


def solve_456873bc(I):
    x1 = ofcolor(I, THREE)
    x2 = shape(x1)
    x3 = minimum(x2)
    x4 = astuple(x3, x3)
    x5 = canvas(ZERO, x4)
    x6 = interval(ZERO, x3, ONE)
    x7 = asindices(x5)
    x8 = product(x6, x6)
    x9 = increment(x3)
    x10 = lbind(multiply, x9)
    x11 = apply(x10, x8)
    x12 = lbind(contained, TWO)
    x13 = lbind(shift, x7)
    x14 = rbind(toobject, I)
    x15 = chain(x12, palette, x14)
    x16 = compose(x15, x13)
    x17 = sfilter(x11, x16)
    x18 = rbind(divide, x3)
    x19 = fork(add, identity, x18)
    x20 = apply(x19, x17)
    x21 = fill(I, EIGHT, x20)
    x22 = replace(x21, THREE, ZERO)
    x23 = first(x17)
    x24 = shift(x7, x23)
    x25 = subgrid(x24, I)
    x26 = ofcolor(x25, TWO)
    x27 = apply(x18, x17)
    x28 = difference(x26, x27)
    x29 = first(x28)
    x30 = x10(x29)
    x31 = shift(x26, x30)
    x32 = fill(x22, TWO, x31)
    x33 = add(x30, x29)
    x34 = initset(x33)
    O = fill(x32, EIGHT, x34)
    return O


def solve_f9a67cb5(I):
    x1 = astuple(identity, vmirror)
    x2 = astuple(dmirror, cmirror)
    x3 = combine(x1, x2)
    x4 = rbind(ofcolor, TWO)
    x5 = chain(uppermost, x4, first)
    x6 = rbind(rapply, I)
    x7 = chain(x5, x6, initset)
    x8 = argmin(x3, x7)
    x9 = x8(I)
    x10 = astuple(TWO, ORIGIN)
    x11 = astuple(ZERO, DOWN)
    x12 = astuple(EIGHT, DOWN)
    x13 = astuple(TWO, RIGHT)
    x14 = astuple(TWO, LEFT)
    x15 = initset(x10)
    x16 = insert(x11, x15)
    x17 = recolor(TWO, x16)
    x18 = insert(x12, x15)
    x19 = insert(x14, x18)
    x20 = insert(x13, x19)
    x21 = lbind(shift, x17)
    x22 = lbind(shift, x20)
    x23 = rbind(occurrences, x16)
    x24 = rbind(occurrences, x18)
    x25 = lbind(mapply, x21)
    x26 = lbind(mapply, x22)
    x27 = compose(x25, x23)
    x28 = compose(x26, x24)
    x29 = fork(paint, identity, x27)
    x30 = fork(paint, identity, x28)
    x31 = compose(x30, x29)
    x32 = double(TEN)
    x33 = power(x31, x32)
    x34 = x33(x9)
    O = x8(x34)
    return O


def solve_c87289bb(I):
    x1 = astuple(EIGHT, ORIGIN)
    x2 = astuple(ZERO, DOWN)
    x3 = astuple(EIGHT, RIGHT)
    x4 = astuple(TWO, UNITY)
    x5 = astuple(TWO, DOWN)
    x6 = initset(x1)
    x7 = insert(x2, x6)
    x8 = initset(x3)
    x9 = insert(x4, x8)
    x10 = astuple(EIGHT, ZERO_BY_TWO)
    x11 = recolor(EIGHT, x7)
    x12 = insert(x2, x9)
    x13 = insert(x5, x9)
    x14 = initset(x10)
    x15 = lbind(fork, paint)
    x16 = lbind(x15, identity)
    x17 = lbind(lbind, shift)
    x18 = x17(x11)
    x19 = x17(x6)
    x20 = x17(x14)
    x21 = lbind(lbind, mapply)
    x22 = lbind(rbind, occurrences)
    x23 = compose(x21, first)
    x24 = compose(x22, last)
    x25 = fork(compose, x23, x24)
    x26 = compose(x16, x25)
    x27 = astuple(x18, x7)
    x28 = astuple(x19, x12)
    x29 = astuple(x20, x13)
    x30 = x26(x27)
    x31 = x26(x28)
    x32 = x26(x29)
    x33 = chain(x30, x31, x32)
    x34 = power(x33, TEN)
    O = x34(I)
    return O


def solve_0bb8deee(I):
    x1 = frontiers(I)
    x2 = first(x1)
    x3 = last(x1)
    x4 = intersection(x2, x3)
    x5 = center(x4)
    x6 = first(x5)
    x7 = last(x5)
    x8 = increment(x6)
    x9 = increment(x7)
    x10 = tojvec(x9)
    x11 = width(I)
    x12 = decrement(x11)
    x13 = astuple(x6, x12)
    x14 = toivec(x8)
    x15 = height(I)
    x16 = decrement(x15)
    x17 = astuple(x16, x7)
    x18 = astuple(x16, x12)
    x19 = astuple(x8, x9)
    x20 = rbind(objects, T)
    x21 = rbind(x20, T)
    x22 = rbind(x21, T)
    x23 = compose(first, x22)
    x24 = fork(subgrid, x23, identity)
    x25 = crop(I, ORIGIN, x5)
    x26 = crop(I, x10, x13)
    x27 = crop(I, x14, x17)
    x28 = crop(I, x19, x18)
    x29 = x24(x25)
    x30 = x24(x26)
    x31 = hconcat(x29, x30)
    x32 = x24(x27)
    x33 = x24(x28)
    x34 = hconcat(x32, x33)
    O = vconcat(x31, x34)
    return O


def solve_fea12743(I):
    x1 = multiply(THREE, FIVE)
    x2 = interval(ONE, x1, FIVE)
    x3 = interval(ONE, TEN, FIVE)
    x4 = astuple(FOUR, FOUR)
    x5 = canvas(ZERO, x4)
    x6 = product(x2, x3)
    x7 = asindices(x5)
    x8 = lbind(shift, x7)
    x9 = apply(x8, x6)
    x10 = rbind(toobject, I)
    x11 = matcher(first, TWO)
    x12 = apply(x10, x9)
    x13 = rbind(sfilter, x11)
    x14 = apply(x13, x12)
    x15 = totuple(x14)
    x16 = apply(size, x15)
    x17 = leastcommon(x16)
    x18 = matcher(size, x17)
    x19 = extract(x14, x18)
    x20 = fill(I, THREE, x19)
    x21 = compose(toindices, normalize)
    x22 = x21(x19)
    x23 = rbind(difference, x22)
    x24 = compose(size, x23)
    x25 = matcher(x24, ZERO)
    x26 = lbind(rbind, shift)
    x27 = neighbors(ORIGIN)
    x28 = insert(ORIGIN, x27)
    x29 = apply(x26, x28)
    x30 = lbind(rapply, x29)
    x31 = rbind(sfilter, x25)
    x32 = chain(positive, size, x31)
    x33 = chain(x32, x30, x21)
    x34 = remove(x19, x14)
    x35 = mfilter(x34, x33)
    O = fill(x20, EIGHT, x35)
    return O


def solve_4290ef0e(I):
    x1 = mostcolor(I)
    x2 = fgpartition(I)
    x3 = objects(I, T, F, T)
    x4 = rbind(valmax, width)
    x5 = lbind(colorfilter, x3)
    x6 = chain(x4, x5, color)
    x7 = compose(maximum, shape)
    x8 = fork(add, x7, x6)
    x9 = compose(invert, x8)
    x10 = order(x2, x9)
    x11 = rbind(argmin, centerofmass)
    x12 = compose(initset, vmirror)
    x13 = fork(insert, dmirror, x12)
    x14 = fork(insert, cmirror, x13)
    x15 = fork(insert, hmirror, x14)
    x16 = compose(x11, x15)
    x17 = apply(x16, x10)
    x18 = size(x2)
    x19 = apply(size, x2)
    x20 = contained(ONE, x19)
    x21 = increment(x18)
    x22 = branch(x20, x18, x21)
    x23 = double(x22)
    x24 = decrement(x23)
    x25 = apply(normalize, x17)
    x26 = interval(ZERO, x22, ONE)
    x27 = pair(x26, x26)
    x28 = mpapply(shift, x25, x27)
    x29 = astuple(x24, x24)
    x30 = canvas(x1, x29)
    x31 = paint(x30, x28)
    x32 = rot90(x31)
    x33 = paint(x32, x28)
    x34 = rot90(x33)
    x35 = paint(x34, x28)
    x36 = rot90(x35)
    O = paint(x36, x28)
    return O


def solve_4acc7107(I):
    x1 = hmirror(I)
    x2 = objects(x1, T, T, T)
    x3 = argmin(x2, leftmost)
    x4 = color(x3)
    x5 = matcher(color, x4)
    x6 = sfilter(x2, x5)
    x7 = difference(x2, x6)
    x8 = fork(multiply, height, width)
    x9 = fork(add, height, width)
    x10 = fork(add, x8, x9)
    x11 = argmax(x6, x10)
    x12 = merge(x2)
    x13 = cover(x1, x12)
    x14 = normalize(x11)
    x15 = paint(x13, x14)
    x16 = other(x6, x11)
    x17 = normalize(x16)
    x18 = height(x11)
    x19 = increment(x18)
    x20 = toivec(x19)
    x21 = shift(x17, x20)
    x22 = paint(x15, x21)
    x23 = valmax(x6, width)
    x24 = increment(x23)
    x25 = tojvec(x24)
    x26 = argmax(x7, x10)
    x27 = normalize(x26)
    x28 = shift(x27, x25)
    x29 = paint(x22, x28)
    x30 = other(x7, x26)
    x31 = chain(toivec, increment, height)
    x32 = x31(x26)
    x33 = add(x32, x25)
    x34 = normalize(x30)
    x35 = shift(x34, x33)
    x36 = paint(x29, x35)
    O = hmirror(x36)
    return O


def solve_ac2e8ecf(I):
    x1 = objects(I, T, F, T)
    x2 = merge(x1)
    x3 = cover(I, x2)
    x4 = fork(equality, toindices, box)
    x5 = sfilter(x1, x4)
    x6 = difference(x1, x5)
    x7 = merge(x6)
    x8 = paint(x3, x7)
    x9 = hmirror(x8)
    x10 = objects(x9, T, F, T)
    x11 = rbind(argmin, uppermost)
    x12 = compose(x11, first)
    x13 = fork(remove, x12, first)
    x14 = fork(gravitate, x12, last)
    x15 = fork(shift, x12, x14)
    x16 = fork(combine, x15, last)
    x17 = fork(astuple, x13, x16)
    x18 = size(x5)
    x19 = size(x6)
    x20 = power(x17, x18)
    x21 = power(x17, x19)
    x22 = width(I)
    x23 = astuple(ONE, x22)
    x24 = canvas(ZERO, x23)
    x25 = asobject(x24)
    x26 = shift(x25, UP)
    x27 = astuple(x5, x26)
    x28 = astuple(x10, x26)
    x29 = x20(x27)
    x30 = x21(x28)
    x31 = last(x29)
    x32 = last(x30)
    x33 = paint(x3, x32)
    x34 = hmirror(x33)
    x35 = asobject(x34)
    x36 = paint(x3, x31)
    O = underpaint(x36, x35)
    return O


def solve_184a9768(I):
    x1 = objects(I, T, F, F)
    x2 = colorfilter(x1, ZERO)
    x3 = colorfilter(x1, FIVE)
    x4 = combine(x2, x3)
    x5 = difference(x1, x4)
    x6 = fork(multiply, height, width)
    x7 = fork(equality, size, x6)
    x8 = sfilter(x5, x7)
    x9 = difference(x5, x8)
    x10 = argmax(x2, size)
    x11 = mapply(delta, x9)
    x12 = mapply(toindices, x9)
    x13 = lbind(mapply, neighbors)
    x14 = lbind(argmax, x11)
    x15 = lbind(intersection, x11)
    x16 = lbind(compose, toindices)
    x17 = lbind(lbind, shift)
    x18 = chain(x16, x17, normalize)
    x19 = lbind(intersection, x12)
    x20 = lbind(compose, x13)
    x21 = lbind(fork, difference)
    x22 = compose(x20, x18)
    x23 = fork(x21, x22, x18)
    x24 = lbind(chain, size)
    x25 = lbind(x24, x15)
    x26 = lbind(x24, x19)
    x27 = lbind(fork, add)
    x28 = compose(x25, x18)
    x29 = compose(x26, x23)
    x30 = fork(x27, x28, x29)
    x31 = compose(x14, x30)
    x32 = fork(shift, normalize, x31)
    x33 = mapply(x32, x8)
    x34 = combine(x3, x8)
    x35 = merge(x34)
    x36 = cover(I, x35)
    O = paint(x36, x33)
    return O


def solve_dc2aa30b(I):
    x1 = compress(I)
    x2 = vsplit(x1, THREE)
    x3 = rbind(hsplit, THREE)
    x4 = mapply(x3, x2)
    x5 = rbind(colorcount, TWO)
    x6 = order(x4, x5)
    x7 = astuple(NINE, ONE)
    x8 = increment(TEN)
    x9 = astuple(ONE, x8)
    x10 = canvas(ZERO, x7)
    x11 = canvas(ZERO, x9)
    x12 = interval(ZERO, NINE, ONE)
    x13 = interval(ZERO, NINE, THREE)
    x14 = interval(ONE, NINE, THREE)
    x15 = interval(TWO, NINE, THREE)
    x16 = lbind(rbind, contained)
    x17 = rbind(compose, last)
    x18 = pair(x6, x12)
    x19 = lbind(sfilter, x18)
    x20 = lbind(apply, first)
    x21 = chain(merge, x20, x19)
    x22 = chain(x21, x17, x16)
    x23 = x22(x13)
    x24 = x22(x14)
    x25 = x22(x15)
    x26 = hconcat(x10, x23)
    x27 = hconcat(x10, x24)
    x28 = hconcat(x27, x26)
    x29 = hconcat(x25, x28)
    x30 = vsplit(x29, THREE)
    x31 = first(x30)
    x32 = remove(x31, x30)
    x33 = first(x32)
    x34 = vconcat(x33, x11)
    x35 = vconcat(x31, x11)
    x36 = vconcat(x35, x34)
    x37 = last(x30)
    O = vconcat(x36, x37)
    return O


def solve_f3b10344(I):
    x1 = objects(I, T, T, T)
    x2 = merge(x1)
    x3 = palette(x2)
    x4 = fork(equality, first, last)
    x5 = compose(flip, x4)
    x6 = lbind(colorfilter, x1)
    x7 = fork(product, x6, x6)
    x8 = rbind(sfilter, x5)
    x9 = compose(x8, x7)
    x10 = compose(size, first)
    x11 = compose(size, last)
    x12 = fork(add, x10, x11)
    x13 = rbind(toobject, I)
    x14 = chain(x13, backdrop, merge)
    x15 = rbind(fork, x12)
    x16 = lbind(x15, equality)
    x17 = lbind(rbind, colorcount)
    x18 = rbind(compose, x14)
    x19 = chain(x16, x18, x17)
    x20 = fork(sfilter, x9, x19)
    x21 = rbind(valmax, uppermost)
    x22 = rbind(valmin, lowermost)
    x23 = rbind(valmax, leftmost)
    x24 = rbind(valmin, rightmost)
    x25 = fork(astuple, x21, x23)
    x26 = fork(astuple, x22, x24)
    x27 = compose(initset, x26)
    x28 = fork(insert, x25, x27)
    x29 = compose(inbox, x28)
    x30 = compose(backdrop, x29)
    x31 = lbind(greater, FOUR)
    x32 = fork(subtract, height, width)
    x33 = compose(x31, x32)
    x34 = lbind(apply, x30)
    x35 = rbind(mfilter, x33)
    x36 = chain(x35, x34, x20)
    x37 = mapply(x36, x3)
    O = underfill(I, EIGHT, x37)
    return O


def solve_3ed85e70(I):
    x1 = objects(I, T, T, T)
    x2 = argmax(x1, size)
    x3 = subgrid(x2, I)
    x4 = objects(x3, F, T, T)
    x5 = apply(normalize, x4)
    x6 = ofcolor(I, ZERO)
    x7 = subgrid(x6, I)
    x8 = lbind(rbind, contained)
    x9 = rbind(compose, last)
    x10 = chain(x9, x8, box)
    x11 = lbind(compose, flip)
    x12 = compose(x11, x10)
    x13 = fork(sfilter, identity, x12)
    x14 = fork(sfilter, identity, x10)
    x15 = lbind(recolor, ZERO)
    x16 = compose(x15, x14)
    x17 = fork(combine, x13, x16)
    x18 = initset(ZERO)
    x19 = repeat(ZERO, ZERO)
    x20 = rbind(branch, x19)
    x21 = lbind(occurrences, x7)
    x22 = lbind(lbind, shift)
    x23 = compose(palette, x17)
    x24 = matcher(x23, x18)
    x25 = compose(flip, x24)
    x26 = compose(x21, x17)
    x27 = compose(x21, x14)
    x28 = fork(mapply, x22, x26)
    x29 = fork(mapply, x22, x27)
    x30 = fork(x20, x25, x28)
    x31 = fork(x20, x25, x29)
    x32 = fork(combine, x30, x31)
    x33 = mapply(x32, x5)
    x34 = ulcorner(x6)
    x35 = paint(x7, x33)
    x36 = asobject(x35)
    x37 = shift(x36, x34)
    O = paint(I, x37)
    return O


def solve_50846271(I):
    x1 = ofcolor(I, TWO)
    x2 = prapply(connect, x1, x1)
    x3 = lbind(greater, SIX)
    x4 = compose(x3, size)
    x5 = fork(either, vline, hline)
    x6 = fork(both, x4, x5)
    x7 = mfilter(x2, x6)
    x8 = fill(I, TWO, x7)
    x9 = objects(x8, T, F, F)
    x10 = colorfilter(x9, TWO)
    x11 = valmax(x10, width)
    x12 = halve(x11)
    x13 = toivec(x12)
    x14 = tojvec(x12)
    x15 = rbind(add, ZERO_BY_TWO)
    x16 = rbind(add, TWO_BY_ZERO)
    x17 = rbind(subtract, ZERO_BY_TWO)
    x18 = rbind(subtract, TWO_BY_ZERO)
    x19 = rbind(colorcount, TWO)
    x20 = rbind(toobject, x8)
    x21 = compose(initset, x15)
    x22 = fork(insert, x16, x21)
    x23 = fork(insert, x17, x22)
    x24 = fork(insert, x18, x23)
    x25 = fork(combine, dneighbors, x24)
    x26 = chain(x19, x20, x25)
    x27 = rbind(argmax, x26)
    x28 = compose(x27, toindices)
    x29 = apply(x28, x10)
    x30 = rbind(add, x13)
    x31 = rbind(subtract, x13)
    x32 = rbind(add, x14)
    x33 = rbind(subtract, x14)
    x34 = fork(connect, x30, x31)
    x35 = fork(connect, x32, x33)
    x36 = fork(combine, x34, x35)
    x37 = mapply(x36, x29)
    x38 = fill(x8, EIGHT, x37)
    O = fill(x38, TWO, x1)
    return O


def solve_150deff5(I):
    x1 = canvas(FIVE, TWO_BY_TWO)
    x2 = asobject(x1)
    x3 = occurrences(I, x2)
    x4 = lbind(shift, x2)
    x5 = mapply(x4, x3)
    x6 = fill(I, EIGHT, x5)
    x7 = canvas(FIVE, UNITY)
    x8 = astuple(TWO, ONE)
    x9 = canvas(EIGHT, x8)
    x10 = vconcat(x9, x7)
    x11 = asobject(x10)
    x12 = occurrences(x6, x11)
    x13 = lbind(shift, x11)
    x14 = mapply(x13, x12)
    x15 = fill(x6, TWO, x14)
    x16 = astuple(ONE, THREE)
    x17 = canvas(FIVE, x16)
    x18 = asobject(x17)
    x19 = occurrences(x15, x18)
    x20 = lbind(shift, x18)
    x21 = mapply(x20, x19)
    x22 = fill(x15, TWO, x21)
    x23 = hmirror(x10)
    x24 = asobject(x23)
    x25 = occurrences(x22, x24)
    x26 = lbind(shift, x24)
    x27 = mapply(x26, x25)
    x28 = fill(x22, TWO, x27)
    x29 = dmirror(x10)
    x30 = asobject(x29)
    x31 = occurrences(x28, x30)
    x32 = lbind(shift, x30)
    x33 = mapply(x32, x31)
    x34 = fill(x28, TWO, x33)
    x35 = vmirror(x29)
    x36 = asobject(x35)
    x37 = occurrences(x34, x36)
    x38 = lbind(shift, x36)
    x39 = mapply(x38, x37)
    O = fill(x34, TWO, x39)
    return O


def solve_b7249182(I):
    x1 = objects(I, T, F, T)
    x2 = merge(x1)
    x3 = portrait(x2)
    x4 = branch(x3, identity, dmirror)
    x5 = x4(I)
    x6 = objects(x5, T, F, T)
    x7 = order(x6, uppermost)
    x8 = first(x7)
    x9 = last(x7)
    x10 = color(x8)
    x11 = color(x9)
    x12 = compose(first, toindices)
    x13 = x12(x8)
    x14 = x12(x9)
    x15 = connect(x13, x14)
    x16 = centerofmass(x15)
    x17 = connect(x13, x16)
    x18 = fill(x5, x11, x15)
    x19 = fill(x18, x10, x17)
    x20 = add(x16, DOWN)
    x21 = initset(x16)
    x22 = insert(x20, x21)
    x23 = toobject(x22, x19)
    x24 = astuple(ZERO, NEG_TWO)
    x25 = shift(x23, ZERO_BY_TWO)
    x26 = shift(x23, x24)
    x27 = combine(x25, x26)
    x28 = ulcorner(x27)
    x29 = urcorner(x27)
    x30 = connect(x28, x29)
    x31 = shift(x30, UP)
    x32 = llcorner(x27)
    x33 = lrcorner(x27)
    x34 = connect(x32, x33)
    x35 = shift(x34, DOWN)
    x36 = paint(x19, x27)
    x37 = fill(x36, x10, x31)
    x38 = fill(x37, x11, x35)
    x39 = cover(x38, x22)
    O = x4(x39)
    return O


def solve_b527c5c6(I):
    x1 = objects(I, F, F, T)
    x2 = matcher(first, TWO)
    x3 = rbind(sfilter, x2)
    x4 = compose(lowermost, x3)
    x5 = compose(rightmost, x3)
    x6 = compose(uppermost, x3)
    x7 = compose(leftmost, x3)
    x8 = fork(equality, x4, lowermost)
    x9 = fork(equality, x5, rightmost)
    x10 = fork(equality, x6, uppermost)
    x11 = fork(equality, x7, leftmost)
    x12 = compose(invert, x10)
    x13 = compose(invert, x11)
    x14 = fork(add, x12, x8)
    x15 = fork(add, x13, x9)
    x16 = fork(astuple, x14, x15)
    x17 = compose(center, x3)
    x18 = fork(shoot, x17, x16)
    x19 = mapply(x18, x1)
    x20 = fill(I, TWO, x19)
    x21 = compose(vline, x18)
    x22 = sfilter(x1, x21)
    x23 = difference(x1, x22)
    x24 = chain(decrement, minimum, shape)
    x25 = compose(increment, x24)
    x26 = compose(invert, x24)
    x27 = rbind(interval, ONE)
    x28 = fork(x27, x26, x25)
    x29 = lbind(apply, toivec)
    x30 = lbind(apply, tojvec)
    x31 = lbind(lbind, shift)
    x32 = compose(x31, x18)
    x33 = compose(x29, x28)
    x34 = compose(x30, x28)
    x35 = fork(mapply, x32, x33)
    x36 = fork(mapply, x32, x34)
    x37 = mapply(x35, x23)
    x38 = mapply(x36, x22)
    x39 = combine(x37, x38)
    O = underfill(x20, THREE, x39)
    return O


def solve_b20f7c8b(I):
    x1 = ofcolor(I, EIGHT)
    x2 = subgrid(x1, I)
    x3 = ofcolor(I, ZERO)
    x4 = subgrid(x3, I)
    x5 = objects(x2, T, T, T)
    x6 = objects(x4, T, T, T)
    x7 = colorfilter(x6, ONE)
    x8 = sfilter(x6, square)
    x9 = difference(x7, x8)
    x10 = initset(identity)
    x11 = insert(vmirror, x10)
    x12 = insert(hmirror, x11)
    x13 = insert(dmirror, x12)
    x14 = prapply(compose, x13, x13)
    x15 = lbind(rapply, x14)
    x16 = mapply(x15, x5)
    x17 = compose(toindices, normalize)
    x18 = lbind(extract, x16)
    x19 = lbind(rbind, equality)
    x20 = rbind(compose, x17)
    x21 = chain(color, x18, x20)
    x22 = chain(x21, x19, x17)
    x23 = compose(backdrop, outbox)
    x24 = fork(recolor, x22, x23)
    x25 = mapply(x24, x9)
    x26 = ulcorner(x3)
    x27 = shift(x25, x26)
    x28 = paint(I, x27)
    x29 = merge(x8)
    x30 = shift(x29, x26)
    x31 = fill(x28, TWO, x30)
    x32 = lbind(add, x26)
    x33 = chain(increment, x32, ulcorner)
    x34 = lbind(extract, x5)
    x35 = rbind(compose, color)
    x36 = chain(x35, x19, color)
    x37 = chain(normalize, x34, x36)
    x38 = fork(shift, x37, x33)
    x39 = mapply(x38, x8)
    O = fill(x31, ONE, x39)
    return O


def solve_08573cc6(I):
    x1 = compose(merge, fgpartition)
    x2 = compose(urcorner, x1)
    x3 = index(I, ORIGIN)
    x4 = index(I, RIGHT)
    x5 = astuple(x3, x4)
    x6 = chain(invert, height, x1)
    x7 = compose(tojvec, x6)
    x8 = fork(add, x2, x7)
    x9 = fork(connect, x2, x8)    
    x10 = fork(index, identity, x2)
    x11 = lbind(other, x5)
    x12 = compose(x11, x10)
    x13 = fork(recolor, x12, x9)
    x14 = fork(underpaint, identity, x13)
    x15 = compose(x14, rot90)
    x16 = double(SIX)
    x17 = power(x15, x16)
    x18 = ofcolor(I, ONE)
    x19 = center(x18)
    x20 = add(x19, LEFT)
    x21 = invert(ZERO_BY_TWO)
    x22 = add(x19, x21)
    x23 = connect(x20, x22)
    x24 = fill(I, x3, x23)
    x25 = initset(ORIGIN)
    x26 = insert(RIGHT, x25)
    x27 = cover(x24, x26)
    x28 = shape(x27)
    x29 = multiply(THREE, x28)
    x30 = canvas(ZERO, x29)
    x31 = asobject(x27)
    x32 = shift(x31, x28)
    x33 = paint(x30, x32)
    x34 = x17(x33)
    x35 = crop(x34, x28, x28)
    x36 = objects(x35, F, F, T)
    x37 = lbind(contained, ONE)
    x38 = chain(flip, x37, palette)
    x39 = mfilter(x36, x38)
    O = cover(x35, x39)
    return O


def solve_6855a6e4(I):
    x1 = fgpartition(I)
    x2 = rot90(I)
    x3 = colorfilter(x1, TWO)
    x4 = first(x3)
    x5 = portrait(x4)
    x6 = branch(x5, I, x2)
    x7 = objects(x6, T, F, T)
    x8 = colorfilter(x7, FIVE)
    x9 = apply(center, x8)
    x10 = valmin(x9, first)
    x11 = compose(first, center)
    x12 = matcher(x11, x10)
    x13 = compose(flip, x12)
    x14 = extract(x8, x12)
    x15 = extract(x8, x13)
    x16 = ulcorner(x14)
    x17 = ulcorner(x15)
    x18 = subgrid(x14, x6)
    x19 = subgrid(x15, x6)
    x20 = hmirror(x18)
    x21 = hmirror(x19)
    x22 = ofcolor(x20, FIVE)
    x23 = recolor(FIVE, x22)
    x24 = ofcolor(x21, FIVE)
    x25 = recolor(FIVE, x24)
    x26 = height(x23)
    x27 = height(x25)
    x28 = add(THREE, x26)
    x29 = add(THREE, x27)
    x30 = toivec(x28)
    x31 = toivec(x29)
    x32 = add(x16, x30)
    x33 = subtract(x17, x31)
    x34 = shift(x23, x32)
    x35 = shift(x25, x33)
    x36 = merge(x8)
    x37 = cover(x6, x36)
    x38 = paint(x37, x34)
    x39 = paint(x38, x35)
    x40 = rot270(x39)
    O = branch(x5, x39, x40)
    return O


def solve_9d9215db(I):
    x1 = rot90(I)
    x2 = rot180(I)
    x3 = rot270(I)
    x4 = initset(I)
    x5 = chain(numcolors, lefthalf, tophalf)
    x6 = insert(x1, x4)
    x7 = insert(x2, x6)
    x8 = insert(x3, x7)
    x9 = argmax(x8, x5)
    x10 = vmirror(x9)
    x11 = papply(pair, x9, x10)
    x12 = lbind(apply, maximum)
    x13 = apply(x12, x11)
    x14 = partition(x13)
    x15 = sizefilter(x14, FOUR)
    x16 = apply(llcorner, x15)
    x17 = apply(lrcorner, x15)
    x18 = combine(x16, x17)
    x19 = cover(x13, x18)
    x20 = tojvec(NEG_TWO)
    x21 = rbind(add, ZERO_BY_TWO)
    x22 = rbind(add, x20)
    x23 = compose(x21, ulcorner)
    x24 = compose(x22, urcorner)
    x25 = fork(connect, x23, x24)
    x26 = compose(even, last)
    x27 = rbind(sfilter, x26)
    x28 = chain(normalize, x27, x25)
    x29 = fork(shift, x28, x23)
    x30 = fork(recolor, color, x29)
    x31 = mapply(x30, x15)
    x32 = paint(x19, x31)
    x33 = rot90(x32)
    x34 = rot180(x32)
    x35 = rot270(x32)
    x36 = papply(pair, x32, x33)
    x37 = apply(x12, x36)
    x38 = papply(pair, x37, x34)
    x39 = apply(x12, x38)
    x40 = papply(pair, x39, x35)
    O = apply(x12, x40)
    return O


def solve_cf133acc(I):
    x1 = asindices(I)
    x2 = height(I)
    x3 = toivec(x2)
    x4 = shift(x1, x3)
    x5 = objects(I, T, T, T)
    x6 = rbind(adjacent, x4)
    x7 = sfilter(x5, x6)
    x8 = difference(x5, x7)
    x9 = rbind(shoot, UP)
    x10 = compose(x9, ulcorner)
    x11 = fork(recolor, color, x10)
    x12 = apply(x11, x7)
    x13 = merge(x8)
    x14 = lowermost(x13)
    x15 = merge(x12)
    x16 = paint(I, x15)
    x17 = compose(increment, uppermost)
    x18 = lbind(mapply, neighbors)
    x19 = lbind(apply, last)
    x20 = chain(x19, x18, toindices)
    x21 = lbind(sfilter, x8)
    x22 = apply(toindices, x12)
    x23 = increment(x14)
    x24 = rbind(argmin, lowermost)
    x25 = lbind(lbind, contained)
    x26 = rbind(compose, x20)
    x27 = lbind(rbind, greater)
    x28 = rbind(compose, x17)
    x29 = chain(x21, x26, x25)
    x30 = compose(x29, last)
    x31 = chain(x28, x27, first)
    x32 = fork(sfilter, x30, x31)
    x33 = chain(color, x24, x32)
    x34 = fork(astuple, x33, identity)
    x35 = lbind(apply, x34)
    x36 = lbind(greater, x23)
    x37 = compose(x36, first)
    x38 = rbind(sfilter, x37)
    x39 = compose(x35, x38)
    x40 = mapply(x39, x22)
    O = paint(x16, x40)
    return O


def solve_cfb2ce5a(I):
    x1 = trim(I)
    x2 = tophalf(x1)
    x3 = lefthalf(x2)
    x4 = mostcolor(x3)
    x5 = leastcolor(x3)
    x6 = ofcolor(x3, x4)
    x7 = lbind(lbind, colorcount)
    x8 = fork(order, palette, x7)
    x9 = compose(first, x8)
    x10 = astuple(x4, x5)
    x11 = fork(remove, x9, x8)
    x12 = compose(first, x11)
    x13 = rbind(branch, x5)
    x14 = rbind(x13, x4)
    x15 = fork(ofcolor, identity, x9)
    x16 = rbind(contained, x6)
    x17 = chain(x14, x16, first)
    x18 = compose(x17, x15)
    x19 = lbind(other, x10)
    x20 = compose(x19, x18)
    x21 = lbind(replace, x3)
    x22 = fork(x21, x18, x9)
    x23 = lbind(ofcolor, x3)
    x24 = compose(x23, x20)
    x25 = fork(recolor, x12, x24)
    x26 = fork(paint, x22, x25)
    x27 = bottomhalf(x1)
    x28 = righthalf(x2)
    x29 = lefthalf(x27)
    x30 = righthalf(x27)
    x31 = chain(vmirror, x26, vmirror)
    x32 = chain(hmirror, x26, hmirror)
    x33 = chain(cmirror, x26, cmirror)
    x34 = x31(x28)
    x35 = x32(x29)
    x36 = x33(x30)
    x37 = hconcat(x3, x34)
    x38 = hconcat(x35, x36)
    x39 = vconcat(x37, x38)
    x40 = asobject(x39)
    x41 = shift(x40, UNITY)
    O = paint(I, x41)
    return O


def solve_96a8c0cd(I):
    x1 = astuple(TWO, ORIGIN)
    x2 = astuple(THREE, RIGHT)
    x3 = astuple(ZERO, RIGHT)
    x4 = astuple(ZERO, DOWN)
    x5 = astuple(TWO, DOWN)
    x6 = astuple(ONE, UNITY)
    x7 = astuple(ZERO, ORIGIN)
    x8 = initset(x1)
    x9 = insert(x3, x8)
    x10 = recolor(TWO, x9)
    x11 = insert(x2, x8)
    x12 = insert(x4, x11)
    x13 = insert(x5, x11)
    x14 = initset(x5)
    x15 = insert(x6, x14)
    x16 = insert(x7, x15)
    x17 = insert(x1, x15)
    x18 = lbind(shift, x10)
    x19 = lbind(shift, x13)
    x20 = lbind(shift, x17)
    x21 = rbind(occurrences, x9)
    x22 = rbind(occurrences, x12)
    x23 = rbind(occurrences, x16)
    x24 = lbind(mapply, x18)
    x25 = lbind(mapply, x19)
    x26 = lbind(mapply, x20)
    x27 = compose(x24, x21)
    x28 = compose(x25, x22)
    x29 = compose(x26, x23)
    x30 = fork(paint, identity, x27)
    x31 = fork(paint, identity, x28)
    x32 = fork(paint, identity, x29)
    x33 = chain(x30, x31, x32)
    x34 = multiply(SIX, SEVEN)
    x35 = power(x33, x34)
    x36 = ofcolor(I, TWO)
    x37 = leftmost(x36)
    x38 = equality(x37, ZERO)
    x39 = branch(x38, identity, rot270)
    x40 = branch(x38, identity, rot90)
    x41 = chain(x40, x35, x39)
    O = x41(I)
    return O


def solve_e5790162(I):
    x1 = astuple(ONE, TWO)
    x2 = astuple(THREE, DOWN)
    x3 = astuple(THREE, UNITY)
    x4 = astuple(THREE, ORIGIN)
    x5 = astuple(ZERO, RIGHT)
    x6 = astuple(ZERO, x1)
    x7 = astuple(THREE, x1)
    x8 = astuple(THREE, RIGHT)
    x9 = astuple(SIX, ZERO_BY_TWO)
    x10 = astuple(EIGHT, TWO_BY_ZERO)
    x11 = initset(x2)
    x12 = insert(x3, x11)
    x13 = insert(x5, x12)
    x14 = insert(x6, x13)
    x15 = insert(x7, x13)
    x16 = initset(x4)
    x17 = insert(x8, x16)
    x18 = insert(x10, x16)
    x19 = insert(x9, x17)
    x20 = initset(x3)
    x21 = insert(x2, x18)
    x22 = lbind(shift, x15)
    x23 = lbind(shift, x20)
    x24 = rbind(occurrences, x14)
    x25 = rbind(occurrences, x19)
    x26 = rbind(occurrences, x21)
    x27 = lbind(mapply, x22)
    x28 = lbind(mapply, x23)
    x29 = compose(x27, x24)
    x30 = compose(x28, x25)
    x31 = compose(x28, x26)
    x32 = fork(paint, identity, x29)
    x33 = fork(paint, identity, x30)
    x34 = fork(paint, identity, x31)
    x35 = chain(x32, x33, x34)
    x36 = compose(rot90, x35)
    x37 = multiply(EIGHT, EIGHT)
    x38 = power(x36, x37)
    x39 = ofcolor(I, THREE)
    x40 = shift(x39, RIGHT)
    x41 = fill(I, THREE, x40)
    O = x38(x41)
    return O


def solve_1d398264(I):
    x1 = objects(I, T, T, T)
    x2 = merge(x1)
    x3 = center(x2)
    x4 = ulcorner(x2)
    x5 = index(I, x4)
    x6 = shoot(x4, NEG_UNITY)
    x7 = recolor(x5, x6)
    x8 = paint(I, x7)
    x9 = lrcorner(x2)
    x10 = index(I, x9)
    x11 = shoot(x9, UNITY)
    x12 = recolor(x10, x11)
    x13 = paint(x8, x12)
    x14 = urcorner(x2)
    x15 = index(I, x14)
    x16 = shoot(x14, UP_RIGHT)
    x17 = recolor(x15, x16)
    x18 = paint(x13, x17)
    x19 = llcorner(x2)
    x20 = index(I, x19)
    x21 = shoot(x19, DOWN_LEFT)
    x22 = recolor(x20, x21)
    x23 = paint(x18, x22)
    x24 = add(x3, UP)
    x25 = index(I, x24)
    x26 = shoot(x24, UP)
    x27 = recolor(x25, x26)
    x28 = paint(x23, x27)
    x29 = add(x3, DOWN)
    x30 = index(I, x29)
    x31 = shoot(x29, DOWN)
    x32 = recolor(x30, x31)
    x33 = paint(x28, x32)
    x34 = add(x3, RIGHT)
    x35 = index(I, x34)
    x36 = shoot(x34, RIGHT)
    x37 = recolor(x35, x36)
    x38 = paint(x33, x37)
    x39 = add(x3, LEFT)
    x40 = index(I, x39)
    x41 = shoot(x39, LEFT)
    x42 = recolor(x40, x41)
    O = paint(x38, x42)
    return O


def solve_264363fd(I):
    x1 = objects(I, F, F, T)
    x2 = argmin(x1, size)
    x3 = normalize(x2)
    x4 = height(x2)
    x5 = width(x2)
    x6 = equality(x4, FIVE)
    x7 = equality(x5, FIVE)
    x8 = astuple(x6, x7)
    x9 = add(UNITY, x8)
    x10 = invert(x9)
    x11 = center(x2)
    x12 = index(I, x11)
    x13 = branch(x6, UP, RIGHT)
    x14 = add(x13, x11)
    x15 = index(I, x14)
    x16 = astuple(x12, ORIGIN)
    x17 = initset(x16)
    x18 = cover(I, x2)
    x19 = mostcolor(x18)
    x20 = ofcolor(x18, x19)
    x21 = occurrences(x18, x17)
    x22 = objects(x18, F, F, T)
    x23 = rbind(occurrences, x17)
    x24 = rbind(subgrid, x18)
    x25 = compose(x23, x24)
    x26 = lbind(mapply, vfrontier)
    x27 = lbind(mapply, hfrontier)
    x28 = compose(x26, x25)
    x29 = compose(x27, x25)
    x30 = branch(x6, x28, x29)
    x31 = branch(x7, x29, x28)
    x32 = fork(combine, x30, x31)
    x33 = lbind(recolor, x15)
    x34 = compose(x33, x32)
    x35 = fork(paint, x24, x34)
    x36 = compose(asobject, x35)
    x37 = fork(shift, x36, ulcorner)
    x38 = mapply(x37, x22)
    x39 = paint(x18, x38)
    x40 = shift(x3, x10)
    x41 = lbind(shift, x40)
    x42 = mapply(x41, x21)
    x43 = paint(x39, x42)
    O = fill(x43, x19, x20)
    return O


def solve_234bbc79(I):
    x1 = rbind(objects, T)
    x2 = rbind(x1, F)
    x3 = rbind(x2, F)
    x4 = rbind(argmin, leftmost)
    x5 = compose(x4, x3)
    x6 = fork(remove, x5, x3)
    x7 = compose(x4, x6)
    x8 = compose(last, last)
    x9 = matcher(first, FIVE)
    x10 = rbind(sfilter, x9)
    x11 = fork(difference, identity, x10)
    x12 = rbind(argmin, x8)
    x13 = compose(x12, x10)
    x14 = compose(last, x13)
    x15 = rbind(add, RIGHT)
    x16 = compose(x14, x7)
    x17 = compose(x14, x5)
    x18 = fork(subtract, x16, x17)
    x19 = compose(invert, x18)
    x20 = compose(x15, x19)
    x21 = compose(mostcolor, x11)
    x22 = fork(astuple, x21, x14)
    x23 = fork(remove, x13, identity)
    x24 = fork(insert, x22, x23)
    x25 = compose(x24, x7)
    x26 = fork(cover, identity, x25)
    x27 = fork(shift, x25, x20)
    x28 = fork(paint, x26, x27)
    x29 = rbind(argmax, x8)
    x30 = chain(first, x29, x11)
    x31 = fork(recolor, x30, x10)
    x32 = fork(combine, x11, x31)
    x33 = compose(x32, x5)
    x34 = fork(paint, x28, x33)
    x35 = x34(I)
    x36 = x34(x35)
    x37 = palette(x36)
    x38 = contained(FIVE, x37)
    x39 = branch(x38, x34, identity)
    x40 = x39(x36)
    x41 = x3(x40)
    x42 = merge(x41)
    x43 = width(x42)
    x44 = astuple(THREE, x43)
    O = crop(x40, ORIGIN, x44)
    return O


def solve_7df24a62(I):
    x1 = height(I)
    x2 = width(I)
    x3 = ofcolor(I, ONE)
    x4 = ofcolor(I, FOUR)
    x5 = ulcorner(x3)
    x6 = subgrid(x3, I)
    x7 = rot90(x6)
    x8 = rot180(x6)
    x9 = rot270(x6)
    x10 = matcher(size, ZERO)
    x11 = rbind(ofcolor, ONE)
    x12 = compose(normalize, x11)
    x13 = rbind(ofcolor, FOUR)
    x14 = rbind(shift, x5)
    x15 = compose(x14, x13)
    x16 = lbind(subtract, x1)
    x17 = chain(increment, x16, height)
    x18 = lbind(subtract, x2)
    x19 = chain(increment, x18, width)
    x20 = rbind(interval, ONE)
    x21 = lbind(x20, ZERO)
    x22 = compose(x21, x17)
    x23 = compose(x21, x19)
    x24 = fork(product, x22, x23)
    x25 = rbind(shift, NEG_UNITY)
    x26 = lbind(lbind, shift)
    x27 = chain(x26, x25, x12)
    x28 = astuple(x6, x7)
    x29 = astuple(x8, x9)
    x30 = combine(x28, x29)
    x31 = apply(x15, x30)
    x32 = lbind(difference, x4)
    x33 = apply(x32, x31)
    x34 = apply(normalize, x31)
    x35 = apply(x24, x34)
    x36 = lbind(rbind, difference)
    x37 = apply(x26, x34)
    x38 = apply(x36, x33)
    x39 = papply(compose, x38, x37)
    x40 = lbind(compose, x10)
    x41 = apply(x40, x39)
    x42 = papply(sfilter, x35, x41)
    x43 = apply(x27, x30)
    x44 = mpapply(mapply, x43, x42)
    O = fill(I, ONE, x44)
    return O


def solve_f15e1fac(I):
    x1 = ofcolor(I, TWO)
    x2 = portrait(x1)
    x3 = branch(x2, identity, dmirror)
    x4 = x3(I)
    x5 = leftmost(x1)
    x6 = equality(x5, ZERO)
    x7 = branch(x6, identity, vmirror)
    x8 = x7(x4)
    x9 = ofcolor(x8, EIGHT)
    x10 = uppermost(x9)
    x11 = equality(x10, ZERO)
    x12 = branch(x11, identity, hmirror)
    x13 = x12(x8)
    x14 = ofcolor(x13, EIGHT)
    x15 = ofcolor(x13, TWO)
    x16 = rbind(shoot, DOWN)
    x17 = mapply(x16, x14)
    x18 = height(x13)
    x19 = apply(first, x15)
    x20 = insert(ZERO, x19)
    x21 = insert(x18, x19)
    x22 = apply(decrement, x21)
    x23 = order(x20, identity)
    x24 = order(x22, identity)
    x25 = size(x15)
    x26 = increment(x25)
    x27 = interval(ZERO, x26, ONE)
    x28 = apply(tojvec, x27)
    x29 = pair(x23, x24)
    x30 = lbind(sfilter, x17)
    x31 = compose(first, last)
    x32 = chain(decrement, first, first)
    x33 = fork(greater, x31, x32)
    x34 = chain(increment, last, first)
    x35 = fork(greater, x34, x31)
    x36 = fork(both, x33, x35)
    x37 = lbind(lbind, astuple)
    x38 = lbind(compose, x36)
    x39 = chain(x30, x38, x37)
    x40 = apply(x39, x29)
    x41 = papply(shift, x40, x28)
    x42 = merge(x41)
    x43 = fill(x13, EIGHT, x42)
    x44 = chain(x3, x7, x12)
    O = x44(x43)
    return O


def solve_e5c44e8f(I):
    x1 = double(NINE)
    x2 = interval(TWO, x1, TWO)
    x3 = rbind(repeat, TWO)
    x4 = astuple(toivec, tojvec)
    x5 = mapply(x3, x2)
    x6 = repeat(x4, EIGHT)
    x7 = merge(x6)
    x8 = astuple(invert, identity)
    x9 = astuple(identity, invert)
    x10 = combine(x8, x9)
    x11 = repeat(x10, FOUR)
    x12 = merge(x11)
    x13 = papply(compose, x7, x12)
    x14 = compose(initset, first)
    x15 = fork(rapply, x14, last)
    x16 = compose(first, x15)
    x17 = pair(x13, x5)
    x18 = apply(x16, x17)
    x19 = ofcolor(I, THREE)
    x20 = center(x19)
    x21 = compose(first, first)
    x22 = compose(first, last)
    x23 = compose(last, first)
    x24 = fork(add, x23, x22)
    x25 = fork(connect, x23, x24)
    x26 = fork(combine, x21, x25)
    x27 = fork(remove, x22, last)
    x28 = fork(astuple, x26, x24)
    x29 = fork(astuple, x28, x27)
    x30 = astuple(x19, x20)
    x31 = astuple(x30, x18)
    x32 = size(x18)
    x33 = power(x29, x32)
    x34 = x33(x31)
    x35 = x21(x34)
    x36 = underfill(I, ONE, x35)
    x37 = replace(x36, ONE, THREE)
    x38 = objects(x36, T, T, F)
    x39 = colorfilter(x38, ONE)
    x40 = rbind(adjacent, x19)
    x41 = extract(x39, x40)
    x42 = fill(I, THREE, x41)
    x43 = colorcount(I, TWO)
    x44 = positive(x43)
    O = branch(x44, x42, x37)
    return O


def solve_5b692c0f(I):
    x1 = objects(I, T, T, T)
    x2 = colorfilter(x1, FOUR)
    x3 = sizefilter(x2, ONE)
    x4 = difference(x2, x3)
    x5 = difference(x1, x2)
    x6 = merge(x5)
    x7 = cover(I, x6)
    x8 = lbind(sfilter, x5)
    x9 = lbind(rbind, adjacent)
    x10 = lbind(sfilter, x3)
    x11 = chain(size, x10, x9)
    x12 = compose(positive, x11)
    x13 = rbind(extract, x12)
    x14 = chain(x13, x8, x9)
    x15 = lbind(argmin, x3)
    x16 = lbind(rbind, manhattan)
    x17 = rbind(branch, hmirror)
    x18 = rbind(x17, vmirror)
    x19 = rbind(branch, LEFT)
    x20 = rbind(x19, RIGHT)
    x21 = rbind(branch, UP)
    x22 = rbind(x21, DOWN)
    x23 = rbind(branch, x22)
    x24 = rbind(x23, x20)
    x25 = chain(x15, x16, x14)
    x26 = fork(combine, x14, x25)
    x27 = compose(rightmost, x25)
    x28 = compose(lowermost, x25)
    x29 = fork(greater, leftmost, x27)
    x30 = fork(greater, uppermost, x28)
    x31 = fork(multiply, vline, x29)
    x32 = fork(multiply, hline, x30)
    x33 = fork(add, x31, x32)
    x34 = chain(increment, shape, x26)
    x35 = chain(initset, x18, vline)
    x36 = chain(initset, x24, vline)
    x37 = fork(rapply, x35, x26)
    x38 = fork(rapply, x36, x33)
    x39 = compose(first, x37)
    x40 = compose(first, x38)
    x41 = fork(multiply, x34, x40)
    x42 = fork(shift, x39, x41)
    x43 = fork(combine, x26, x42)
    x44 = mapply(x43, x4)
    O = paint(x7, x44)
    return O


def solve_58e15b12(I):
    x1 = fgpartition(I)
    x2 = double(TEN)
    x3 = interval(ZERO, x2, ONE)
    x4 = compose(last, last)
    x5 = lbind(matcher, x4)
    x6 = lbind(lbind, shift)
    x7 = compose(x5, rightmost)
    x8 = compose(x5, leftmost)
    x9 = fork(sfilter, identity, x7)
    x10 = fork(sfilter, identity, x8)
    x11 = compose(x6, x9)
    x12 = compose(x6, x10)
    x13 = lbind(lbind, multiply)
    x14 = compose(invert, height)
    x15 = rbind(astuple, ONE)
    x16 = rbind(astuple, NEG_ONE)
    x17 = rbind(apply, x3)
    x18 = compose(x17, x13)
    x19 = chain(x18, x15, height)
    x20 = chain(x18, x15, x14)
    x21 = chain(x18, x16, height)
    x22 = chain(x18, x16, x14)
    x23 = fork(mapply, x11, x19)
    x24 = fork(mapply, x11, x20)
    x25 = fork(mapply, x12, x21)
    x26 = fork(mapply, x12, x22)
    x27 = fork(combine, x23, x24)
    x28 = fork(combine, x25, x26)
    x29 = fork(combine, x27, x28)
    x30 = fork(recolor, color, x29)
    x31 = apply(x30, x1)
    x32 = first(x31)
    x33 = last(x31)
    x34 = toindices(x32)
    x35 = toindices(x33)
    x36 = intersection(x34, x35)
    x37 = merge(x31)
    x38 = paint(I, x37)
    x39 = fill(x38, SIX, x36)
    x40 = astuple(NINE, NINE)
    x41 = initset(x40)
    x42 = index(x39, x40)
    x43 = equality(x42, SIX)
    x44 = fill(x39, THREE, x41)
    O = branch(x43, x44, x39)
    return O


def solve_9356391f(I):
    x1 = width(I)
    x2 = astuple(ONE, x1)
    x3 = crop(I, ORIGIN, x2)
    x4 = fgpartition(x3)
    x5 = merge(x4)
    x6 = subgrid(x5, x3)
    x7 = asobject(x6)
    x8 = objects(I, T, T, T)
    x9 = argmax(x8, lowermost)
    x10 = center(x9)
    x11 = size(x7)
    x12 = interval(ZERO, x11, ONE)
    x13 = apply(toivec, x12)
    x14 = shift(x7, x10)
    x15 = apply(initset, x14)
    x16 = compose(invert, leftmost)
    x17 = order(x15, leftmost)
    x18 = order(x15, x16)
    x19 = apply(color, x18)
    x20 = papply(recolor, x19, x17)
    x21 = mpapply(shift, x17, x13)
    x22 = mpapply(shift, x20, x13)
    x23 = shift(x22, ORIGIN)
    x24 = chain(invert, decrement, shape)
    x25 = x24(x23)
    x26 = shift(x23, x25)
    x27 = combine(x21, x26)
    x28 = shift(x27, ORIGIN)
    x29 = product(x28, x28)
    x30 = compose(first, first)
    x31 = compose(first, last)
    x32 = fork(equality, x30, x31)
    x33 = sfilter(x29, x32)
    x34 = compose(initset, first)
    x35 = fork(insert, last, x34)
    x36 = compose(box, x35)
    x37 = fork(recolor, x30, x36)
    x38 = mapply(x37, x33)
    x39 = paint(I, x38)
    x40 = tojvec(FIVE)
    x41 = index(x39, x40)
    x42 = initset(x40)
    x43 = branch(x41, FIVE, ZERO)
    x44 = recolor(x43, x42)
    O = paint(x39, x44)
    return O


def solve_22233c11(I):
    x1 = objects(I, T, F, T)
    x2 = objects(I, T, T, T)
    x3 = first(x1)
    x4 = recolor(EIGHT, x3)
    x5 = normalize(x4)
    x6 = totuple(x2)
    x7 = apply(width, x6)
    x8 = lbind(index, I)
    x9 = rbind(equality, ZERO)
    x10 = chain(flip, x9, x8)
    x11 = apply(urcorner, x6)
    x12 = apply(x10, x11)
    x13 = first(x7)
    x14 = halve(x13)
    x15 = pair(x6, x12)
    x16 = sfilter(x15, last)
    x17 = apply(first, x16)
    x18 = apply(flip, x12)
    x19 = pair(x6, x18)
    x20 = sfilter(x19, last)
    x21 = apply(first, x20)
    x22 = apply(urcorner, x21)
    x23 = invert(x14)
    x24 = astuple(x23, ONE)
    x25 = lbind(add, x24)
    x26 = apply(x25, x22)
    x27 = lbind(shift, x5)
    x28 = mapply(x27, x26)
    x29 = apply(llcorner, x21)
    x30 = astuple(ONE, x23)
    x31 = lbind(add, x30)
    x32 = apply(x31, x29)
    x33 = mapply(x27, x32)
    x34 = apply(ulcorner, x17)
    x35 = astuple(x23, x23)
    x36 = lbind(add, x35)
    x37 = apply(x36, x34)
    x38 = mapply(x27, x37)
    x39 = apply(lrcorner, x17)
    x40 = lbind(add, UNITY)
    x41 = apply(x40, x39)
    x42 = mapply(x27, x41)
    x43 = paint(I, x28)
    x44 = paint(x43, x33)
    x45 = paint(x44, x38)
    O = paint(x45, x42)
    return O


def solve_5ffb2104(I):
    x1 = initset(ZERO)
    x2 = rbind(shift, RIGHT)
    x3 = fork(difference, x2, identity)
    x4 = rbind(matcher, x1)
    x5 = lbind(rbind, toobject)
    x6 = compose(x5, first)
    x7 = rbind(chain, x3)
    x8 = lbind(x7, palette)
    x9 = chain(x4, x8, x6)
    x10 = compose(size, x3)
    x11 = lbind(x7, size)
    x12 = compose(x11, x6)
    x13 = lbind(fork, equality)
    x14 = lbind(x13, x10)
    x15 = compose(x14, x12)
    x16 = lbind(fork, both)
    x17 = fork(x16, x9, x15)
    x18 = fork(sfilter, last, x17)
    x19 = rbind(argmax, rightmost)
    x20 = compose(x19, x18)
    x21 = fork(cover, first, x20)
    x22 = fork(remove, x20, last)
    x23 = compose(x2, x20)
    x24 = fork(paint, x21, x23)
    x25 = fork(insert, x23, x22)
    x26 = fork(astuple, x24, x25)
    x27 = chain(positive, size, x18)
    x28 = objects(I, T, F, T)
    x29 = merge(x28)
    x30 = cover(I, x29)
    x31 = astuple(x30, x28)
    x32 = x18(x31)
    x33 = difference(x28, x32)
    x34 = merge(x33)
    x35 = paint(x30, x34)
    x36 = astuple(x35, x28)
    x37 = multiply(FIVE, TEN)
    x38 = rbind(branch, identity)
    x39 = rbind(x38, x26)
    x40 = compose(x39, x27)
    x41 = compose(initset, x40)
    x42 = fork(rapply, x41, identity)
    x43 = compose(first, x42)
    x44 = power(x43, x37)
    x45 = x44(x36)
    O = first(x45)
    return O


def solve_8ba14f53(I):
    x1 = objects(I, T, T, F)
    x2 = colorfilter(x1, ZERO)
    x3 = difference(x1, x2)
    x4 = rbind(bordering, I)
    x5 = compose(flip, x4)
    x6 = sfilter(x2, x5)
    x7 = argmin(x6, leftmost)
    x8 = argmax(x6, leftmost)
    x9 = lbind(index, I)
    x10 = chain(x9, decrement, ulcorner)
    x11 = x10(x7)
    x12 = x10(x8)
    x13 = size(x7)
    x14 = size(x8)
    x15 = rbind(subtract, THREE)
    x16 = greater(x13, THREE)
    x17 = greater(x14, THREE)
    x18 = astuple(ZERO, THREE)
    x19 = branch(x16, x15, identity)
    x20 = branch(x17, x15, identity)
    x21 = astuple(ONE, THREE)
    x22 = branch(x16, x21, x18)
    x23 = branch(x17, x21, x18)
    x24 = x19(x13)
    x25 = x20(x14)
    x26 = subtract(THREE, x24)
    x27 = subtract(THREE, x25)
    x28 = canvas(x11, x22)
    x29 = lbind(astuple, ONE)
    x30 = lbind(canvas, ZERO)
    x31 = compose(x30, x29)
    x32 = x29(x24)
    x33 = canvas(x11, x32)
    x34 = x31(x26)
    x35 = hconcat(x33, x34)
    x36 = vconcat(x28, x35)
    x37 = canvas(x12, x23)
    x38 = x29(x14)
    x39 = canvas(x12, x38)
    x40 = x31(x27)
    x41 = hconcat(x39, x40)
    x42 = vconcat(x37, x41)
    x43 = vconcat(x36, x42)
    x44 = asobject(x43)
    x45 = canvas(ZERO, THREE_BY_THREE)
    O = paint(x45, x44)
    return O


def solve_8b28cd80(I):
    x1 = double(TEN)
    x2 = interval(TWO, x1, TWO)
    x3 = rbind(repeat, TWO)
    x4 = astuple(toivec, tojvec)
    x5 = mapply(x3, x2)
    x6 = repeat(x4, TEN)
    x7 = merge(x6)
    x8 = astuple(invert, identity)
    x9 = astuple(identity, invert)
    x10 = combine(x8, x9)
    x11 = repeat(x10, FIVE)
    x12 = merge(x11)
    x13 = papply(compose, x7, x12)
    x14 = compose(initset, first)
    x15 = fork(rapply, x14, last)
    x16 = compose(first, x15)
    x17 = pair(x13, x5)
    x18 = apply(x16, x17)
    x19 = upscale(I, THREE)
    x20 = fgpartition(x19)
    x21 = merge(x20)
    x22 = toindices(x21)
    x23 = center(x22)
    x24 = initset(x23)
    x25 = compose(first, first)
    x26 = compose(first, last)
    x27 = compose(last, first)
    x28 = fork(add, x27, x26)
    x29 = fork(connect, x27, x28)
    x30 = fork(combine, x25, x29)
    x31 = fork(remove, x26, last)
    x32 = fork(astuple, x30, x28)
    x33 = fork(astuple, x32, x31)
    x34 = astuple(x24, x23)
    x35 = astuple(x34, x18)
    x36 = size(x18)
    x37 = power(x33, x36)
    x38 = x37(x35)
    x39 = x25(x38)
    x40 = chain(center, merge, fgpartition)
    x41 = x40(I)
    x42 = add(x41, NEG_UNITY)
    x43 = shift(x39, x42)
    x44 = cover(x19, x21)
    x45 = color(x21)
    O = fill(x44, x45, x43)
    return O


def solve_2dd70a9a(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, THREE)
    x3 = vline(x1)
    x4 = vline(x2)
    x5 = center(x1)
    x6 = branch(x4, uppermost, rightmost)
    x7 = x6(x1)
    x8 = x6(x2)
    x9 = greater(x7, x8)
    x10 = both(x4, x9)
    x11 = branch(x10, lowermost, uppermost)
    x12 = x11(x2)
    x13 = branch(x4, leftmost, rightmost)
    x14 = x13(x2)
    x15 = astuple(x12, x14)
    x16 = other(x2, x15)
    x17 = subtract(x15, x16)
    x18 = shoot(x15, x17)
    x19 = underfill(I, ONE, x18)
    x20 = objects(x19, T, F, F)
    x21 = colorfilter(x20, ONE)
    x22 = rbind(adjacent, x2)
    x23 = sfilter(x21, x22)
    x24 = difference(x21, x23)
    x25 = merge(x24)
    x26 = cover(x19, x25)
    x27 = shoot(x5, DOWN)
    x28 = shoot(x5, UP)
    x29 = shoot(x5, LEFT)
    x30 = shoot(x5, RIGHT)
    x31 = combine(x27, x28)
    x32 = combine(x29, x30)
    x33 = branch(x3, x31, x32)
    x34 = ofcolor(x26, ONE)
    x35 = initset(x15)
    x36 = rbind(manhattan, x35)
    x37 = compose(x36, initset)
    x38 = argmax(x34, x37)
    x39 = initset(x38)
    x40 = gravitate(x39, x33)
    x41 = crement(x40)
    x42 = add(x38, x41)
    x43 = connect(x38, x42)
    x44 = fill(x26, ONE, x43)
    x45 = connect(x42, x5)
    x46 = underfill(x44, ONE, x45)
    O = replace(x46, ONE, THREE)
    return O


def solve_a64e4611(I):
    x1 = asindices(I)
    x2 = fork(product, identity, identity)
    x3 = lbind(canvas, ZERO)
    x4 = compose(asobject, x3)
    x5 = fork(multiply, first, last)
    x6 = compose(positive, size)
    x7 = lbind(lbind, shift)
    x8 = rbind(fork, x5)
    x9 = lbind(x8, multiply)
    x10 = lbind(chain, x6)
    x11 = rbind(x10, x4)
    x12 = lbind(lbind, occurrences)
    x13 = chain(x9, x11, x12)
    x14 = compose(x2, first)
    x15 = compose(x13, last)
    x16 = fork(argmax, x14, x15)
    x17 = chain(x7, x4, x16)
    x18 = compose(x4, x16)
    x19 = fork(occurrences, last, x18)
    x20 = fork(mapply, x17, x19)
    x21 = multiply(TWO, SIX)
    x22 = interval(THREE, x21, ONE)
    x23 = astuple(x22, I)
    x24 = x20(x23)
    x25 = fill(I, THREE, x24)
    x26 = interval(THREE, TEN, ONE)
    x27 = astuple(x26, x25)
    x28 = x20(x27)
    x29 = fill(x25, THREE, x28)
    x30 = astuple(x26, x29)
    x31 = x20(x30)
    x32 = fill(x29, THREE, x31)
    x33 = rbind(toobject, x32)
    x34 = rbind(colorcount, THREE)
    x35 = chain(x34, x33, neighbors)
    x36 = matcher(x35, EIGHT)
    x37 = sfilter(x1, x36)
    x38 = fill(I, THREE, x37)
    x39 = ofcolor(x38, ZERO)
    x40 = rbind(bordering, x38)
    x41 = compose(x40, initset)
    x42 = lbind(contained, THREE)
    x43 = rbind(toobject, x38)
    x44 = chain(x42, palette, x43)
    x45 = compose(x44, dneighbors)
    x46 = fork(both, x45, x41)
    x47 = sfilter(x39, x46)
    O = fill(x38, THREE, x47)
    return O


def solve_ac605cbb(I):
    x1 = ofcolor(I, TWO)
    x2 = ofcolor(I, ONE)
    x3 = ofcolor(I, THREE)
    x4 = ofcolor(I, SIX)
    x5 = invert(FOUR)
    x6 = invert(SIX)
    x7 = tojvec(x5)
    x8 = tojvec(TWO)
    x9 = toivec(THREE)
    x10 = toivec(x6)
    x11 = rbind(add, x7)
    x12 = rbind(add, x8)
    x13 = rbind(add, x9)
    x14 = rbind(add, x10)
    x15 = astuple(NEG_ONE, TWO)
    x16 = fork(connect, identity, x11)
    x17 = fork(connect, identity, x12)
    x18 = fork(connect, identity, x13)
    x19 = fork(connect, identity, x14)
    x20 = shift(x1, x7)
    x21 = shift(x2, x15)
    x22 = shift(x3, x9)
    x23 = shift(x4, x10)
    x24 = mapply(x16, x1)
    x25 = mapply(x17, x2)
    x26 = mapply(x18, x3)
    x27 = mapply(x19, x4)
    x28 = fill(I, TWO, x20)
    x29 = fill(x28, ONE, x21)
    x30 = fill(x29, THREE, x22)
    x31 = fill(x30, SIX, x23)
    x32 = combine(x24, x25)
    x33 = combine(x26, x27)
    x34 = combine(x32, x33)
    x35 = underfill(x31, FIVE, x34)
    x36 = asindices(x35)
    x37 = lbind(index, x35)
    x38 = matcher(x37, FIVE)
    x39 = rbind(greater, TWO)
    x40 = rbind(colorcount, FIVE)
    x41 = rbind(toobject, x35)
    x42 = chain(x40, x41, dneighbors)
    x43 = compose(x39, x42)
    x44 = fork(both, x38, x43)
    x45 = sfilter(x36, x44)
    x46 = rbind(shoot, DOWN_LEFT)
    x47 = mapply(x46, x45)
    O = fill(x35, FOUR, x47)
    return O


def solve_b942fd60(I):
    x1 = ofcolor(I, TWO)
    x2 = center(x1)
    x3 = initset(x2)
    x4 = fgpartition(I)
    x5 = merge(x4)
    x6 = fill(I, ONE, x5)
    x7 = fill(x6, TWO, x3)
    x8 = astuple(TWO, ORIGIN)
    x9 = astuple(ONE, ZERO_BY_TWO)
    x10 = astuple(ZERO, RIGHT)
    x11 = initset(x10)
    x12 = astuple(TWO, RIGHT)
    x13 = initset(x12)
    x14 = insert(x8, x11)
    x15 = insert(x8, x13)
    x16 = insert(x9, x15)
    x17 = astuple(THREE, RIGHT)
    x18 = initset(x9)
    x19 = insert(x17, x18)
    x20 = insert(x8, x19)
    x21 = lbind(shift, x15)
    x22 = double(SIX)
    x23 = lbind(shift, x20)
    x24 = rbind(occurrences, x14)
    x25 = rbind(occurrences, x16)
    x26 = lbind(mapply, x21)
    x27 = compose(x26, x24)
    x28 = fork(paint, identity, x27)
    x29 = power(x28, x22)
    x30 = chain(vmirror, x29, vmirror)
    x31 = compose(x30, x29)
    x32 = lbind(mapply, x23)
    x33 = compose(x32, x25)
    x34 = fork(paint, identity, x33)
    x35 = chain(vmirror, x34, vmirror)
    x36 = compose(x35, x34)
    x37 = rbind(switch, THREE)
    x38 = rbind(x37, TWO)
    x39 = compose(dmirror, x38)
    x40 = rbind(replace, TWO)
    x41 = rbind(x40, THREE)
    x42 = compose(x39, x36)
    x43 = compose(x41, x31)
    x44 = compose(x42, x43)
    x45 = power(x44, EIGHT)
    x46 = x45(x7)
    x47 = x41(x46)
    O = paint(x47, x5)
    return O


def solve_a3f84088(I):
    x1 = ofcolor(I, FIVE)
    x2 = center(x1)
    x3 = ulcorner(x1)
    x4 = increment(x3)
    x5 = rbind(interval, FOUR)
    x6 = first(x4)
    x7 = last(x4)
    x8 = first(x2)
    x9 = last(x2)
    x10 = first(x3)
    x11 = last(x3)
    x12 = x5(x6, x8)
    x13 = x5(x7, x9)
    x14 = pair(x12, x13)
    x15 = double(SIX)
    x16 = width(x1)
    x17 = greater(x16, x15)
    x18 = branch(x17, increment, identity)
    x19 = x18(x8)
    x20 = x18(x9)
    x21 = interval(x10, x19, TWO)
    x22 = interval(x11, x20, TWO)
    x23 = pair(x21, x22)
    x24 = fill(I, TWO, x14)
    x25 = fill(x24, FIVE, x23)
    x26 = subgrid(x1, x25)
    x27 = trim(x26)
    x28 = rot180(x27)
    x29 = compose(merge, fgpartition)
    x30 = x29(x28)
    x31 = paint(x27, x30)
    x32 = hmirror(x31)
    x33 = x29(x32)
    x34 = paint(x31, x33)
    x35 = ofcolor(x34, TWO)
    x36 = ofcolor(x34, FIVE)
    x37 = fork(either, vline, hline)
    x38 = lbind(prapply, connect)
    x39 = fork(x38, identity, identity)
    x40 = rbind(mfilter, x37)
    x41 = compose(x40, x39)
    x42 = x41(x35)
    x43 = fill(x34, TWO, x42)
    x44 = x41(x36)
    x45 = fill(x43, FIVE, x44)
    x46 = asobject(x45)
    x47 = shift(x46, x4)
    O = paint(I, x47)
    return O


def solve_9b365c51(I):
    x1 = fgpartition(I)
    x2 = sfilter(x1, vline)
    x3 = size(x2)
    x4 = rbind(sfilter, vline)
    x5 = rbind(argmin, leftmost)
    x6 = chain(x5, x4, fgpartition)
    x7 = rbind(ofcolor, EIGHT)
    x8 = initset(EIGHT)
    x9 = interval(ONE, TEN, ONE)
    x10 = product(x9, x9)
    x11 = fork(greater, first, last)
    x12 = fork(multiply, first, last)
    x13 = fork(add, x11, x12)
    x14 = rbind(argmin, first)
    x15 = lbind(matcher, last)
    x16 = chain(x15, leftmost, x7)
    x17 = fork(sfilter, x7, x16)
    x18 = compose(x14, x17)
    x19 = rbind(argmax, x13)
    x20 = lbind(sfilter, x10)
    x21 = rbind(matcher, x8)
    x22 = compose(initset, x18)
    x23 = chain(x19, x20, x21)
    x24 = lbind(fork, toobject)
    x25 = rbind(x24, identity)
    x26 = lbind(rbind, add)
    x27 = rbind(compose, x18)
    x28 = compose(x27, x26)
    x29 = lbind(fork, insert)
    x30 = rbind(x29, x22)
    x31 = compose(x30, x28)
    x32 = lbind(compose, backdrop)
    x33 = chain(x25, x32, x31)
    x34 = lbind(compose, palette)
    x35 = compose(initset, x33)
    x36 = lbind(rbind, rapply)
    x37 = rbind(chain, x35)
    x38 = lbind(x37, first)
    x39 = chain(x23, x34, x38)
    x40 = compose(x39, x36)
    x41 = fork(add, x18, x40)
    x42 = fork(insert, x41, x22)
    x43 = fork(cover, identity, x6)
    x44 = compose(color, x6)
    x45 = compose(backdrop, x42)
    x46 = fork(recolor, x44, x45)
    x47 = fork(paint, x43, x46)
    x48 = power(x47, x3)
    O = x48(I)
    return O


def solve_7837ac64(I):
    x1 = compress(I)
    x2 = lbind(colorcount, x1)
    x3 = palette(x1)
    x4 = order(x3, x2)
    x5 = remove(ZERO, x4)
    x6 = last(x5)
    x7 = replace(x1, x6, ZERO)
    x8 = objects(x7, T, F, T)
    x9 = merge(x8)
    x10 = subgrid(x9, x7)
    x11 = index(x10, ORIGIN)
    x12 = vmirror(x10)
    x13 = index(x12, ORIGIN)
    x14 = hmirror(x10)
    x15 = index(x14, ORIGIN)
    x16 = vmirror(x14)
    x17 = index(x16, ORIGIN)
    x18 = width(x10)
    x19 = subtract(x18, FOUR)
    x20 = divide(x19, THREE)
    x21 = increment(x20)
    x22 = tojvec(x21)
    x23 = toivec(x21)
    x24 = index(x10, x22)
    x25 = index(x12, x22)
    x26 = index(x14, x22)
    x27 = index(x16, x22)
    x28 = index(x10, x23)
    x29 = index(x14, x23)
    x30 = index(x12, x23)
    x31 = equality(x24, x25)
    x32 = equality(x26, x27)
    x33 = equality(x28, x29)
    x34 = equality(x29, x30)
    x35 = branch(x31, x24, ZERO)
    x36 = branch(x32, x26, ZERO)
    x37 = branch(x33, x28, ZERO)
    x38 = branch(x34, x29, ZERO)
    x39 = astuple(x11, x35)
    x40 = repeat(x13, ONE)
    x41 = combine(x39, x40)
    x42 = astuple(x37, ZERO)
    x43 = repeat(x38, ONE)
    x44 = combine(x42, x43)
    x45 = astuple(x15, x36)
    x46 = repeat(x17, ONE)
    x47 = combine(x45, x46)
    x48 = astuple(x41, x44)
    x49 = repeat(x47, ONE)
    O = vconcat(x48, x49)
    return O


def solve_a8c38be5(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, FIVE)
    x3 = argmax(x2, size)
    x4 = subgrid(x3, I)
    x5 = difference(x1, x2)
    x6 = fork(equality, height, width)
    x7 = fork(greater, width, height)
    x8 = sfilter(x5, x6)
    x9 = sfilter(x5, portrait)
    x10 = sfilter(x5, x7)
    x11 = rbind(subgrid, I)
    x12 = chain(center, delta, normalize)
    x13 = order(x8, x12)
    x14 = apply(x11, x13)
    x15 = order(x9, x12)
    x16 = apply(x11, x15)
    x17 = order(x10, x12)
    x18 = apply(x11, x17)
    x19 = first(x14)
    x20 = remove(x19, x14)
    x21 = first(x20)
    x22 = remove(x21, x20)
    x23 = first(x22)
    x24 = last(x14)
    x25 = last(x16)
    x26 = first(x16)
    x27 = last(x18)
    x28 = first(x18)
    x29 = astuple(ONE, TWO)
    x30 = astuple(ONE, THREE)
    x31 = astuple(NINE, ONE)
    x32 = canvas(FIVE, x29)
    x33 = canvas(FIVE, x30)
    x34 = canvas(FIVE, x31)
    x35 = vconcat(x24, x32)
    x36 = vconcat(x35, x25)
    x37 = vconcat(x36, x32)
    x38 = vconcat(x37, x21)
    x39 = vconcat(x27, x33)
    x40 = vconcat(x39, x4)
    x41 = vconcat(x40, x33)
    x42 = vconcat(x41, x28)
    x43 = vconcat(x23, x32)
    x44 = vconcat(x43, x26)
    x45 = vconcat(x44, x32)
    x46 = vconcat(x45, x19)
    x47 = hconcat(x38, x34)
    x48 = hconcat(x47, x42)
    x49 = hconcat(x48, x34)
    O = hconcat(x49, x46)
    return O


def solve_351d6448(I):
    x1 = width(I)
    x2 = astuple(THREE, x1)
    x3 = toivec(EIGHT)
    x4 = double(SIX)
    x5 = toivec(x4)
    x6 = crop(I, x3, x2)
    x7 = crop(I, x5, x2)
    x8 = matcher(first, ZERO)
    x9 = compose(flip, x8)
    x10 = rbind(sfilter, x9)
    x11 = compose(x10, asobject)
    x12 = compose(normalize, x11)
    x13 = x11(x7)
    x14 = x11(x6)
    x15 = fgpartition(x7)
    x16 = merge(x15)
    x17 = rightmost(x13)
    x18 = rightmost(x14)
    x19 = subtract(x17, x18)
    x20 = tojvec(x19)
    x21 = compose(size, x12)
    x22 = x21(x7)
    x23 = x21(x6)
    x24 = subtract(x22, x23)
    x25 = tojvec(x24)
    x26 = compose(last, last)
    x27 = argmin(x13, x26)
    x28 = first(x27)
    x29 = toindices(x13)
    x30 = leastcolor(x13)
    x31 = ofcolor(x7, x30)
    x32 = rightmost(x31)
    x33 = increment(x32)
    x34 = matcher(last, x33)
    x35 = sfilter(x29, x34)
    x36 = cover(x7, x16)
    x37 = shift(x16, x20)
    x38 = shift(x16, x25)
    x39 = recolor(x28, x35)
    x40 = paint(x36, x37)
    x41 = paint(x7, x38)
    x42 = paint(x7, x39)
    x43 = x12(x6)
    x44 = x12(x7)
    x45 = difference(x43, x44)
    x46 = size(x45)
    x47 = equality(x43, x44)
    x48 = equality(ZERO, x46)
    x49 = branch(x48, x41, x42)
    O = branch(x47, x40, x49)
    return O


def solve_e6de6e8f(I):
    x1 = objects(I, T, T, F)
    x2 = colorfilter(x1, TWO)
    x3 = apply(toindices, x2)
    x4 = order(x3, leftmost)
    x5 = astuple(EIGHT, SEVEN)
    x6 = canvas(ZERO, x5)
    x7 = astuple(ZERO, THREE)
    x8 = initset(x7)
    x9 = fill(x6, THREE, x8)
    x10 = rbind(branch, LEFT)
    x11 = rbind(x10, RIGHT)
    x12 = rbind(branch, TWO)
    x13 = rbind(x12, ONE)
    x14 = rbind(equality, TWO)
    x15 = rbind(equality, ZERO)
    x16 = lbind(recolor, TWO)
    x17 = chain(x11, x15, last)
    x18 = compose(toivec, x13)
    x19 = rbind(argmin, first)
    x20 = compose(x14, width)
    x21 = compose(flip, x20)
    x22 = compose(x18, x20)
    x23 = compose(x17, x19)
    x24 = fork(add, x22, x23)
    x25 = fork(multiply, x21, x22)
    x26 = fork(multiply, x20, x24)
    x27 = fork(add, x25, x26)
    x28 = compose(first, last)
    x29 = compose(last, last)
    x30 = chain(normalize, first, x28)
    x31 = chain(invert, x19, x30)
    x32 = fork(add, x31, x29)
    x33 = fork(shift, x30, x32)
    x34 = compose(x27, x30)
    x35 = fork(add, x29, x34)
    x36 = compose(first, x28)
    x37 = fork(remove, x36, x28)
    x38 = compose(x16, x33)
    x39 = fork(underpaint, first, x38)
    x40 = fork(astuple, x37, x35)
    x41 = fork(astuple, x39, x40)
    x42 = astuple(x4, x7)
    x43 = astuple(x9, x42)
    x44 = size(x4)
    x45 = power(x41, x44)
    x46 = x45(x43)
    x47 = first(x46)
    x48 = x29(x46)
    x49 = initset(x48)
    O = underfill(x47, TWO, x49)
    return O


def solve_79fb03f4(I):
    x1 = palette(I)
    x2 = remove(ONE, x1)
    x3 = other(x2, ZERO)
    x4 = ofcolor(I, ONE)
    x5 = mapply(hfrontier, x4)
    x6 = underfill(I, ONE, x5)
    x7 = astuple(ONE, TWO)
    x8 = astuple(ZERO, ORIGIN)
    x9 = astuple(ZERO, ZERO_BY_TWO)
    x10 = astuple(ONE, x7)
    x11 = astuple(ONE, DOWN)
    x12 = astuple(x3, UNITY)
    x13 = astuple(ZERO, RIGHT)
    x14 = astuple(ONE, ORIGIN)
    x15 = astuple(ONE, RIGHT)
    x16 = astuple(ONE, ZERO_BY_TWO)
    x17 = astuple(x3, RIGHT)
    x18 = astuple(x3, DOWN)
    x19 = astuple(ONE, UNITY)
    x20 = astuple(x10, x11)
    x21 = astuple(x9, x12)
    x22 = astuple(x8, x13)
    x23 = astuple(x14, x15)
    x24 = astuple(x16, x11)
    x25 = astuple(x8, x17)
    x26 = astuple(x18, x19)
    x27 = combine(x20, x21)
    x28 = combine(x20, x23)
    x29 = neighbors(DOWN)
    x30 = neighbors(RIGHT)
    x31 = combine(x27, x22)
    x32 = combine(x28, x24)
    x33 = combine(x25, x26)
    x34 = combine(x29, x30)
    x35 = lbind(shift, x32)
    x36 = lbind(shift, x34)
    x37 = occurrences(x6, x31)
    x38 = mapply(x35, x37)
    x39 = paint(x6, x38)
    x40 = occurrences(x39, x33)
    x41 = mapply(x36, x40)
    x42 = underfill(x39, ONE, x41)
    x43 = hmirror(x42)
    x44 = occurrences(x43, x31)
    x45 = mapply(x35, x44)
    x46 = paint(x43, x45)
    x47 = hmirror(x39)
    x48 = occurrences(x47, x33)
    x49 = mapply(x36, x48)
    x50 = underfill(x46, ONE, x49)
    O = hmirror(x50)
    return O


def solve_fd4b2b02(I):
    x1 = leastcolor(I)
    x2 = ofcolor(I, x1)
    x3 = equality(x1, SIX)
    x4 = rbind(switch, SIX)
    x5 = rbind(x4, THREE)
    x6 = branch(x3, x5, identity)
    x7 = portrait(x2)
    x8 = branch(x7, dmirror, identity)
    x9 = compose(x8, x6)
    x10 = x9(I)
    x11 = ofcolor(x10, THREE)
    x12 = dmirror(x11)
    x13 = height(x11)
    x14 = width(x11)
    x15 = invert(x13)
    x16 = astuple(x13, x15)
    x17 = invert(x14)
    x18 = astuple(x17, x15)
    x19 = shift(x12, x16)
    x20 = shift(x12, x18)
    x21 = interval(ZERO, TEN, ONE)
    x22 = add(x14, x13)
    x23 = invert(x22)
    x24 = lbind(lbind, mapply)
    x25 = lbind(lbind, shift)
    x26 = compose(x24, x25)
    x27 = x26(x11)
    x28 = x26(x19)
    x29 = x26(x20)
    x30 = astuple(x22, x23)
    x31 = astuple(x22, x22)
    x32 = astuple(x23, x22)
    x33 = astuple(x23, x23)
    x34 = rbind(apply, x21)
    x35 = lbind(rbind, multiply)
    x36 = chain(x27, x34, x35)
    x37 = astuple(x30, x31)
    x38 = astuple(x32, x33)
    x39 = combine(x37, x38)
    x40 = mapply(x36, x39)
    x41 = fill(x10, THREE, x40)
    x42 = chain(x28, x34, x35)
    x43 = chain(x29, x34, x35)
    x44 = x42(x30)
    x45 = x42(x32)
    x46 = x43(x33)
    x47 = x43(x31)
    x48 = combine(x44, x45)
    x49 = combine(x46, x47)
    x50 = combine(x48, x49)
    x51 = fill(x41, SIX, x50)
    O = x9(x51)
    return O


def solve_136b0064(I):
    x1 = lefthalf(I)
    x2 = lefthalf(x1)
    x3 = astuple(ONE, THREE)
    x4 = canvas(ZERO, x3)
    x5 = righthalf(x1)
    x6 = vconcat(x2, x4)
    x7 = vconcat(x6, x5)
    x8 = objects(x7, T, T, T)
    x9 = righthalf(I)
    x10 = ofcolor(x9, FIVE)
    x11 = center(x10)
    x12 = add(x11, DOWN)
    x13 = recolor(FIVE, x10)
    x14 = astuple(ONE, ZERO_BY_TWO)
    x15 = astuple(TWO, LEFT)
    x16 = invert(THREE)
    x17 = tojvec(x16)
    x18 = astuple(THREE, x17)
    x19 = astuple(SIX, DOWN)
    x20 = initset(x19)
    x21 = insert(x18, x20)
    x22 = insert(x15, x21)
    x23 = insert(x14, x22)
    x24 = lbind(extract, x23)
    x25 = lbind(matcher, first)
    x26 = chain(last, x24, x25)
    x27 = compose(x26, first)
    x28 = fork(add, last, x27)
    x29 = fork(connect, last, x28)
    x30 = fork(recolor, first, x29)
    x31 = rbind(add, DOWN)
    x32 = compose(x31, x26)
    x33 = rbind(argmin, uppermost)
    x34 = compose(x33, first)
    x35 = compose(color, x34)
    x36 = compose(last, last)
    x37 = fork(remove, x34, first)
    x38 = fork(astuple, x35, x36)
    x39 = compose(first, last)
    x40 = compose(x30, x38)
    x41 = fork(combine, x39, x40)
    x42 = compose(x32, x35)
    x43 = fork(add, x36, x42)
    x44 = fork(astuple, x41, x43)
    x45 = fork(astuple, x37, x44)
    x46 = size(x8)
    x47 = power(x45, x46)
    x48 = astuple(x13, x12)
    x49 = astuple(x8, x48)
    x50 = chain(first, last, x47)
    x51 = x50(x49)
    O = paint(x9, x51)
    return O


def solve_696d4842(I):
    x1 = objects(I, T, T, T)
    x2 = sizefilter(x1, ONE)
    x3 = difference(x1, x2)
    x4 = lbind(argmax, x3)
    x5 = lbind(matcher, first)
    x6 = chain(x5, first, center)
    x7 = lbind(matcher, last)
    x8 = chain(x7, last, center)
    x9 = rbind(chain, toindices)
    x10 = lbind(x9, size)
    x11 = lbind(rbind, sfilter)
    x12 = chain(x10, x11, x6)
    x13 = chain(x10, x11, x8)
    x14 = lbind(fork, add)
    x15 = fork(x14, x12, x13)
    x16 = compose(x4, x15)
    x17 = rbind(compose, initset)
    x18 = lbind(lbind, manhattan)
    x19 = compose(x17, x18)
    x20 = fork(argmin, x16, x19)
    x21 = compose(last, x20)
    x22 = fork(connect, center, x21)
    x23 = fork(recolor, color, x22)
    x24 = mapply(x23, x2)
    x25 = underpaint(I, x24)
    x26 = objects(x25, F, T, T)
    x27 = compose(x5, mostcolor)
    x28 = fork(sfilter, identity, x27)
    x29 = fork(difference, identity, x28)
    x30 = lbind(chain, invert)
    x31 = rbind(x30, initset)
    x32 = chain(x31, x18, x29)
    x33 = fork(order, x28, x32)
    x34 = lbind(interval, ZERO)
    x35 = rbind(x34, ONE)
    x36 = chain(x35, size, x33)
    x37 = chain(decrement, size, x29)
    x38 = fork(pair, x33, x36)
    x39 = lbind(lbind, greater)
    x40 = rbind(compose, last)
    x41 = chain(x40, x39, x37)
    x42 = lbind(apply, first)
    x43 = fork(sfilter, x38, x41)
    x44 = compose(x42, x43)
    x45 = fork(difference, x33, x44)
    x46 = fork(recolor, leastcolor, x44)
    x47 = fork(combine, x29, x45)
    x48 = fork(recolor, mostcolor, x47)
    x49 = fork(combine, x46, x48)
    x50 = mapply(x49, x26)
    x51 = paint(I, x50)
    x52 = merge(x2)
    O = paint(x51, x52)
    return O


def solve_d017b73f(I):
    x1 = objects(I, T, T, T)
    x2 = size(x1)
    x3 = order(x1, leftmost)
    x4 = merge(x1)
    x5 = cover(I, x4)
    x6 = astuple(ONE, NEG_ONE)
    x7 = rbind(add, LEFT)
    x8 = rbind(add, RIGHT)
    x9 = astuple(x3, x5)
    x10 = astuple(x6, x9)
    x11 = compose(first, last)
    x12 = compose(first, x11)
    x13 = compose(toindices, x12)
    x14 = rbind(argmin, last)
    x15 = compose(x14, x13)
    x16 = compose(rightmost, x12)
    x17 = compose(uppermost, x12)
    x18 = compose(lowermost, x12)
    x19 = rbind(compose, last)
    x20 = rbind(compose, first)
    x21 = lbind(rbind, equality)
    x22 = chain(x19, x21, x16)
    x23 = chain(x20, x21, x17)
    x24 = chain(x20, x21, x18)
    x25 = lbind(fork, either)
    x26 = lbind(fork, both)
    x27 = fork(x25, x23, x24)
    x28 = fork(x26, x22, x27)
    x29 = fork(sfilter, x13, x28)
    x30 = lbind(rbind, contained)
    x31 = rbind(chain, x7)
    x32 = lbind(x31, flip)
    x33 = chain(x32, x30, x13)
    x34 = fork(argmax, x29, x33)
    x35 = fork(subtract, x34, x15)
    x36 = compose(x8, first)
    x37 = fork(add, x36, x35)
    x38 = fork(remove, x12, x11)
    x39 = compose(last, last)
    x40 = fork(subtract, x36, x15)
    x41 = fork(shift, x12, x40)
    x42 = fork(paint, x39, x41)
    x43 = fork(astuple, x38, x42)
    x44 = fork(astuple, x37, x43)
    x45 = power(x44, x2)
    x46 = x45(x10)
    x47 = x39(x46)
    x48 = chain(rightmost, merge, fgpartition)
    x49 = x48(x47)
    x50 = increment(x49)
    x51 = lbind(greater, x50)
    x52 = compose(x51, last)
    x53 = asindices(x47)
    x54 = sfilter(x53, x52)
    O = subgrid(x54, x47)
    return O


def solve_626c0bcc(I):
    x1 = canvas(EIGHT, TWO_BY_TWO)
    x2 = astuple(EIGHT, ORIGIN)
    x3 = astuple(EIGHT, RIGHT)
    x4 = astuple(EIGHT, DOWN)
    x5 = asobject(x1)
    x6 = lbind(shift, x5)
    x7 = remove(x2, x5)
    x8 = lbind(shift, x7)
    x9 = remove(x3, x5)
    x10 = lbind(shift, x9)
    x11 = remove(x4, x5)
    x12 = lbind(shift, x11)
    x13 = compose(positive, size)
    x14 = lbind(apply, x6)
    x15 = lbind(apply, x8)
    x16 = lbind(apply, x10)
    x17 = lbind(apply, x12)
    x18 = lbind(rbind, difference)
    x19 = lbind(mapply, toindices)
    x20 = lbind(chain, x13)
    x21 = rbind(x20, toindices)
    x22 = compose(x21, x18)
    x23 = rbind(occurrences, x7)
    x24 = rbind(occurrences, x9)
    x25 = rbind(occurrences, x5)
    x26 = rbind(occurrences, x11)
    x27 = chain(x19, x14, x25)
    x28 = chain(x19, x16, x24)
    x29 = chain(x19, x15, x23)
    x30 = chain(x19, x17, x26)
    x31 = lbind(recolor, TWO)
    x32 = lbind(recolor, FOUR)
    x33 = lbind(recolor, THREE)
    x34 = fork(combine, x27, x29)
    x35 = fork(combine, x28, x30)
    x36 = fork(combine, x27, x35)
    x37 = fork(combine, x34, x30)
    x38 = fork(combine, x34, x28)
    x39 = compose(x15, x23)
    x40 = compose(x22, x36)
    x41 = fork(mfilter, x39, x40)
    x42 = compose(x16, x24)
    x43 = compose(x22, x37)
    x44 = fork(mfilter, x42, x43)
    x45 = compose(x17, x26)
    x46 = compose(x22, x38)
    x47 = fork(mfilter, x45, x46)
    x48 = compose(x31, x41)
    x49 = compose(x32, x44)
    x50 = compose(x33, x47)
    x51 = fork(combine, x48, x49)
    x52 = fork(combine, x51, x50)
    x53 = fork(paint, identity, x52)
    x54 = power(x53, FOUR)
    x55 = x54(I)
    O = replace(x55, EIGHT, ONE)
    return O


def solve_b7cb93ac(I):
    x1 = objects(I, T, T, T)
    x2 = argmax(x1, size)
    x3 = toindices(x2)
    x4 = remove(x2, x1)
    x5 = merge(x4)
    x6 = astuple(FOUR, FOUR)
    x7 = canvas(ZERO, x6)
    x8 = asindices(x7)
    x9 = shift(x8, NEG_UNITY)
    x10 = totuple(x9)
    x11 = ulcorner(x2)
    x12 = rbind(shift, x11)
    x13 = compose(x12, normalize)
    x14 = totuple(x4)
    x15 = apply(x13, x14)
    x16 = lbind(rbind, shift)
    x17 = apply(x16, x10)
    x18 = repeat(vmirror, ONE)
    x19 = astuple(dmirror, hmirror)
    x20 = combine(x19, x18)
    x21 = prapply(compose, x17, x20)
    x22 = cover(I, x5)
    x23 = lbind(rapply, x21)
    x24 = compose(totuple, x23)
    x25 = apply(x24, x15)
    x26 = totuple(x25)
    x27 = size(x26)
    x28 = halve(x27)
    x29 = lbind(greater, x28)
    x30 = compose(x29, first)
    x31 = interval(ZERO, x27, ONE)
    x32 = pair(x31, x26)
    x33 = sfilter(x32, x30)
    x34 = compose(flip, x30)
    x35 = sfilter(x32, x34)
    x36 = apply(last, x33)
    x37 = apply(last, x35)
    x38 = first(x26)
    x39 = last(x26)
    x40 = product(x38, x39)
    x41 = fork(product, first, last)
    x42 = x41(x36)
    x43 = x41(x37)
    x44 = prapply(combine, x42, x43)
    x45 = equality(x27, TWO)
    x46 = branch(x45, x40, x44)
    x47 = fork(add, first, last)
    x48 = compose(x47, shape)
    x49 = fork(subtract, size, x48)
    x50 = rbind(combine, x3)
    x51 = chain(x50, toindices, merge)
    x52 = compose(x49, x51)
    x53 = argmax(x46, x52)
    x54 = merge(x53)
    x55 = paint(x22, x54)
    O = compress(x55)
    return O


def solve_b775ac94(I):
    x1 = objects(I, F, T, T)
    x2 = lbind(rbind, equality)
    x3 = rbind(compose, first)
    x4 = chain(x3, x2, mostcolor)
    x5 = fork(sfilter, identity, x4)
    x6 = fork(difference, identity, x5)
    x7 = lbind(rbind, adjacent)
    x8 = rbind(compose, initset)
    x9 = chain(x8, x7, x6)
    x10 = fork(extract, x5, x9)
    x11 = fork(insert, x10, x6)
    x12 = lbind(recolor, ZERO)
    x13 = chain(x12, delta, x11)
    x14 = fork(combine, x11, x13)
    x15 = fork(position, x5, x6)
    x16 = chain(toivec, first, x15)
    x17 = chain(tojvec, last, x15)
    x18 = fork(multiply, shape, x16)
    x19 = fork(multiply, shape, x17)
    x20 = fork(multiply, shape, x15)
    x21 = fork(shift, hmirror, x18)
    x22 = fork(shift, vmirror, x19)
    x23 = compose(hmirror, vmirror)
    x24 = fork(shift, x23, x20)
    x25 = lbind(compose, x5)
    x26 = x25(x21)
    x27 = x25(x22)
    x28 = x25(x24)
    x29 = compose(crement, invert)
    x30 = lbind(compose, x29)
    x31 = x30(x16)
    x32 = x30(x17)
    x33 = x30(x15)
    x34 = fork(shift, x26, x31)
    x35 = fork(shift, x27, x32)
    x36 = fork(shift, x28, x33)
    x37 = lbind(index, I)
    x38 = lbind(compose, toindices)
    x39 = x38(x14)
    x40 = x38(x34)
    x41 = x38(x35)
    x42 = x38(x36)
    x43 = fork(intersection, x39, x40)
    x44 = fork(intersection, x39, x41)
    x45 = fork(intersection, x39, x42)
    x46 = chain(x37, first, x43)
    x47 = chain(x37, first, x44)
    x48 = chain(x37, first, x45)
    x49 = fork(recolor, x46, x34)
    x50 = fork(recolor, x47, x35)
    x51 = fork(recolor, x48, x36)
    x52 = mapply(x49, x1)
    x53 = mapply(x50, x1)
    x54 = mapply(x51, x1)
    x55 = paint(I, x52)
    x56 = paint(x55, x53)
    O = paint(x56, x54)
    return O


def solve_b0f4d537(I):
    x1 = ofcolor(I, FOUR)
    x2 = ofcolor(I, FIVE)
    x3 = subgrid(x2, I)
    x4 = subgrid(x1, I)
    x5 = compress(x3)
    x6 = astuple(x4, x5)
    x7 = rbind(equality, FOUR)
    x8 = rbind(sfilter, x7)
    x9 = compose(size, x8)
    x10 = lbind(interval, ZERO)
    x11 = lbind(contained, ZERO)
    x12 = rbind(x10, ONE)
    x13 = chain(x12, size, first)
    x14 = compose(flip, x11)
    x15 = repeat(ZERO, ONE)
    x16 = lbind(combine, x15)
    x17 = rbind(valmax, x9)
    x18 = compose(x9, last)
    x19 = lbind(matcher, x18)
    x20 = chain(increment, first, first)
    x21 = compose(first, last)
    x22 = fork(subtract, x21, x20)
    x23 = rbind(chain, x22)
    x24 = rbind(repeat, ONE)
    x25 = chain(x24, last, first)
    x26 = lbind(fork, combine)
    x27 = lbind(lbind, repeat)
    x28 = lbind(x23, merge)
    x29 = compose(x28, x27)
    x30 = compose(x24, first)
    x31 = compose(x24, height)
    x32 = compose(x30, last)
    x33 = fork(pair, x13, first)
    x34 = chain(x19, x17, first)
    x35 = fork(sfilter, x33, x34)
    x36 = lbind(apply, first)
    x37 = rbind(sfilter, x14)
    x38 = compose(x37, last)
    x39 = chain(x16, x36, x35)
    x40 = fork(combine, x32, x38)
    x41 = compose(x36, x35)
    x42 = compose(x31, first)
    x43 = fork(combine, x41, x42)
    x44 = fork(combine, x38, x32)
    x45 = fork(pair, x39, x40)
    x46 = fork(pair, x43, x44)
    x47 = fork(pair, x45, x46)
    x48 = lbind(x26, x25)
    x49 = chain(x48, x29, x30)
    x50 = compose(x49, last)
    x51 = fork(mapply, x50, x47)
    x52 = x51(x6)
    x53 = dmirror(x4)
    x54 = dmirror(x52)
    x55 = astuple(x53, x54)
    x56 = x51(x55)
    O = dmirror(x56)
    return O


def solve_891232d6(I):
    x1 = astuple(ZERO, ORIGIN)
    x2 = astuple(TWO, DOWN)
    x3 = astuple(ZERO, UNITY)
    x4 = astuple(SEVEN, ORIGIN)
    x5 = astuple(TWO, UNITY)
    x6 = astuple(EIGHT, ORIGIN)
    x7 = astuple(FOUR, DOWN)
    x8 = astuple(THREE, UNITY)
    x9 = initset(x2)
    x10 = insert(x1, x9)
    x11 = recolor(TWO, x10)
    x12 = insert(x4, x9)
    x13 = insert(x3, x12)
    x14 = astuple(TWO, TWO_BY_ZERO)
    x15 = insert(x5, x9)
    x16 = insert(x4, x15)
    x17 = lbind(shift, x11)
    x18 = lbind(shift, x16)
    x19 = rbind(occurrences, x10)
    x20 = rbind(occurrences, x13)
    x21 = lbind(mapply, x17)
    x22 = lbind(mapply, x18)
    x23 = compose(x21, x19)
    x24 = compose(x22, x20)
    x25 = fork(paint, identity, x23)
    x26 = fork(paint, identity, x24)
    x27 = compose(x25, x26)
    x28 = multiply(SIX, SEVEN)
    x29 = power(x27, x28)
    x30 = replace(I, SIX, TWO)
    x31 = x29(x30)
    x32 = insert(x14, x9)
    x33 = insert(x4, x32)
    x34 = initset(x7)
    x35 = insert(x6, x34)
    x36 = lbind(shift, x35)
    x37 = occurrences(x31, x33)
    x38 = mapply(x36, x37)
    x39 = paint(x31, x38)
    x40 = initset(DOWN)
    x41 = insert(RIGHT, x40)
    x42 = insert(UNITY, x41)
    x43 = recolor(TWO, x42)
    x44 = initset(x8)
    x45 = lbind(shift, x44)
    x46 = occurrences(x31, x43)
    x47 = mapply(x45, x46)
    x48 = paint(x39, x47)
    x49 = ofcolor(I, SIX)
    x50 = fill(x48, SIX, x49)
    x51 = objects(x31, T, T, T)
    x52 = colorfilter(x51, TWO)
    x53 = apply(toindices, x52)
    x54 = rbind(argmin, first)
    x55 = apply(x54, x53)
    x56 = fill(x50, SIX, x55)
    x57 = shift(x55, UP)
    O = fill(x56, SEVEN, x57)
    return O


def solve_69889d6e(I):
    x1 = astuple(ZERO, RIGHT)
    x2 = astuple(TWO, DOWN)
    x3 = astuple(TWO, UNITY)
    x4 = astuple(ONE, ORIGIN)
    x5 = astuple(TWO, RIGHT)
    x6 = tojvec(TWO)
    x7 = toivec(TWO)
    x8 = astuple(ZERO, x6)
    x9 = astuple(TWO, x7)
    x10 = astuple(TWO, x6)
    x11 = initset(x1)
    x12 = initset(x4)
    x13 = insert(x3, x11)
    x14 = initset(x2)
    x15 = insert(x8, x14)
    x16 = insert(x9, x15)
    x17 = combine(x13, x16)
    x18 = recolor(TWO, x17)
    x19 = insert(x2, x12)
    x20 = insert(x3, x19)
    x21 = insert(x4, x13)
    x22 = insert(x5, x12)
    x23 = insert(x3, x22)
    x24 = insert(x10, x22)
    x25 = lbind(lbind, shift)
    x26 = lbind(fork, paint)
    x27 = lbind(x26, identity)
    x28 = lbind(rbind, occurrences)
    x29 = lbind(lbind, mapply)
    x30 = compose(x29, x25)
    x31 = compose(x30, first)
    x32 = compose(x28, last)
    x33 = fork(compose, x31, x32)
    x34 = astuple(x18, x17)
    x35 = astuple(x20, x19)
    x36 = astuple(x23, x21)
    x37 = astuple(x24, x22)
    x38 = compose(x27, x33)
    x39 = x38(x34)
    x40 = x38(x35)
    x41 = x38(x36)
    x42 = x38(x37)
    x43 = compose(x39, x40)
    x44 = compose(x41, x42)
    x45 = compose(x43, x44)
    x46 = multiply(TWO, TEN)
    x47 = power(x45, x46)
    x48 = ofcolor(I, TWO)
    x49 = shift(x48, UP_RIGHT)
    x50 = shift(x48, UP)
    x51 = combine(x49, x50)
    x52 = fill(I, TWO, x51)
    x53 = x47(x52)
    x54 = ofcolor(x53, TWO)
    x55 = urcorner(x54)
    x56 = add(UP, x55)
    x57 = initset(x56)
    O = fill(x53, TWO, x57)
    return O


def solve_97a05b5b(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, size)
    x3 = subgrid(x2, I)
    x4 = rbind(greater, ONE)
    x5 = compose(x4, numcolors)
    x6 = sfilter(x1, x5)
    x7 = lbind(rbind, subtract)
    x8 = switch(x3, TWO, ZERO)
    x9 = lbind(occurrences, x8)
    x10 = lbind(lbind, shift)
    x11 = compose(x7, ulcorner)
    x12 = matcher(first, TWO)
    x13 = compose(flip, x12)
    x14 = rbind(sfilter, x12)
    x15 = rbind(sfilter, x13)
    x16 = lbind(recolor, ZERO)
    x17 = compose(x16, x15)
    x18 = fork(combine, x17, x14)
    x19 = chain(x11, x18, normalize)
    x20 = objects(x8, T, T, T)
    x21 = apply(toindices, x20)
    x22 = chain(x9, x18, normalize)
    x23 = rbind(colorcount, TWO)
    x24 = lbind(sfilter, x21)
    x25 = chain(size, first, x24)
    x26 = compose(positive, size)
    x27 = lbind(lbind, contained)
    x28 = chain(x26, x24, x27)
    x29 = compose(x25, x27)
    x30 = rbind(sfilter, x28)
    x31 = compose(x30, x22)
    x32 = lbind(rbind, equality)
    x33 = rbind(compose, x29)
    x34 = chain(x33, x32, x23)
    x35 = fork(sfilter, x31, x34)
    x36 = fork(apply, x19, x35)
    x37 = compose(x10, normalize)
    x38 = fork(mapply, x37, x36)
    x39 = astuple(cmirror, dmirror)
    x40 = astuple(hmirror, vmirror)
    x41 = combine(x39, x40)
    x42 = product(x41, x41)
    x43 = fork(compose, first, last)
    x44 = apply(x43, x42)
    x45 = lbind(rapply, x44)
    x46 = mapply(x45, x6)
    x47 = mapply(x38, x46)
    x48 = paint(x3, x47)
    x49 = palette(x47)
    x50 = lbind(remove, TWO)
    x51 = x50(x49)
    x52 = chain(first, x50, palette)
    x53 = rbind(contained, x51)
    x54 = chain(flip, x53, x52)
    x55 = sfilter(x6, x54)
    x56 = fork(apply, x19, x22)
    x57 = fork(mapply, x37, x56)
    x58 = mapply(x45, x55)
    x59 = mapply(x57, x58)
    O = paint(x48, x59)
    return O


def solve_b457fec5(I):
    x1 = objects(I, F, T, T)
    x2 = argmin(x1, size)
    x3 = compose(last, last)
    x4 = colorfilter(x1, FIVE)
    x5 = order(x2, x3)
    x6 = apply(first, x5)
    x7 = first(x4)
    x8 = rightmost(x7)
    x9 = matcher(x3, x8)
    x10 = sfilter(x7, x9)
    x11 = size(x10)
    x12 = decrement(x11)
    x13 = size(x6)
    x14 = interval(ZERO, x13, ONE)
    x15 = pair(x14, x14)
    x16 = tojvec(x12)
    x17 = toivec(x12)
    x18 = connect(ORIGIN, x16)
    x19 = connect(ORIGIN, x17)
    x20 = combine(x18, x19)
    x21 = lbind(shift, x20)
    x22 = apply(x21, x15)
    x23 = mpapply(recolor, x6, x22)
    x24 = lbind(shift, x23)
    x25 = lbind(index, I)
    x26 = compose(x25, ulcorner)
    x27 = matcher(x26, FIVE)
    x28 = sfilter(x4, x27)
    x29 = rbind(divide, x13)
    x30 = rbind(subtract, x12)
    x31 = chain(increment, x30, width)
    x32 = lbind(interval, ZERO)
    x33 = rbind(x32, ONE)
    x34 = chain(x33, x29, x31)
    x35 = astuple(x13, x13)
    x36 = lbind(multiply, x35)
    x37 = lbind(mapply, x24)
    x38 = lbind(apply, x36)
    x39 = chain(x37, x38, x34)
    x40 = fork(shift, x39, ulcorner)
    x41 = lbind(rbind, contained)
    x42 = rbind(compose, last)
    x43 = chain(x42, x41, toindices)
    x44 = fork(sfilter, x40, x43)
    x45 = mapply(x44, x28)
    x46 = lbind(apply, first)
    x47 = fork(product, identity, identity)
    x48 = difference(x4, x28)
    x49 = compose(x46, x47)
    x50 = compose(vmirror, x49)
    x51 = compose(x50, x39)
    x52 = chain(invert, urcorner, x39)
    x53 = fork(shift, x51, x52)
    x54 = fork(shift, x53, urcorner)
    x55 = fork(sfilter, x54, x43)
    x56 = mapply(x55, x48)
    x57 = combine(x45, x56)
    x58 = paint(I, x57)
    x59 = last(x6)
    O = replace(x58, FIVE, x59)
    return O


def solve_3e980e27(I):
    x1 = objects(I, F, T, T)
    x2 = lbind(contained, TWO)
    x3 = compose(x2, palette)
    x4 = lbind(contained, THREE)
    x5 = compose(x4, palette)
    x6 = sfilter(x1, x3)
    x7 = sfilter(x1, x5)
    x8 = compose(positive, size)
    x9 = x8(x7)
    x10 = x8(x6)
    x11 = both(x9, x10)
    x12 = repeat(ZERO, ZERO)
    x13 = rbind(subgrid, I)
    x14 = chain(asobject, vmirror, x13)
    x15 = matcher(first, ZERO)
    x16 = compose(flip, x15)
    x17 = lbind(matcher, first)
    x18 = lbind(rbind, add)
    x19 = rbind(argmax, size)
    x20 = chain(x18, invert, ulcorner)
    x21 = lbind(lbind, shift)
    x22 = lbind(occurrences, I)
    x23 = rbind(astuple, ORIGIN)
    x24 = chain(x22, initset, x23)
    x25 = branch(x9, x7, x6)
    x26 = x19(x25)
    x27 = branch(x9, identity, x14)
    x28 = branch(x9, THREE, TWO)
    x29 = x27(x26)
    x30 = sfilter(x29, x16)
    x31 = x24(x28)
    x32 = x17(x28)
    x33 = sfilter(x26, x32)
    x34 = center(x33)
    x35 = remove(x34, x31)
    x36 = normalize(x30)
    x37 = sfilter(x36, x32)
    x38 = x20(x37)
    x39 = apply(x38, x35)
    x40 = x21(x36)
    x41 = mapply(x40, x39)
    x42 = paint(I, x41)
    x43 = branch(x10, x6, x7)
    x44 = x19(x43)
    x45 = branch(x9, x14, identity)
    x46 = branch(x10, TWO, THREE)
    x47 = x45(x44)
    x48 = sfilter(x47, x16)
    x49 = x24(x46)
    x50 = x17(x46)
    x51 = sfilter(x44, x50)
    x52 = center(x51)
    x53 = remove(x52, x49)
    x54 = normalize(x48)
    x55 = sfilter(x54, x50)
    x56 = x20(x55)
    x57 = apply(x56, x53)
    x58 = branch(x11, x57, x12)
    x59 = x21(x54)
    x60 = mapply(x59, x58)
    O = paint(x42, x60)
    return O


def solve_b15fca0b(I):
    x1 = shape(I)
    x2 = add(x1, TWO)
    x3 = asobject(I)
    x4 = canvas(ZERO, x2)
    x5 = shift(x3, UNITY)
    x6 = paint(x4, x5)
    x7 = outbox(x5)
    x8 = fill(x6, ONE, x7)
    x9 = height(x8)
    x10 = width(x8)
    x11 = interval(ZERO, x9, ONE)
    x12 = interval(ZERO, x10, ONE)
    x13 = product(x11, x12)
    x14 = product(x13, x13)
    x15 = rbind(interval, ONE)
    x16 = compose(first, first)
    x17 = compose(first, last)
    x18 = compose(last, first)
    x19 = compose(last, last)
    x20 = fork(add, x16, x17)
    x21 = fork(add, x18, x19)
    x22 = fork(x15, x16, x20)
    x23 = fork(x15, x18, x21)
    x24 = fork(product, x22, x23)
    x25 = apply(x24, x14)
    x26 = initset(ONE)
    x27 = lbind(contained, ONE)
    x28 = initset(ZERO)
    x29 = rbind(equality, x26)
    x30 = compose(flip, x27)
    x31 = rbind(toobject, x8)
    x32 = rbind(shift, LEFT)
    x33 = rbind(shift, RIGHT)
    x34 = rbind(shift, UP)
    x35 = rbind(shift, DOWN)
    x36 = fork(difference, x32, identity)
    x37 = fork(difference, x33, identity)
    x38 = fork(difference, x34, identity)
    x39 = fork(difference, x35, identity)
    x40 = compose(palette, x31)
    x41 = matcher(x40, x28)
    x42 = sfilter(x25, x41)
    x43 = chain(x29, x40, x36)
    x44 = chain(x29, x40, x37)
    x45 = chain(x29, x40, x38)
    x46 = chain(x29, x40, x39)
    x47 = chain(x30, x40, x36)
    x48 = chain(x30, x40, x37)
    x49 = chain(x30, x40, x38)
    x50 = chain(x30, x40, x39)
    x51 = fork(add, x43, x44)
    x52 = fork(add, x45, x46)
    x53 = fork(add, x51, x52)
    x54 = fork(add, x48, x47)
    x55 = fork(add, x49, x50)
    x56 = fork(add, x54, x55)
    x57 = matcher(x53, THREE)
    x58 = matcher(x56, ONE)
    x59 = fork(both, x57, x58)
    x60 = mfilter(x42, x59)
    x61 = fill(x8, ONE, x60)
    x62 = trim(x61)
    x63 = ofcolor(x62, ZERO)
    O = fill(I, FOUR, x63)
    return O


def solve_6ad5bdfd(I):
    x1 = ofcolor(I, TWO)
    x2 = asindices(I)
    x3 = difference(x2, x1)
    x4 = subgrid(x3, I)
    x5 = vline(x1)
    x6 = ulcorner(x1)
    x7 = maximum(x6)
    x8 = equality(x7, ZERO)    
    x9 = branch(x8, LEFT, RIGHT)
    x10 = branch(x8, leftmost, rightmost)
    x11 = branch(x8, argmin, argmax)
    x12 = branch(x8, UP, DOWN)
    x13 = branch(x8, uppermost, lowermost)
    x14 = branch(x5, x9, x12)
    x15 = branch(x5, x10, x13)
    x16 = initset(ZERO)
    x17 = rbind(shift, x14)
    x18 = fork(difference, x17, identity)
    x19 = rbind(matcher, x16)
    x20 = lbind(rbind, toobject)
    x21 = compose(x20, first)
    x22 = rbind(chain, x18)
    x23 = lbind(x22, palette)
    x24 = chain(x19, x23, x21)
    x25 = compose(size, x18)
    x26 = lbind(x22, size)
    x27 = compose(x26, x21)
    x28 = lbind(fork, equality)
    x29 = lbind(x28, x25)
    x30 = compose(x29, x27)
    x31 = lbind(fork, both)
    x32 = fork(x31, x24, x30)
    x33 = fork(sfilter, last, x32)
    x34 = rbind(x11, x15)
    x35 = compose(x34, x33)
    x36 = fork(cover, first, x35)
    x37 = fork(remove, x35, last)
    x38 = compose(x17, x35)
    x39 = fork(paint, x36, x38)
    x40 = fork(insert, x38, x37)
    x41 = fork(astuple, x39, x40)
    x42 = chain(positive, size, x33)
    x43 = objects(x4, T, F, T)
    x44 = merge(x43)
    x45 = cover(x4, x44)
    x46 = astuple(x45, x43)
    x47 = x33(x46)
    x48 = difference(x43, x47)
    x49 = merge(x48)
    x50 = paint(x45, x49)
    x51 = astuple(x50, x43)
    x52 = multiply(FIVE, TEN)
    x53 = rbind(branch, identity)
    x54 = rbind(x53, x41)
    x55 = compose(x54, x42)
    x56 = compose(initset, x55)
    x57 = fork(rapply, x56, identity)
    x58 = compose(first, x57)
    x59 = power(x58, x52)
    x60 = x59(x51)
    x61 = first(x60)
    x62 = asobject(x61)
    x63 = ulcorner(x3)
    x64 = shift(x62, x63)
    O = paint(I, x64)
    return O


def solve_3490cc26(I):
    x1 = rbind(colorfilter, EIGHT)
    x2 = rbind(objects, T)
    x3 = rbind(x2, F)
    x4 = rbind(x3, T)
    x5 = chain(x1, x4, first)
    x6 = lbind(apply, toindices)
    x7 = compose(uppermost, last)
    x8 = compose(leftmost, last)
    x9 = lbind(rbind, equality)
    x10 = rbind(compose, uppermost)
    x11 = rbind(compose, leftmost)
    x12 = chain(x10, x9, x7)
    x13 = chain(x11, x9, x8)
    x14 = lbind(fork, either)
    x15 = fork(x14, x12, x13)
    x16 = fork(sfilter, x5, x15)
    x17 = compose(x6, x16)
    x18 = chain(positive, size, x17)
    x19 = rbind(branch, last)
    x20 = rbind(x19, first)
    x21 = compose(x20, x18)
    x22 = lbind(lbind, manhattan)
    x23 = compose(x22, last)
    x24 = fork(argmin, x17, x23)
    x25 = fork(astuple, x24, last)
    x26 = rbind(compose, x25)
    x27 = compose(x26, x21)
    x28 = compose(initset, x27)
    x29 = fork(rapply, x28, identity)
    x30 = compose(first, x29)
    x31 = rbind(ofcolor, TWO)
    x32 = lbind(prapply, connect)
    x33 = compose(x31, first)
    x34 = fork(x32, x33, x30)
    x35 = repeat(ONE, ZERO)
    x36 = compose(merge, x34)
    x37 = rbind(branch, x35)
    x38 = lbind(fork, x37)
    x39 = rbind(x38, x36)
    x40 = rbind(ofcolor, SEVEN)
    x41 = compose(x40, first)
    x42 = fork(intersection, x36, x41)
    x43 = compose(size, x42)
    x44 = matcher(x43, ZERO)
    x45 = x39(x44)
    x46 = rbind(replace, ONE)
    x47 = rbind(x46, TWO)
    x48 = lbind(recolor, SEVEN)
    x49 = compose(x47, first)
    x50 = compose(x48, x45)
    x51 = fork(underpaint, x49, x50)
    x52 = lbind(recolor, TWO)
    x53 = compose(x52, x30)
    x54 = fork(paint, x51, x53)
    x55 = fork(astuple, x54, x30)
    x56 = ofcolor(I, TWO)
    x57 = astuple(I, x56)
    x58 = power(x55, TEN)
    x59 = x58(x57)
    x60 = first(x59)
    x61 = ofcolor(x60, TWO)
    x62 = ofcolor(x60, ONE)
    x63 = combine(x61, x62)
    x64 = fill(x60, EIGHT, x63)
    O = fill(x64, TWO, x56)
    return O


def solve_da515329(I):
    x1 = ofcolor(I, EIGHT)
    x2 = center(x1)
    x3 = initset(x2)
    x4 = fill(I, ONE, x3)
    x5 = shape(I)
    x6 = double(x5)
    x7 = canvas(ZERO, x6)
    x8 = halve(x5)
    x9 = asobject(x4)
    x10 = shift(x9, x8)
    x11 = paint(x7, x10)
    x12 = astuple(ONE, TWO)
    x13 = astuple(ZERO, RIGHT)
    x14 = astuple(ZERO, DOWN)
    x15 = astuple(EIGHT, UNITY)
    x16 = astuple(ZERO, x12)
    x17 = astuple(x13, x14)
    x18 = astuple(x15, x16)
    x19 = combine(x17, x18)
    x20 = rbind(occurrences, x19)
    x21 = astuple(ONE, THREE)
    x22 = astuple(TWO, THREE)
    x23 = rbind(add, x21)
    x24 = rbind(add, x22)
    x25 = rbind(add, TWO_BY_TWO)
    x26 = astuple(x23, x24)
    x27 = repeat(x25, ONE)
    x28 = combine(x26, x27)
    x29 = lbind(rapply, x28)
    x30 = lbind(rbind, toobject)
    x31 = rbind(chain, x29)
    x32 = lbind(x31, palette)
    x33 = initset(ZERO)
    x34 = rbind(matcher, x33)
    x35 = chain(x34, x32, x30)
    x36 = rbind(add, UP_RIGHT)
    x37 = lbind(lbind, index)
    x38 = rbind(compose, x36)
    x39 = rbind(matcher, ZERO)
    x40 = chain(x39, x38, x37)
    x41 = fork(sfilter, x20, x35)
    x42 = fork(difference, x20, x41)
    x43 = fork(sfilter, x42, x40)
    x44 = fork(combine, x41, x43)
    x45 = fork(difference, x20, x44)
    x46 = lbind(recolor, EIGHT)
    x47 = rbind(power, FOUR)
    x48 = rbind(shift, x12)
    x49 = rbind(shift, RIGHT)
    x50 = rbind(shift, DOWN)
    x51 = chain(x46, x48, x41)
    x52 = chain(x46, x49, x43)
    x53 = chain(x46, x50, x45)
    x54 = lbind(fork, paint)
    x55 = lbind(x54, identity)
    x56 = lbind(compose, rot90)
    x57 = chain(x47, x56, x55)
    x58 = x57(x51)
    x59 = x57(x52)
    x60 = x57(x53)
    x61 = chain(x60, x59, x58)
    x62 = multiply(TEN, TEN)
    x63 = power(x61, x62)
    x64 = x63(x11)
    x65 = crop(x64, x8, x5)
    O = replace(x65, ONE, ZERO)
    return O


def solve_212895b5(I):
    x1 = rbind(ofcolor, EIGHT)
    x2 = rbind(add, UP_RIGHT)
    x3 = chain(x2, urcorner, x1)
    x4 = lbind(recolor, TWO)
    x5 = chain(x4, initset, x3)
    x6 = astuple(TWO, TWO_BY_ZERO)
    x7 = astuple(TWO, UNITY)
    x8 = astuple(ZERO, ZERO_BY_TWO)
    x9 = initset(x6)
    x10 = insert(x7, x9)
    x11 = insert(x8, x10)
    x12 = recolor(TWO, x11)
    x13 = lbind(shift, x12)
    x14 = astuple(ONE, TWO)
    x15 = rbind(add, RIGHT)
    x16 = rbind(add, x14)
    x17 = compose(initset, x16)
    x18 = fork(insert, x15, x17)
    x19 = lbind(contained, ZERO)
    x20 = compose(x19, palette)
    x21 = fork(underpaint, identity, x5)
    x22 = lbind(chain, x20)
    x23 = rbind(x22, x18)
    x24 = lbind(rbind, toobject)
    x25 = compose(x23, x24)
    x26 = rbind(occurrences, x11)
    x27 = fork(sfilter, x26, x25)
    x28 = lbind(mapply, x13)
    x29 = compose(x28, x27)
    x30 = fork(paint, identity, x29)
    x31 = power(x30, TEN)
    x32 = compose(x31, x21)
    x33 = compose(rot90, x32)
    x34 = power(x33, FOUR)
    x35 = x1(I)
    x36 = center(x35)
    x37 = corners(x35)
    x38 = fill(I, TWO, x37)
    x39 = x34(x38)
    x40 = fill(x39, EIGHT, x35)
    x41 = lbind(add, x36)
    x42 = compose(x41, double)
    x43 = dneighbors(ORIGIN)
    x44 = apply(x42, x43)
    x45 = underfill(x40, FOUR, x44)
    x46 = astuple(NEG_ONE, TWO)
    x47 = connect(ORIGIN, ZERO_BY_TWO)
    x48 = insert(x46, x47)
    x49 = interval(ZERO, TEN, ONE)
    x50 = astuple(NEG_TWO, TWO)
    x51 = lbind(multiply, x50)
    x52 = apply(x51, x49)
    x53 = lbind(shift, x48)
    x54 = mapply(x53, x52)
    x55 = astuple(THREE, ZERO)
    x56 = rbind(subtract, x55)
    x57 = chain(x56, center, x1)
    x58 = lbind(shift, x54)
    x59 = lbind(recolor, FOUR)
    x60 = chain(x59, x58, x57)
    x61 = fork(underpaint, identity, x60)
    x62 = compose(rot90, x61)
    x63 = power(x62, FOUR)
    x64 = x63(x45)
    x65 = objects(x64, T, F, F)
    x66 = colorfilter(x65, FOUR)
    x67 = lbind(adjacent, x35)
    x68 = sfilter(x66, x67)
    x69 = difference(x66, x68)
    x70 = merge(x69)
    O =  fill(x64, ZERO, x70)
    return O


def solve_b9630600(I):
    x1 = chain(increment, uppermost, first)
    x2 = compose(uppermost, last)
    x3 = fork(greater, x1, x2)
    x4 = compose(lowermost, last)
    x5 = chain(decrement, lowermost, first)
    x6 = fork(greater, x4, x5)
    x7 = fork(both, x3, x6)
    x8 = rbind(colorcount, THREE)
    x9 = compose(x8, first)
    x10 = compose(x8, last)
    x11 = fork(add, x9, x10)
    x12 = compose(backdrop, merge)
    x13 = lbind(fork, equality)
    x14 = rbind(x13, x11)
    x15 = rbind(toobject, I)
    x16 = chain(x8, x15, x12)
    x17 = x14(x16)
    x18 = fork(manhattan, first, last)
    x19 = lbind(greater, NINE)
    x20 = compose(x19, x18)
    x21 = fork(both, x7, x20)
    x22 = fork(both, x21, x17)
    x23 = rbind(order, leftmost)
    x24 = rbind(valmax, uppermost)
    x25 = rbind(valmin, lowermost)
    x26 = chain(rightmost, first, x23)
    x27 = chain(leftmost, last, x23)
    x28 = fork(astuple, x24, x26)
    x29 = fork(astuple, x24, x27)
    x30 = fork(astuple, x25, x26)
    x31 = fork(astuple, x25, x27)
    x32 = lbind(add, DOWN)
    x33 = lbind(add, UP)
    x34 = compose(x32, x28)
    x35 = compose(x32, x29)
    x36 = compose(x33, x30)
    x37 = compose(x33, x31)
    x38 = fork(connect, x34, x35)
    x39 = fork(connect, x36, x37)
    x40 = fork(connect, x34, x36)
    x41 = fork(connect, x35, x37)
    x42 = fork(combine, x38, x39)
    x43 = fork(combine, x40, x41)
    x44 = objects(I, T, T, T)
    x45 = product(x44, x44)
    x46 = fork(equality, first, last)
    x47 = compose(flip, x46)
    x48 = sfilter(x45, x47)
    x49 = sfilter(x48, x22)
    x50 = fork(hmatching, first, last)
    x51 = sfilter(x49, x50)
    x52 = mapply(x43, x51)
    x53 = mapply(x42, x51)
    x54 = fill(I, ZERO, x52)
    x55 = fill(x54, THREE, x53)
    x56 = dmirror(I)
    x57 = objects(x56, T, T, T)
    x58 = product(x57, x57)
    x59 = sfilter(x58, x47)
    x60 = rbind(toobject, x56)
    x61 = chain(x8, x60, x12)
    x62 = x14(x61)
    x63 = fork(both, x21, x62)
    x64 = sfilter(x59, x63)
    x65 = sfilter(x64, x50)
    x66 = mapply(x43, x65)
    x67 = mapply(x42, x65)
    x68 = fill(x56, TWO, x66)
    x69 = fill(x56, TWO, x67)
    x70 = dmirror(x68)
    x71 = dmirror(x69)
    x72 = ofcolor(x70, TWO)
    x73 = fill(x55, ZERO, x72)
    x74 = ofcolor(x71, TWO)
    O = fill(x73, THREE, x74)
    return O


def solve_b0722778(I):
    x1 = canvas(ZERO, TWO_BY_TWO)
    x2 = asindices(x1)
    x3 = lbind(shift, x2)
    x4 = rbind(toobject, I)
    x5 = height(I)
    x6 = interval(ZERO, x5, THREE)
    x7 = apply(toivec, x6)
    x8 = tojvec(THREE)
    x9 = tojvec(SEVEN)
    x10 = rbind(add, x8)
    x11 = rbind(add, x9)
    x12 = apply(x10, x7)
    x13 = apply(x11, x7)
    x14 = pair(x7, x12)
    x15 = pair(x14, x13)
    x16 = astuple(ONE, TWO)
    x17 = lbind(paint, x1)
    x18 = canvas(ZERO, x16)
    x19 = chain(normalize, x4, x3)
    x20 = lbind(apply, toindices)
    x21 = chain(x20, partition, x17)
    x22 = lbind(matcher, first)
    x23 = compose(x22, first)
    x24 = chain(x19, first, first)
    x25 = chain(x19, last, first)
    x26 = compose(totuple, palette)
    x27 = rbind(fork, last)
    x28 = rbind(compose, first)
    x29 = lbind(chain, last)
    x30 = rbind(x29, x23)
    x31 = lbind(lbind, extract)
    x32 = rbind(branch, last)
    x33 = lbind(rbind, contained)
    x34 = rbind(compose, last)
    x35 = lbind(lbind, sfilter)
    x36 = lbind(compose, color)
    x37 = lbind(compose, initset)
    x38 = compose(x37, first)
    x39 = lbind(compose, first)
    x40 = lbind(fork, rapply)
    x41 = compose(x19, last)
    x42 = compose(palette, x24)
    x43 = compose(palette, x25)
    x44 = compose(palette, x41)
    x45 = rbind(x32, first)
    x46 = rbind(branch, x21)
    x47 = rbind(x46, palette)
    x48 = fork(astuple, x42, x43)
    x49 = fork(contained, x44, x48)
    x50 = lbind(x27, astuple)
    x51 = compose(x50, x28)
    x52 = compose(x30, x31)
    x53 = compose(x50, x52)
    x54 = compose(x47, x49)
    x55 = astuple(x54, x41)
    x56 = astuple(x54, x24)
    x57 = fork(astuple, x24, x25)
    x58 = fork(astuple, x25, x24)
    x59 = fork(x40, x38, last)
    x60 = compose(x39, x59)
    x61 = x60(x55)
    x62 = x60(x56)
    x63 = fork(equality, x61, x62)
    x64 = compose(x45, x63)
    x65 = astuple(x64, x57)
    x66 = astuple(x64, x58)
    x67 = lbind(vconcat, x18)
    x68 = x60(x65)
    x69 = x60(x66)
    x70 = compose(x67, x17)
    x71 = compose(x45, x49)
    x72 = fork(astuple, x41, x69)
    x73 = astuple(x71, x72)
    x74 = x60(x73)
    x75 = compose(x26, x68)
    x76 = rbind(compose, x22)
    x77 = chain(x76, x35, x68)
    x78 = chain(x34, x33, toindices)
    x79 = compose(x35, x69)
    x80 = rbind(compose, x78)
    x81 = compose(x80, x79)
    x82 = fork(compose, x81, x77)
    x83 = compose(x36, x82)
    x84 = fork(apply, x83, x75)
    x85 = fork(pair, x75, x84)
    x86 = compose(x53, x85)
    x87 = rbind(chain, x22)
    x88 = lbind(x87, x78)
    x89 = chain(x88, x35, x68)
    x90 = compose(x35, x41)
    x91 = fork(compose, x90, x89)
    x92 = chain(x51, x36, x91)
    x93 = fork(astuple, x86, x92)
    x94 = astuple(x71, x93)
    x95 = x60(x94)
    x96 = fork(apply, x95, x74)
    x97 = compose(x70, x96)
    x98 = mapply(x97, x15)
    x99 = shape(x98)
    O = crop(x98, DOWN, x99)
    return O


def solve_16b78196(I):
    x1 = lbind(lbind, rapply)
    x2 = chain(x1, initset, first)
    x3 = lbind(compose, first)
    x4 = compose(x3, x2)
    x5 = lbind(rbind, compose)
    x6 = compose(x5, last)
    x7 = fork(compose, x6, x4)
    x8 = lbind(compose, initset)
    x9 = lbind(fork, rapply)
    x10 = rbind(x9, identity)
    x11 = chain(x10, x8, x7)
    x12 = compose(x3, x11)
    x13 = objects(I, T, T, T)
    x14 = argmax(x13, size)
    x15 = portrait(x14)
    x16 = branch(x15, dmirror, identity)
    x17 = x16(I)
    x18 = objects(x17, T, T, T)
    x19 = argmax(x18, size)
    x20 = remove(x19, x18)
    x21 = merge(x20)
    x22 = cover(x17, x21)
    x23 = rbind(shift, DOWN)
    x24 = chain(x23, toindices, first)
    x25 = compose(toindices, first)
    x26 = rbind(equality, ZERO)
    x27 = rbind(add, UP)
    x28 = lbind(index, x17)
    x29 = chain(x26, x28, x27)
    x30 = rbind(sfilter, x29)
    x31 = chain(x30, toindices, last)
    x32 = fork(difference, x24, x25)
    x33 = compose(normalize, x32)
    x34 = compose(normalize, x31)
    x35 = fork(equality, x33, x34)
    x36 = product(x20, x20)
    x37 = fork(equality, first, last)
    x38 = compose(flip, x37)
    x39 = sfilter(x36, x38)
    x40 = sfilter(x39, x35)
    x41 = apply(last, x40)
    x42 = apply(first, x40)
    x43 = rbind(contained, x41)
    x44 = compose(x43, first)
    x45 = rbind(contained, x42)
    x46 = compose(x45, last)
    x47 = lbind(extract, x40)
    x48 = rbind(repeat, ONE)
    x49 = lbind(matcher, last)
    x50 = lbind(matcher, first)
    x51 = chain(x47, x49, first)
    x52 = chain(x47, x50, last)
    x53 = chain(x48, first, x51)
    x54 = chain(x48, last, x52)
    x55 = fork(combine, x53, identity)
    x56 = fork(combine, identity, x54)
    x57 = rbind(branch, identity)
    x58 = rbind(x57, x55)
    x59 = compose(x58, x44)
    x60 = rbind(branch, last)
    x61 = rbind(x60, first)
    x62 = lbind(astuple, x56)
    x63 = compose(x62, x59)
    x64 = compose(x61, x46)
    x65 = astuple(x64, x63)
    x66 = x12(x65)
    x67 = astuple(x66, identity)
    x68 = x12(x67)
    x69 = apply(x68, x40)
    x70 = rbind(subgrid, x17)
    x71 = lbind(mapply, x70)
    x72 = apply(x71, x69)
    x73 = rbind(order, uppermost)
    x74 = compose(x73, fgpartition)
    x75 = compose(first, last)
    x76 = fork(remove, x75, last)
    x77 = rbind(argmin, uppermost)
    x78 = invert(TEN)
    x79 = interval(ZERO, x78, NEG_ONE)
    x80 = apply(toivec, x79)
    x81 = rbind(apply, x80)
    x82 = lbind(lbind, shift)
    x83 = chain(x82, first, last)
    x84 = compose(x81, x83)
    x85 = lbind(fork, both)
    x86 = lbind(compose, x26)
    x87 = rbind(compose, uppermost)
    x88 = lbind(chain, size)
    x89 = rbind(x88, toindices)
    x90 = lbind(rbind, greater)
    x91 = lbind(rbind, intersection)
    x92 = chain(x86, x89, x91)
    x93 = compose(x92, x25)
    x94 = chain(x87, x90, uppermost)
    x95 = compose(x94, first)
    x96 = fork(x85, x93, x95)
    x97 = fork(sfilter, x84, x96)
    x98 = compose(x77, x97)
    x99 = fork(combine, first, x98)
    x100 = fork(astuple, x99, x76)
    x101 = chain(decrement, size, x74)
    x102 = compose(first, x74)
    x103 = fork(remove, x102, x74)
    x104 = fork(astuple, x102, x103)
    x105 = lbind(power, x100)
    x106 = compose(x105, x101)
    x107 = lbind(canvas, ZERO)
    x108 = astuple(x106, x104)
    x109 = x12(x108)
    x110 = compose(first, x109)
    x111 = chain(x107, shape, x110)
    x112 = fork(paint, x111, x110)
    x113 = matcher(first, ZERO)
    x114 = compose(flip, x113)
    x115 = rbind(sfilter, x114)
    x116 = chain(x115, asobject, x112)
    x117 = apply(x116, x72)
    x118 = fgpartition(x22)
    x119 = merge(x118)
    x120 = center(x119)
    x121 = first(x120)
    x122 = asindices(x17)
    x123 = toindices(x119)
    x124 = rbind(branch, UP)
    x125 = rbind(x124, DOWN)
    x126 = rbind(apply, x122)
    x127 = compose(x126, x82)
    x128 = rbind(intersection, x123)
    x129 = chain(size, x128, toindices)
    x130 = compose(x26, x129)
    x131 = rbind(intersection, x122)
    x132 = chain(size, x131, toindices)
    x133 = fork(equality, x132, size)
    x134 = fork(both, x130, x133)
    x135 = lbind(fork, equality)
    x136 = rbind(x135, width)
    x137 = compose(x50, uppermost)
    x138 = fork(sfilter, toindices, x137)
    x139 = compose(size, x138)
    x140 = x136(x139)
    x141 = fork(multiply, sign, identity)
    x142 = rbind(subtract, x121)
    x143 = chain(x142, first, center)
    x144 = chain(invert, x141, x143)
    x145 = lbind(fork, add)
    x146 = lbind(x145, x144)
    x147 = lbind(rbind, shift)
    x148 = chain(x147, x125, x140)
    x149 = lbind(compose, x129)
    x150 = chain(x146, x149, x148)
    x151 = rbind(sfilter, x134)
    x152 = compose(x151, x127)
    x153 = fork(argmax, x152, x150)
    x154 = mapply(x153, x117)
    x155 = paint(x22, x154)
    O = x16(x155)
    return O


def solve_40f6cd08(I):
    x1 = objects(I, F, T, T)
    x2 = argmax(x1, numcolors)
    x3 = remove(x2, x1)
    x4 = normalize(x2)
    x5 = height(x4)
    x6 = width(x4)
    x7 = compose(first, last)
    x8 = compose(last, last)
    x9 = matcher(x7, ZERO)
    x10 = sfilter(x4, x9)
    x11 = decrement(x5)
    x12 = matcher(x7, x11)
    x13 = sfilter(x4, x12)
    x14 = matcher(x8, ZERO)
    x15 = sfilter(x4, x14)
    x16 = decrement(x6)
    x17 = matcher(x8, x16)
    x18 = sfilter(x4, x17)
    x19 = matcher(numcolors, ONE)
    x20 = x19(x10)
    x21 = x19(x13)
    x22 = x19(x15)
    x23 = x19(x18)
    x24 = both(x22, x23)
    x25 = both(x20, x21)
    x26 = flip(x21)
    x27 = flip(x20)
    x28 = flip(x22)
    x29 = flip(x23)
    x30 = both(x20, x24)
    x31 = both(x21, x24)
    x32 = both(x23, x25)
    x33 = both(x22, x25)
    x34 = both(x26, x30)
    x35 = both(x27, x31)
    x36 = both(x28, x32)
    x37 = both(x29, x33)
    x38 = lbind(sfilter, x4)
    x39 = compose(increment, x7)
    x40 = compose(decrement, x7)
    x41 = compose(increment, x8)
    x42 = compose(decrement, x8)
    x43 = lbind(rbind, greater)
    x44 = lbind(lbind, greater)
    x45 = compose(halve, height)
    x46 = compose(halve, width)
    x47 = lbind(lbind, shift)
    x48 = lbind(apply, toivec)
    x49 = lbind(apply, tojvec)
    x50 = lbind(interval, NEG_ONE)
    x51 = rbind(x50, NEG_ONE)
    x52 = rbind(interval, ONE)
    x53 = lbind(x52, ONE)
    x54 = lbind(x52, ZERO)
    x55 = lbind(matcher, x7)
    x56 = lbind(matcher, x8)
    x57 = chain(x51, decrement, invert)
    x58 = compose(x53, increment)
    x59 = compose(flip, even)
    x60 = lbind(greater, x5)
    x61 = lbind(greater, x6)
    x62 = rbind(compose, x39)
    x63 = rbind(compose, x40)
    x64 = rbind(compose, x41)
    x65 = rbind(compose, x42)
    x66 = uppermost(x4)
    x67 = lowermost(x4)
    x68 = lbind(add, x66)
    x69 = lbind(subtract, x67)
    x70 = chain(x62, x43, x68)
    x71 = chain(x63, x44, x69)
    x72 = chain(x47, x38, x55)
    x73 = x72(x66)
    x74 = x72(x67)
    x75 = lbind(mapply, x73)
    x76 = chain(x75, x48, x57)
    x77 = chain(x75, x48, x58)
    x78 = lbind(combine, x4)
    x79 = compose(x78, x76)
    x80 = compose(x78, x77)
    x81 = compose(x38, x70)
    x82 = compose(x38, x71)
    x83 = lbind(subtract, x5)
    x84 = rbind(subtract, x5)
    x85 = lbind(subtract, x6)
    x86 = rbind(subtract, x6)
    x87 = chain(x81, x83, height)
    x88 = chain(x82, x83, height)
    x89 = chain(halve, x83, height)
    x90 = chain(x79, x84, height)
    x91 = chain(x80, x84, height)
    x92 = rbind(branch, x90)
    x93 = rbind(x92, x87)
    x94 = rbind(branch, x91)
    x95 = rbind(x94, x88)
    x96 = compose(x85, width)
    x97 = compose(x86, width)
    x98 = compose(halve, x96)
    x99 = compose(x60, height)
    x100 = chain(x59, x83, height)
    x101 = fork(add, x89, x100)
    x102 = compose(x68, x45)
    x103 = x102(x4)
    x104 = lbind(add, x103)
    x105 = compose(invert, x89)
    x106 = fork(subtract, x105, x100)
    x107 = chain(x43, x104, x101)
    x108 = x45(x4)
    x109 = decrement(x108)
    x110 = add(x66, x109)
    x111 = subtract(x67, x109)
    x112 = x44(x110)
    x113 = x43(x111)
    x114 = compose(x112, x7)
    x115 = compose(x113, x7)
    x116 = chain(x38, x62, x107)
    x117 = lbind(add, x108)
    x118 = chain(x69, x117, x89)
    x119 = chain(x63, x44, x118)
    x120 = compose(toivec, x106)
    x121 = compose(x38, x119)
    x122 = compose(toivec, x89)
    x123 = fork(shift, x116, x120)
    x124 = fork(shift, x121, x122)
    x125 = fork(combine, x123, x124)
    x126 = lbind(difference, x4)
    x127 = compose(x126, x38)
    x128 = x127(x114)
    x129 = x38(x115)
    x130 = difference(x128, x129)
    x131 = x47(x130)
    x132 = x38(x114)
    x133 = compose(x93, x99)
    x134 = compose(x95, x99)
    x135 = rbind(fork, identity)
    x136 = lbind(x135, rapply)
    x137 = lbind(compose, initset)
    x138 = lbind(compose, first)
    x139 = chain(x138, x136, x137)
    x140 = x139(x133)
    x141 = x139(x134)
    x142 = lbind(branch, x35)
    x143 = lbind(branch, x34)
    x144 = lbind(combine, x132)
    x145 = chain(increment, x84, height)
    x146 = chain(x48, x54, x145)
    x147 = lbind(mapply, x131)
    x148 = chain(toivec, x84, height)
    x149 = lbind(shift, x129)
    x150 = chain(x144, x149, x148)
    x151 = compose(x147, x146)
    x152 = fork(combine, x150, x151)
    x153 = fork(astuple, x125, x152)
    x154 = rbind(branch, last)
    x155 = rbind(x154, first)
    x156 = compose(x155, x99)
    x157 = rbind(equality, x5)
    x158 = chain(flip, x157, height)
    x159 = compose(x155, x158)
    x160 = lbind(lbind, rapply)
    x161 = chain(x160, initset, first)
    x162 = compose(x138, x161)
    x163 = lbind(rbind, compose)
    x164 = compose(x163, last)
    x165 = fork(compose, x164, x162)
    x166 = lbind(fork, rapply)
    x167 = rbind(x166, identity)
    x168 = chain(x167, x137, x165)
    x169 = compose(x138, x168)
    x170 = astuple(x156, x153)
    x171 = x169(x170)
    x172 = fork(x143, x141, x171)
    x173 = fork(x142, x140, x172)
    x174 = rbind(astuple, x4)
    x175 = compose(x174, x173)
    x176 = astuple(x159, x175)
    x177 = x169(x176)
    x178 = lbind(lbind, sfilter)
    x179 = compose(x178, x177)
    x180 = compose(x61, width)
    x181 = compose(leftmost, x177)
    x182 = compose(rightmost, x177)
    x183 = chain(x49, x57, x97)
    x184 = chain(x49, x58, x97)
    x185 = chain(decrement, x46, x177)
    x186 = chain(x54, increment, x97)
    x187 = compose(invert, x98)
    x188 = compose(x59, x96)
    x189 = fork(add, x181, x96)
    x190 = fork(subtract, x182, x96)
    x191 = chain(x64, x43, x189)
    x192 = chain(x65, x44, x190)
    x193 = astuple(x179, x191)
    x194 = astuple(x179, x192)
    x195 = x169(x193)
    x196 = x169(x194)
    x197 = compose(x56, x181)
    x198 = astuple(x179, x197)
    x199 = x169(x198)
    x200 = compose(x47, x199)
    x201 = fork(mapply, x200, x183)
    x202 = fork(mapply, x200, x184)
    x203 = fork(combine, x177, x201)
    x204 = fork(combine, x177, x202)
    x205 = compose(x46, x177)
    x206 = fork(add, x181, x205)
    x207 = fork(add, x98, x188)
    x208 = fork(add, x206, x207)
    x209 = fork(subtract, x187, x188)
    x210 = chain(x64, x43, x208)
    x211 = fork(astuple, x195, x203)
    x212 = fork(astuple, x196, x204)
    x213 = compose(x155, x180)
    x214 = astuple(x213, x211)
    x215 = astuple(x213, x212)
    x216 = x169(x214)
    x217 = x169(x215)
    x218 = lbind(branch, x37)
    x219 = lbind(branch, x36)
    x220 = rbind(equality, x6)
    x221 = chain(flip, x220, width)
    x222 = astuple(x179, x210)
    x223 = x169(x222)
    x224 = fork(add, x205, x98)
    x225 = fork(subtract, x182, x224)
    x226 = chain(x65, x44, x225)
    x227 = astuple(x179, x226)
    x228 = x169(x227)
    x229 = compose(tojvec, x209)
    x230 = compose(tojvec, x98)
    x231 = fork(shift, x223, x229)
    x232 = fork(shift, x228, x230)
    x233 = fork(combine, x231, x232)
    x234 = fork(add, x181, x185)
    x235 = compose(decrement, x205)
    x236 = fork(subtract, x182, x235)
    x237 = rbind(compose, x8)
    x238 = chain(x237, x44, x234)
    x239 = chain(x237, x43, x236)
    x240 = astuple(x179, x238)
    x241 = astuple(x179, x239)
    x242 = x169(x240)
    x243 = x169(x241)
    x244 = compose(x49, x186)
    x245 = compose(tojvec, x97)
    x246 = fork(difference, x177, x242)
    x247 = fork(difference, x246, x243)
    x248 = compose(x47, x247)
    x249 = fork(mapply, x248, x244)
    x250 = fork(shift, x243, x245)
    x251 = fork(combine, x242, x250)
    x252 = fork(combine, x251, x249)
    x253 = fork(astuple, x233, x252)
    x254 = astuple(x213, x253)
    x255 = x169(x254)
    x256 = fork(x218, x217, x255)
    x257 = fork(x219, x216, x256)
    x258 = fork(astuple, x257, x177)
    x259 = compose(x155, x221)
    x260 = astuple(x259, x258)
    x261 = x169(x260)
    x262 = compose(normalize, x261)
    x263 = fork(shift, x262, ulcorner)
    x264 = mapply(x263, x3)
    x265 = merge(x3)
    x266 = cover(I, x265)
    O = paint(x266, x264)
    return O

